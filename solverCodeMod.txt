Option Explicit
Option Private Module

Public Action As String
Public GlobalAnswer As Integer  ' result from Solver
Public GlobalTyp As Integer      ' indicates the typ e of optimization
Public GlobalOldObj As Double
Public GlobalOldObjFormat As String
Public GlobalOldVars() As Double
Public GlobalOldVarFormats() As String
Public GlobalAutoOpened As Boolean
Public GlobalR1C1
Public GlobalX4Sheet
Public GlobalX4Mess
Public GlobalHelpfile
Public GlobalMerger As Integer
  
Public GlobalChange  As Boolean  'keeps track if a constraint is added or changed
Public GlobalInd As Integer      'keeps track of which constraint is being changed
Public GlobalSheetName As String 'sheet we are working on
  
Public GlobalVBHelp As String

Public GlobalContinuation As Integer
Public GlobalOutline As Boolean

Public Const PLUS_INF As Long = 2147483647#

Private Type POINTAPI
    x As Long
    y As Long
End Type

#If VBA7 Then
Private Type MSGBOXPARAMS
    cbSize As Long
    hwndOwner As LongPtr
    hInstance As LongPtr
    lpszText As LongPtr
    lpszCaption As LongPtr
    dwStyle As Long
    lpszIcon As LongPtr
    dwContextHelpId As LongPtr
    lpfnMsgBoxCallBack As LongPtr
    dwLanguageId As Long
End Type

Private Type HELPINFO
    cbSize As Long
    iContextType As Long
    iCtrlId As Long
    hItemHandle As LongPtr
    dwContextId As Long
    MousePos As POINTAPI
End Type

Private Declare PtrSafe Function MessageBoxIndirectW Lib "user32" _
   (lpMsgBoxParams As MSGBOXPARAMS) As Long

Private lpPrevWndProc As LongPtr
Public gHW As LongPtr

#Else
Private Type MSGBOXPARAMS
    cbSize As Long
    hwndOwner As Long
    hInstance As Long
    lpszText As Long
    lpszCaption As Long
    dwStyle As Long
    lpszIcon As Long
    dwContextHelpId As Long
    lpfnMsgBoxCallBack As Long
    dwLanguageId As Long
End Type

Private Type HELPINFO
    cbSize As Long
    iContextType As Long
    iCtrlId As Long
    hItemHandle As Long
    dwContextId As Long
    MousePos As POINTAPI
End Type

Private Declare Function MessageBoxIndirectW Lib "user32" _
   (lpMsgBoxParams As MSGBOXPARAMS) As Long

Private lpPrevWndProc As Long
Public gHW As Long

#End If



Private Const GWL_WNDPROC = -4
Private Const WM_GETMINMAXINFO = &H24

Private Type MINMAXINFO
    ptReserved As POINTAPI
    ptMaxSize As POINTAPI
    ptMaxPosition As POINTAPI
    ptMinTrackSize As POINTAPI
    ptMaxTrackSize As POINTAPI
End Type

Global globalHooked As Boolean
Global SolverCls As SolverCalls

Private Function ReadyForMacros() As Boolean
    'Checks to make sure we're in a safe state to run the various Solver Subs/Functions
    ReadyForMacros = False
    
    If (Application.CalculationState = xlCalculating) Then
        Exit Function
    End If
    
    'All checks passed
    ReadyForMacros = True
End Function

Private Sub SetCellValue(r As Range, ByVal v As Variant)
    'Reduce arrays to a single value
    If (VarType(v) And vbArray) Then
        v = Application.WorksheetFunction.Index(v, 1, 1)
    End If
    
    'Prepend strings that look like formulas with apostrophe
    If (VarType(v) = vbString) Then
        If (Left(v, 1) = "=") Then
            v = "'" & v
        End If
    End If
    r.Value = v
End Sub

Private Function GetGlobalX4Mess(strId As String) As String
    GetGlobalX4Mess = Trim(GlobalX4Mess.Range(strId).Text)
End Function

Public Sub Unhook()
    'Dim temp As Long
    'If globalHooked Then
    '    temp = SetWindowLongPtr(gHW, GWLP_WNDPROC, lpPrevWndProc)
    '    globalHooked = False
    'End If
End Sub

Public Sub Hook()
    'Start subclassing.
    ' Dim mhWndForm As Long
    
    'If globalHooked = False Then
    '   mhWndForm = FindWindow("ThunderDFrame", dlgSolverParameters.Caption)
    '   lpPrevWndProc = SetWindowLongPtr(mhWndForm, GWLP_WNDPROC, AddressOf WindowProc)
    '   globalHooked = True
    'End If
End Sub

Sub Stub()
    SolverMain
End Sub
 
'Callback for RibbonX button click
Public Sub MainEx(control As IRibbonControl)
    SolverMain
End Sub

'Callback for RibbonX button click
Public Sub GetSolverLabel(control As IRibbonControl, ByRef label)
    label = ThisWorkbook.Worksheets(fnGetLCID()).Range("LabelName").Text
End Sub

Public Sub GetGroupLabel(control As IRibbonControl, ByRef label)
    label = ThisWorkbook.Worksheets(fnGetLCID()).Range("GroupLabel").Text
End Sub
 
Sub SolverMain()
    Dim currentarea As String
    Dim dummy As String
    
    Dim calcmode
    
    If SolverCls Is Nothing Then
        Set SolverCls = New SolverCalls
    End If
    
    SetGlobals
    calcmode = Application.Calculation
   
    On Error GoTo errorhandling
    If ActiveSheet.Type <> xlWorksheet Or ActiveSheet.ProtectContents Then
        DisplayMessage "solver_msg_1", 1830, 0
        End
    End If
    If ActiveWorkbook.IsInplace = True Then
        DisplayMessage "solver_msg_1c", 1830, 0
        End
    End If
    If Left(Application.OperatingSystem, 1) = "W" Then
       If Application.Version > CStr(6) Then
          If ActiveWorkbook.MultiUserEditing Then
             DisplayMessage "solver_msg_1", 1830, 0
             End
          End If
       End If
    End If
    If ActiveWindow.SelectedSheets.Count > 1 Then
        DisplayMessage "solver_msg_1b", 1830, 0
        End
    End If
    On Error GoTo mainerror
    Application.EnableCancelKey = xlDisabled
    GlobalR1C1 = Application.ReferenceStyle
    On Error GoTo selectionerror
    currentarea = Selection.Address(ReferenceStyle:=GlobalR1C1)
    On Error Resume Next
    InitializeDialogSheets
    Err = 0
    dummy = ActiveSheet.Names("solver_typ")
    If Err > 0 Then
       Err = 0
       On Error GoTo mainerror
       Set_defaults
    Else
       On Error GoTo mainerror
       'Get_Newsettings
       Get_settings
    End If
    'dlgSolverParameters.Show
    Action = ""
    While Action <> "Cancel"
      Action = "Cancel"
      Application.ScreenUpdating = True
      On Error Resume Next
      ThisWorkbook.DialogSheets("Solver_dialog").Show

      'If Action <> "Cancel" And Action <> "" Then
         DefineModel
         'Define_names
         'SaveOptions
      'End If
      Select Case Action
         Case "Add"
           Add_constraint
         Case "Delete"
           Delete_constraint
         Case "Change"
           'Application.ScreenUpdating = True
           Change_constraint
         Case "Options"
'           While Action = "Options" Or Action = "Save_model" Or Action = "Load_model" Or Action = "Saveload"
'              Select Case Action
'              Case "Options"
'                 Application.ScreenUpdating = True
'                 Show_options
'              Case "Save_model"
'                 Application.ScreenUpdating = True
'                 Save_model
'              Case "Load_model"
'                 Application.ScreenUpdating = True
'                 Load_model
'              End Select
'              If Action = "Saveload" Then
'                 SaveLoad_ok
'                 If Action = "Saveload" Then
'                    Action = "Options"
'                 ElseIf Action = "Save_again" Then
'                    Action = "Save_model"
'                 End If
'              End If
'           Wend
            dlgOptions.Show
         Case "LoadSave"
            LoadSave
         Case "Solve"
            SolveModel
      End Select
    Wend
    
    Application.ScreenUpdating = False
    Range(Stylecheck(currentarea)).Select
    Application.ScreenUpdating = True
    Application.Calculation = calcmode
    Application.StatusBar = False
    Exit Sub
selectionerror:
    Range("$A$1").Select
    currentarea = Selection.Address(ReferenceStyle:=GlobalR1C1)
    Resume Next
mainerror:
    DisplayMessage "solver_err_msg", 1830, 0
    Range(Stylecheck(currentarea)).Select
    Application.Calculation = calcmode
    Application.StatusBar = False
    End
errorhandling:
    DisplayMessage "solver_msg_1", 1830, 0
    End
End Sub


Public Sub Set_defaults()
    ' sets default for fresh worksheet.
   With ThisWorkbook.DialogSheets("Solver_dialog")
         .EditBoxes("Optimum_Cell").Text = ActiveCell.Address(ReferenceStyle:=GlobalR1C1)
         .EditBoxes("dValueof").Text = CStr(0)
         .EditBoxes("dValueof").Enabled = False
         .OptionButtons("max_button").Value = xlOn
         .EditBoxes("Adjustable_cells").Caption = ""
         .ListBoxes("Constraint_list").RemoveAllItems
         .CheckBoxes("Nonneg").Value = xlOn
         .DropDowns("enginelist").ListIndex = 1
    End With
    With dlgSolverParameters
         .refObj.Text = ActiveCell.Address(ReferenceStyle:=GlobalR1C1)
         .editValueOf.Text = CStr(0)
         .editValueOf.Enabled = False
         .radioMax.Value = True
         .refVariables.Text = ""
         .listConstraints.Clear
         .chkAssumeNonNeg = True
         .comboEngines.ListIndex = 0
    End With
    SetOptionDefaults
End Sub

Public Sub SetOptionDefaults()
    With dlgOptions
        .editTime = ""
        .editIterations = ""
        .editPrecision = CStr(0.000001)
        .editConvergence = CStr(0.0001)
        .editConvEvol = CStr(0.0001)
        .editPopSizeGRG = CStr(100)
        .editPopEvol = CStr(100)
        .editMutate = CStr(0.075)
        .editSeedEvol = CStr(0)
        .editSeedGRG = CStr(0)
        .editTimeLimit = CStr(30)
        .radioForward = True
        .chkScaling = True
        .chkIterations = False
        .chkMultiStart = False
        .chkBounds = True
        .chkBoundsEvol = True
        .editMaxSolutions = ""
        .editMaxSubproblems = ""
        .editMipGap = 1
        .chkRelax = False
    End With
End Sub


Public Sub Get_Newsettings()
    'gets relevant setting for the worksheet, if not a fresh worksheet
    ' many options need not always be defined, so "on error resume next"
    Dim noproblem As Boolean, newopt As String, solver_eng As Integer, newadj As String
    Dim the_right As String, mid_ind As Integer, the_left As String, helpstring  As String
    Dim i As Integer, j As Integer, newentry As String, theindex As Integer, the_middle As String
    Dim thenewstring As String, dummy As String, solver_neg, helpstring2 As String
    Dim dummy2 As Integer, ii As Integer
    noproblem = True
    On Error GoTo errortrap
    newopt = ActiveSheet.Names("solver_opt")
    With dlgSolverParameters
    If noproblem Then
       .refObj.Text = GetName(Range(Stylecheck(newopt)).Address)
    Else
       .refObj.Text = ""
    End If
    noproblem = True
    newadj = Range(ActiveSheet.Names("solver_adj").Name).Address(ReferenceStyle:=GlobalR1C1)
    If noproblem Then
       .refVariables.Text = GetName(newadj)
    Else
       .refVariables.Text = ""
    End If
    On Error GoTo 0
    On Error Resume Next
    .editValueOf.Text = Mid(CStr(ActiveSheet.Names("solver_val").RefersToLocal), 2)
    If .editValueOf.Text = "" Then .editValueOf.Text = "0"
    Select Case CStr(ActiveSheet.Names("solver_typ"))
       Case "=1"
         .editValueOf.Enabled = False
         .radioMax = True
         GlobalTyp = 1
       Case "=2"
         .editValueOf.Enabled = False
         .radioMin = True
         GlobalTyp = 2
       Case "=3"
         .editValueOf.Enabled = True
         .radioValueOf = True
         GlobalTyp = 3
    End Select
    Err = 0
    On Error Resume Next
    dummy = Mid(CStr(ActiveSheet.Names("solver_eng")), 2)
    If Err = 0 Then
       .comboEngines.ListIndex = dummy - 1
    Else
        dummy = Mid(CStr(ActiveSheet.Names("solver_lin")), 2)
        If dummy = 1 Then
            .comboEngines.ListIndex = 1
        Else
            .comboEngines.ListIndex = 0
        End If
    End If
    .listConstraints.Clear
    For i = 1 To CDbl(Mid(CStr(ActiveSheet.Names("solver_num")), 2))
       the_left = Mid(CStr(ActiveSheet.Names("solver_lhs" & Trim(Str(i)))), 2)
       the_left = GetName(Range(Stylecheck(the_left)).Address)
       If Len(the_left) > 120 Then
          the_left = Range(Stylecheck(the_left)).Address
       End If
       mid_ind = CDbl(Mid(CStr(ActiveSheet.Names("solver_rel" & Trim(Str(i)))), 2))
       If mid_ind < 4 Then
         the_right = Mid(CStr(ActiveSheet.Names("solver_rhs" & Trim(Str(i))).RefersToLocal), 2)
         If Not IsNumeric(the_right) Then
            the_right = EvaluateRHS(the_right)
            Err = 0
            the_right = GetName(the_right)
            If Err > 0 Then
               ' formula
               j = InStr(the_right, ActiveSheet.Name)
               If j <> 0 Then
                  If InStr(the_right, "'" & ActiveSheet.Name & "'!") <> 0 Then
                     j = InStr(the_right, "'" & ActiveSheet.Name & "'!")
                     Do While j <> 0
                        the_right = Left(the_right, j - 1) & Right(the_right, Len(the_right) - j - Len(ActiveSheet.Name) - 2)
                        j = InStr(the_right, "'" & ActiveSheet.Name & "'!")
                     Loop
                  Else
                     Do While j <> 0
                        the_right = Left(the_right, j - 1) & Right(the_right, Len(the_right) - j - Len(ActiveSheet.Name))
                        j = InStr(the_right, ActiveSheet.Name)
                     Loop
                  End If
               End If
               If "." <> Application.International(xlDecimalSeparator) Then
                  j = InStr(the_right, ".")
                  Do While j <> 0
                      Mid(the_right, j, 1) = Application.International(xlDecimalSeparator)
                      j = InStr(the_right, ".")
                  Loop
               End If
            Else
               If Len(the_right) > 120 Then
                  the_right = Mid(CStr(ActiveSheet.Names("solver_rhs" & Trim(Str(i)))), 2)
                  If InStr(the_right, ActiveSheet.Name & "!") <> 0 Then
                     If InStr(the_right, "'" & ActiveSheet.Name & "'!") <> 0 Then
                        j = InStr(the_right, "'" & ActiveSheet.Name & "'!")
                        the_right = Right(the_right, Len(the_right) - j - Len(ActiveSheet.Name) - 2)
                     Else
                        j = InStr(the_right, ActiveSheet.Name & "!")
                        the_right = Right(the_right, Len(the_right) - j - Len(ActiveSheet.Name))
                     End If
                  End If
               End If
            End If
         Else
            the_right = CStr(CDbl(the_right))
         End If
         the_middle = dlgConstraint.comboRelation.List(mid_ind - 1)
       ElseIf mid_ind = 4 Then
         the_right = GlobalX4Mess.Range("solver_msg_int").Formula
         the_middle = "="
       ElseIf mid_ind = 5 Then
         the_right = GlobalX4Mess.Range("solver_msg_bin").Formula
         the_middle = "="
       ElseIf mid_ind = 6 Then
         the_right = GlobalX4Mess.Range("solver_msg_dif").Formula
         the_middle = "="
       Else
         ' not supported; continue
         GoTo NextStatement
       End If
       newentry = the_left & " " & the_middle & " " & Trim(the_right)
       If .listConstraints.ListCount > 0 Then
          .listConstraints.AddItem newentry, Search(newentry, 0, .listConstraints.ListCount - 1)
       Else
          .listConstraints.AddItem newentry
       End If
NextStatement:
    Next
    If .listConstraints.ListCount > 0 Then
       .listConstraints.ListIndex = 0
    End If
    End With
    On Error GoTo 0
    
    GetOptionSettings
    
    Exit Sub
errortrap:
    noproblem = False
    Resume Next
End Sub

Public Sub GetOptionSettings()
    ' not all options exist, therefor first defaults
    SetOptionDefaults
    On Error Resume Next
    Dim dummy As String
    With dlgOptions
         .editTime.Text = Mid(CStr(ActiveSheet.Names("solver_tim").RefersToLocal), 2)
         .editIterations.Text = Mid(CStr(ActiveSheet.Names("solver_itr").RefersToLocal), 2)
         .editPrecision.Text = Mid(CStr(ActiveSheet.Names("solver_pre").RefersToLocal), 2)
         .editConvergence.Text = Mid(CStr(ActiveSheet.Names("solver_cvg").RefersToLocal), 2)
         dummy = CStr(ActiveSheet.Names("solver_sho"))
         If dummy = "=1" Then
            .chkIterations = True
         Else
            .chkIterations = False
         End If
         dummy = CStr(ActiveSheet.Names("solver_scl"))
         If dummy = "=1" Then
            .chkScaling = True
         Else
            .chkScaling = False
         End If
         Err = 0
         'dummy = CStr(ActiveSheet.Names("solver_neg"))
         'If dummy = "=1" Then
         '   dlgSolverParameters.chkAssumeNonNeg = True
         'Else
         '   dlgSolverParameters.chkAssumeNonNeg = False
         'End If
         'If Err > 0 Then
         '   dlgSolverParameters.chkAssumeNonNeg = True
         '   Err = 0
         'End If
         dummy = CStr(ActiveSheet.Names("solver_drv"))
         If dummy = "=1" Then
            .radioForward = True
         Else
            .radioCentral = True
         End If
         .editPopSizeGRG.Text = Mid(CStr(ActiveSheet.Names("solver_ssz").RefersToLocal), 2)
         .editMutate.Text = Mid(CStr(ActiveSheet.Names("solver_mrt").RefersToLocal), 2)
         .editSeedGRG.Text = Mid(CStr(ActiveSheet.Names("solver_rsd").RefersToLocal), 2)
         dummy = CStr(ActiveSheet.Names("solver_msl"))
         If dummy = "=1" Then
            .chkMultiStart = True
         Else
            .chkMultiStart = False
         End If
         If Err > 0 Then
            ' existing models will typically not be prepared for multistart(i.e. bounds are missing)
            ' so, for existing models, we will set the multistart option off, if not defined
            .chkMultiStart = False
         End If
         dummy = CStr(ActiveSheet.Names("solver_rbv"))
         If dummy = "=1" Then
            .chkBounds = True
         Else
            .chkBounds = False
         End If
         .editMaxSubproblems.Text = Mid(CStr(ActiveSheet.Names("solver_nod").RefersToLocal), 2)
         .editMaxSolutions.Text = Mid(CStr(ActiveSheet.Names("solver_mip").RefersToLocal), 2)
         .editMipGap.Text = 100 * Mid(CStr(ActiveSheet.Names("solver_tol").RefersToLocal), 2)
          dummy = CStr(ActiveSheet.Names("solver_rlx"))
          If dummy = "=1" Then
            .chkRelax = True
         Else
            .chkRelax = False
         End If
         .editConvEvol.Text = .editConvergence.Text
         .editPopEvol.Text = .editPopSizeGRG.Text
         .editSeedEvol.Text = .editSeedGRG.Text
         .editTimeLimit.Text = Mid(CStr(ActiveSheet.Names("solver_mni").RefersToLocal), 2)
         .chkBoundsEvol = .chkBounds
         If Val(.editTime.Text) = PLUS_INF Then .editTime.Text = ""
         If Val(.editIterations.Text) = PLUS_INF Then .editIterations.Text = ""
         If Val(.editMaxSubproblems.Text) = PLUS_INF Then .editMaxSubproblems.Text = ""
         If Val(.editMaxSolutions.Text) = PLUS_INF Then .editMaxSolutions.Text = ""
     End With
     On Error GoTo 0
End Sub
 
Function LocStr(strName As String) As String
    LocStr = GlobalX4Mess.Range(strName).Text
End Function
 
Sub SetGlobals()
   'Set GlobalX4Mess = ThisWorkbook.Worksheets("Language")
   Set GlobalX4Mess = ThisWorkbook.Worksheets(fnGetLCID())
   Set GlobalX4Sheet = ThisWorkbook.Worksheets("Report")
   Dim i As Integer
   If Left(Application.OperatingSystem, 1) = "W" Then
      GlobalHelpfile = "xladdin.chm"
   Else
      GlobalHelpfile = Application.Path & ":MS EXCEL HELP"
   End If
   If Workbooks.Count = 0 Then
       DisplayMessage "solver_msg_150", 1830, 0
       End
   End If
   
   ' Set localized status bar messages to workbook-level defined names.
   Call SetCellValue(ThisWorkbook.Worksheets("Language").Range("msg_setup"), GlobalX4Mess.Range("msg_setup").Text)
   Call SetCellValue(ThisWorkbook.Worksheets("Language").Range("msg_trial"), GlobalX4Mess.Range("msg_trial").Text)
   Call SetCellValue(ThisWorkbook.Worksheets("Language").Range("msg_branch"), GlobalX4Mess.Range("msg_branch").Text)
   Call SetCellValue(ThisWorkbook.Worksheets("Language").Range("msg_incumb"), GlobalX4Mess.Range("msg_incumb").Text)
   Call SetCellValue(ThisWorkbook.Worksheets("Language").Range("msg_setcell"), GlobalX4Mess.Range("msg_setcell").Text)
   
   GlobalSheetName = ActiveSheet.Name
   GlobalR1C1 = Application.ReferenceStyle
End Sub

Public Function Search(entry As String, start As Integer, theend As Integer)
   With ThisWorkbook.DialogSheets("Solver_dialog").ListBoxes("Constraint_list")
   If theend <= start Then
       If entry < .List(start + 1) Then
          Search = start
       Else
          Search = start + 1
       End If
       Exit Function
   End If
   If entry > .List(Int((theend + start) / 2) + 1) Then
      Search = Search(entry, Int((theend + start) / 2) + 1, theend)
   Else
      Search = Search(entry, start, Int((theend + start) / 2) - 1)
   End If
   End With
End Function

Function Stylecheck(thestring) As String
   On Error GoTo iferror
   Dim i As Integer
   If Application.International(xlListSeparator) <> "," Then
       i = InStr(thestring, Application.International(xlListSeparator))
       Do While i <> 0
          thestring = Left(thestring, i - 1) & "," & Mid(thestring, i + 1)
          i = InStr(thestring, Application.International(xlListSeparator))
       Loop
   End If
   If GlobalR1C1 = xlA1 Then
      Stylecheck = thestring
   Else
      Stylecheck = Application.ConvertFormula(thestring, xlR1C1, xlA1)
   End If
   On Error GoTo 0
   Exit Function
iferror:
   Stylecheck = thestring
   On Error GoTo 0
End Function

Public Sub Auto_open()
    Dim fEnableEvents
    fEnableEvents = Application.EnableEvents
    Application.EnableEvents = False
    On Error Resume Next 'Clear everything we can; don't let failure stop us
        
    'Clear garbage off of any dialog sheets
    Dim ds As DialogSheet
    For Each ds In ThisWorkbook.DialogSheets
        ClearDialogSheet (ds)
    Next ds
    
    Application.EnableEvents = fEnableEvents
End Sub

Private Sub ClearDialogSheet(ds As DialogSheet)
    On Error Resume Next
    Dim eb As EditBox
    For Each eb In ds.EditBoxes
        eb.Text = ""
    Next eb
    
    Dim lb As ListBox
    For Each lb In ds.ListBoxes
        lb.RemoveAllItems
    Next lb
    
    Dim tb As TextBox
    For Each tb In ds.TextBoxes
        tb.Text = ""
    Next tb
End Sub

Public Sub Auto_close()
    Dim daSav As Boolean
    Dim suSav As Boolean
    
    daSav = Application.DisplayAlerts
    suSav = Application.ScreenUpdating
    
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    ThisWorkbook.Saved = True
    
    Application.DisplayAlerts = daSav
    Application.ScreenUpdating = suSav
End Sub

Sub MsgBoxCallback(lpHelpInfo As HELPINFO)
    Application.Help GlobalHelpfile, lpHelpInfo.dwContextId
End Sub

#If VBA7 Then
Function CreateMsgBoxParams(Prompt As String, _
                            Title As String, _
                            Buttons As VbMsgBoxStyle, _
                            ByVal dwContextHelpId As Long, _
                            ByVal lpfnMsgBoxCallBack As LongPtr _
                            ) As MSGBOXPARAMS
#Else
Function CreateMsgBoxParams(Prompt As String, _
                            Title As String, _
                            Buttons As VbMsgBoxStyle, _
                            ByVal dwContextHelpId As Long, _
                            ByVal lpfnMsgBoxCallBack As Long _
                            ) As MSGBOXPARAMS
#End If

    Dim mbParams As MSGBOXPARAMS
    
    If (Not ReadyForMacros()) Then
        With mbParams
            .cbSize = Len(mbParams)
            .hwndOwner = 0
            .hInstance = 0
            .lpszText = 0
            .lpszCaption = 0
            .dwStyle = 0
            .lpszIcon = 0
            .dwContextHelpId = 0
            .lpfnMsgBoxCallBack = 0
            .dwLanguageId = 0
        End With
        CreateMsgBoxParams = mbParams
        Exit Function
    End If
    
    With mbParams
        .cbSize = Len(mbParams)
        .hwndOwner = 0
        .hInstance = 0
        .lpszText = StrPtr(Prompt)
        .lpszCaption = StrPtr(Title)
        .dwStyle = Buttons Or 8192 'MB_TASKMODAL
        .lpszIcon = 0
        .dwContextHelpId = dwContextHelpId
        .lpfnMsgBoxCallBack = lpfnMsgBoxCallBack
        .dwLanguageId = 0
    End With

    CreateMsgBoxParams = mbParams
End Function
                            
Function MsgBoxW(Prompt As String, _
                 Optional Buttons As VbMsgBoxStyle = vbOKOnly, _
                 Optional Title As String, _
                 Optional HelpFile = vbNullString, _
                 Optional HelpTopic _
                ) As Long
    If (Not ReadyForMacros()) Then
        MsgBoxW = 3 'IDABORT
    End If
    
    Dim HelpFileSav
    
    HelpFileSav = GlobalHelpfile
    If Title = vbNullString Then Title = Application.Name
    If HelpFile <> vbNullString Then GlobalHelpfile = HelpFile
    MsgBoxW = MessageBoxIndirectW(CreateMsgBoxParams(Prompt, Title, Buttons, HelpTopic, AddressOf MsgBoxCallback))
    GlobalHelpfile = HelpFileSav
End Function

Sub DisplayMessage(TheMessage As String, Optional TheHelpTopic, Optional TheHelpFile)
    Dim update As Boolean
    
    update = Application.ScreenUpdating
    Application.ScreenUpdating = True
    MsgBoxW GlobalX4Mess.Range(TheMessage).Text, 32 + 16384, , GlobalHelpfile, TheHelpTopic
    Application.ScreenUpdating = update
End Sub

Public Function Showme(reason As Integer) As Integer
    If (Not ReadyForMacros()) Then
        End
    End If

    Dim remem As Boolean
    remem = Application.ScreenUpdating
    Application.ScreenUpdating = True
    GlobalContinuation = 1
    Beep
    If reason > 3 And CDbl(Mid(CStr(ActiveSheet.Names("solver_eng")), 2)) = 3 Then
       reason = reason + 2
    End If
    With dlgInterrupt
        .lblMessage.Caption = GlobalX4Mess.Range("solver_reason" & Trim(Str(reason))).Text
        .Show
    End With
    Application.ScreenUpdating = remem
    Showme = GlobalContinuation
End Function

Public Sub Loadmod()
   Dim objdone As Boolean, ce As Range, i As Integer, k As Integer
   Dim firstoptions As Boolean, theoptions As String, candidate As String, dummy As Integer
   Dim newentry As String, Counter As Integer, counter2 As Integer
   Dim the_answer As Integer, theindex As Integer, remem As String
   Dim secondoptions As Boolean
   objdone = False
   firstoptions = True
   secondoptions = False
   On Error GoTo loaderror1
   With ThisWorkbook.DialogSheets("solver_dialog")
   For Each ce In Range(Stylecheck(ThisWorkbook.DialogSheets("Save_dialog").EditBoxes("the_area").Caption))
       candidate = ce.Formula
       If "." <> Application.International(xlDecimalSeparator) Then
          dummy = InStr(candidate, ".")
          Do While dummy <> 0
             candidate = Left(candidate, dummy - 1) & Application.International(xlDecimalSeparator) & Mid(candidate, dummy + 1)
             dummy = InStr(candidate, ".")
          Loop
       End If
       If objdone = False And candidate <> "" Then
          If Left(candidate, 4) = "=MAX" Then
             .EditBoxes("Optimum_cell").Caption = GetName(Mid(candidate, 6, Len(candidate) - 6))
             .OptionButtons("max_button").Value = xlOn
             .EditBoxes("dValueof").Caption = "0"
             .EditBoxes("dValueof").Enabled = False
          ElseIf Left(candidate, 4) = "=MIN" Then
             .EditBoxes("Optimum_cell").Caption = GetName(Mid(candidate, 6, Len(candidate) - 6))
             .OptionButtons("min_button").Value = xlOn
             .EditBoxes("dValueof").Caption = "0"
             .EditBoxes("dValueof").Enabled = False
          ElseIf Left(candidate, 6) = "=COUNT" Then
             .EditBoxes("Optimum_cell").Caption = ""
             .OptionButtons("max_button").Value = xlOn
             .EditBoxes("dValueof").Caption = "0"
             .EditBoxes("dValueof").Enabled = False
          ElseIf InStr(2, candidate, "=") <> 0 Then
             .EditBoxes("Optimum_cell").Caption = GetName(Mid(candidate, 2, InStr(2, candidate, "=") - 2))
             .OptionButtons("value_button").Value = xlOn
             .EditBoxes("dValueof").Caption = CDbl(Mid(candidate, InStr(2, candidate, "=") + 1))
             .EditBoxes("dValueof").Enabled = True
          Else
             ' not a valid objective
             objdone = True
          End If
       End If
       If Left(candidate, 6) = "=COUNT" Then
          On Error GoTo loaderror2
          .EditBoxes("Adjustable_Cells").Caption = GetName(Mid(candidate, 8, Len(candidate) - 8))
       ElseIf objdone = True Then
          ' must be constraint or options
          If candidate = "" Then
             GoTo skipRangeCe
          End If
          If InStr(2, candidate, "=") = 0 Then
             ' options
             If secondoptions = False Then
                On Error GoTo loaderror4
                If Left(candidate, 4) = "=VAR" Then
                   theoptions = Trim(Mid(candidate, 6, Len(candidate) - 6))
                Else
                   theoptions = Trim(Mid(candidate, 3, Len(candidate) - 3))
                End If
                ReDim ol(11) As String
                For k = 1 To 11
                    On Error Resume Next
                    ol(k) = Left(theoptions, InStr(theoptions, Application.International(xlListSeparator)) - 1)
                    theoptions = Mid(theoptions, Len(ol(k)) + 2)
                    On Error GoTo 0
                Next
                If ol(11) = "" Then
                   If ol(10) = "" Then
                      Exit For
                   Else
                      SolvOptions ol(1), ol(2), ol(3), False, ol(6), ol(8), ol(9), ol(10), CDbl(ol(4)) * 100, ol(7), , theoptions
                   End If
                Else
                   SolvOptions ol(1), ol(2), ol(3), False, ol(6), ol(8), ol(9), ol(10), CDbl(ol(4)) * 100, ol(7), ol(11), theoptions
                End If
                On Error Resume Next
                If Mid(CStr(ActiveSheet.Names("solver_neg")), 2) = "1" Then
                   ThisWorkbook.DialogSheets("Solver_dialog").CheckBoxes("NonNeg").Value = xlOn
                Else
                   ThisWorkbook.DialogSheets("Solver_dialog").CheckBoxes("NonNeg").Value = xlOff
                End If
                On Error GoTo 0
                If ol(5) = "TRUE" Then .DropDowns("EngineList").ListIndex = 2
                GetOptionSettings
                secondoptions = True
             Else
                theoptions = Trim(Mid(candidate, 3, Len(candidate) - 3))
                ReDim ol(11) As String
                For k = 1 To 11
                    On Error Resume Next
                    ol(k) = Left(theoptions, InStr(theoptions, Application.International(xlListSeparator)) - 1)
                    theoptions = Mid(theoptions, Len(ol(k)) + 2)
                    On Error GoTo 0
                Next
                SolvOptions ol(1), ol(2), , , , , , , , , , , ol(4), ol(5), ol(6), ol(7), ol(8), ol(9), ol(10), ol(11), theoptions
                .DropDowns("EngineList").ListIndex = ol(3)
                GetOptionSettings
                Exit For
             End If
          Else
             ' constraint
             On Error GoTo loaderror3
             If InStr(candidate, "=0)+(") <> 0 Then
                newentry = GetName(Mid(candidate, 3, InStr(candidate, "=0)+(") - 3)) & " = " & GlobalX4Mess.Range("solver_msg_bin").Formula
                If .ListBoxes("Constraint_list").ListCount > 1 Then
                   theindex = Search(newentry, 0, .ListBoxes("Constraint_list").ListCount - 1)
                Else
                   theindex = 0
                End If
                If theindex = 0 Then
                   .ListBoxes("Constraint_list").AddItem newentry
                Else
                   .ListBoxes("Constraint_list").AddItem newentry, theindex
                End If
             ElseIf InStr(candidate, "=INT(") <> 0 Then
                newentry = GetName(Mid(candidate, 3, InStr(candidate, "=INT(") - 3)) & " = " & GlobalX4Mess.Range("solver_msg_int").Formula
                If .ListBoxes("Constraint_list").ListCount > 1 Then
                   theindex = Search(newentry, 0, .ListBoxes("Constraint_list").ListCount - 1)
                Else
                   theindex = 0
                End If
                If theindex = 0 Then
                   .ListBoxes("Constraint_list").AddItem newentry
                Else
                   .ListBoxes("Constraint_list").AddItem newentry, theindex
                End If
             ElseIf InStr(candidate, "=COUNT(") <> 0 Then
                newentry = GetName(Mid(candidate, 3, InStr(candidate, "=COUNT(") - 3)) & " = "
                newentry = newentry & GlobalX4Mess.Range("solver_msg_dif").Formula
                If .ListBoxes("Constraint_list").ListCount > 1 Then
                   theindex = Search(newentry, 0, .ListBoxes("Constraint_list").ListCount - 1)
                Else
                   theindex = 0
                End If
                If theindex = 0 Then
                   .ListBoxes("Constraint_list").AddItem newentry
                Else
                   .ListBoxes("Constraint_list").AddItem newentry, theindex
                End If
             ElseIf InStr(candidate, "<=") <> 0 Then
                On Error Resume Next
                If Range(Stylecheck(Mid(candidate, InStr(candidate, "<=") + 2))).Areas.Count > 1 Then
                   If Not IsNumeric(Mid(candidate, InStr(candidate, "<=") + 2)) Then
                      newentry = GetName(Mid(candidate, 2, InStr(candidate, "<=") - 2)) & " <= " & EvaluateRHS(Mid(candidate, InStr(candidate, "<=") + 2))
                   Else
                      newentry = GetName(Mid(candidate, 2, InStr(candidate, "<=") - 2)) & " <= " & GetName(Mid(candidate, InStr(candidate, "<=") + 2))
                   End If
                Else
                   newentry = GetName(Mid(candidate, 2, InStr(candidate, "<=") - 2)) & " <= " & GetName(EvaluateRHS(Mid(candidate, InStr(candidate, "<=") + 2)))
                End If
                On Error GoTo 0
                If .ListBoxes("Constraint_list").ListCount > 1 Then
                   theindex = Search(newentry, 0, .ListBoxes("Constraint_list").ListCount - 1)
                Else
                   theindex = 0
                End If
                If theindex = 0 Then
                   .ListBoxes("Constraint_list").AddItem newentry
                Else
                   .ListBoxes("Constraint_list").AddItem newentry, theindex
                End If
             ElseIf InStr(candidate, ">=") <> 0 Then
                On Error Resume Next
                If Range(Stylecheck(Mid(candidate, InStr(candidate, ">=") + 2))).Areas.Count > 1 Then
                   If Not IsNumeric(Mid(candidate, InStr(candidate, ">=") + 2)) Then
                      newentry = GetName(Mid(candidate, 2, InStr(candidate, ">=") - 2)) & " >= " & EvaluateRHS(Mid(candidate, InStr(candidate, ">=") + 2))
                   Else
                      newentry = GetName(Mid(candidate, 2, InStr(candidate, ">=") - 2)) & " >= " & GetName(Mid(candidate, InStr(candidate, ">=") + 2))
                   End If
                Else
                   newentry = GetName(Mid(candidate, 2, InStr(candidate, ">=") - 2)) & " >= " & GetName(EvaluateRHS(Mid(candidate, InStr(candidate, ">=") + 2)))
                End If
                On Error GoTo 0
                If .ListBoxes("Constraint_list").ListCount > 1 Then
                   theindex = Search(newentry, 0, .ListBoxes("Constraint_list").ListCount - 1)
                Else
                   theindex = 0
                End If
                If theindex = 0 Then
                   .ListBoxes("Constraint_list").AddItem newentry
                Else
                   .ListBoxes("Constraint_list").AddItem newentry, theindex
                End If
             ElseIf InStr(2, candidate, "=") <> 0 Then
                On Error Resume Next
                If Range(Stylecheck(Mid(candidate, InStr(2, candidate, "=") + 1))).Areas.Count > 1 Then
                   If Not IsNumeric(Mid(candidate, InStr(2, candidate, "=") + 1)) Then
                      newentry = GetName(Mid(candidate, 2, InStr(2, candidate, "=") - 2)) & " = " & EvaluateRHS(Mid(candidate, InStr(2, candidate, "=") + 1))
                   Else
                      newentry = GetName(Mid(candidate, 2, InStr(2, candidate, "=") - 2)) & " = " & GetName(Mid(candidate, InStr(2, candidate, "=") + 1))
                   End If
                Else
                   newentry = GetName(Mid(candidate, 2, InStr(2, candidate, "=") - 2)) & " = " & GetName(EvaluateRHS(Mid(candidate, InStr(2, candidate, "=") + 1)))
                End If
                On Error GoTo 0
                If .ListBoxes("Constraint_list").ListCount > 1 Then
                   theindex = Search(newentry, 0, .ListBoxes("Constraint_list").ListCount - 1)
                Else
                   theindex = 0
                End If
                If theindex = 0 Then
                   .ListBoxes("Constraint_list").AddItem newentry
                Else
                   .ListBoxes("Constraint_list").AddItem newentry, theindex
                End If
             End If
          End If
       End If
       If candidate <> "" Then
          objdone = True
       End If
skipRangeCe:
   Next
   End With
   On Error GoTo 0
   DefineModel
   Exit Sub
loaderror1:
   DisplayMessage "solver_msg_6b", 1830, 0
   On Error GoTo 0
   Exit Sub
loaderror2:
   DisplayMessage "solver_msg_6c", 1830, 0
   On Error GoTo 0
   Exit Sub
loaderror3:
   DisplayMessage "solver_msg_6", 1830, 0
   On Error GoTo 0
   Exit Sub
loaderror4:
   DisplayMessage "solver_msg_6", 1830, 0
   On Error GoTo 0
End Sub

Public Function SaveMod()
   If (Not ReadyForMacros()) Then
      SaveMod = False
      Exit Function
   End If

   Dim i As Integer, c, thestring As String, theleft As String, theright As String
   Dim thekomma As String, dummy As Integer, Counter As Integer, nNewplace As Integer
   Dim vbacode As String, macrocode As String, nCells As Integer, j As Integer
   On Error GoTo saveerror
   Dim nConCount As Integer, strObj As String
   nConCount = ThisWorkbook.DialogSheets("solver_dialog").ListBoxes("Constraint_list").ListCount
   Dim strArea As String
   strArea = ThisWorkbook.DialogSheets("Save_dialog").EditBoxes("the_area").Caption
   With ThisWorkbook.DialogSheets("Save_dialog").EditBoxes("the_area")
   If Range(Stylecheck(strArea)).Cells.Count = 1 Then
      strArea = strArea & ":" & GetName(Range(Stylecheck(strArea)).Offset(4 + nConCount, 0).Address)
   End If
   If Range(Stylecheck(strArea)).Count < 4 + nConCount Then
      MsgBoxW GlobalX4Mess.Range("solver_msg_131").Text & " " & 3 + nConCount + 1 _
          & " " & GlobalX4Mess.Range("solver_msg_132").Text, 32, , Application.Path & GlobalHelpfile, 1830
          SaveMod = False
      Exit Function
   End If
   ThisWorkbook.DialogSheets("Save_dialog").EditBoxes("the_area").Caption = strArea
   vbacode = GlobalX4Mess.Range("savefunc").Text & " " & GlobalX4Mess.Range("savearg1").Text & ":=" & Chr(34) & .Text & Chr(34)
   Application.RecordMacro basiccode:=vbacode

   i = -1
   End With
   With ThisWorkbook.DialogSheets("solver_dialog")
   strObj = .EditBoxes("Optimum_cell").Caption
   For Each c In Range(Stylecheck(strArea))
    If i = -1 Then
       If strObj <> "" Then
          If .OptionButtons("max_button").Value = xlOn Then
             c.FormulaLocal = "=MAX(" & Range(Stylecheck(strObj)).Address & ")"
          ElseIf .OptionButtons("min_button").Value = xlOn Then
             c.FormulaLocal = "=MIN(" & Range(Stylecheck(strObj)).Address & ")"
          Else
             c.FormulaLocal = "=" & Range(Stylecheck(strObj)).Address & "=" & .EditBoxes("dValueof").Caption
          End If
       End If
    ElseIf i <= 0 Then
       On Error Resume Next
       c.Formula = "=COUNT(" & Range(Stylecheck(.EditBoxes("Adjustable_Cells").Caption)).Address & ")"
       On Error GoTo 0
    ElseIf i = 1 + nConCount Then
       thekomma = Application.International(xlListSeparator)
         ' save options
          If Trim(dlgOptions.editTime.Text) = "" Or dlgOptions.editTime.Text = "0" Then
             thestring = "32767"
          ElseIf CDbl(dlgOptions.editTime.Text) > 32767 Then
             thestring = "32767"
          Else
             thestring = dlgOptions.editTime.Text
          End If
          If Trim(dlgOptions.editIterations.Text) = "" Or dlgOptions.editIterations.Text = "0" Then
             thestring = thestring & Application.International(xlListSeparator) & "32767"
          ElseIf CDbl(dlgOptions.editIterations.Text) > 32767 Then
             thestring = thestring & Application.International(xlListSeparator) & "32767"
          Else
             thestring = thestring & Application.International(xlListSeparator) & dlgOptions.editIterations.Text
          End If
          thestring = thestring & Application.International(xlListSeparator) & dlgOptions.editPrecision.Text
          thestring = thestring & Application.International(xlListSeparator) & CStr(dlgOptions.editMipGap.Text / 100)
          If .DropDowns("EngineList").ListIndex = 2 Then
             ' simplex
             thestring = thestring & Application.International(xlListSeparator) & "TRUE"
          Else
             thestring = thestring & Application.International(xlListSeparator) & "FALSE"
          End If
          If dlgOptions.chkIterations Then
             thestring = thestring & Application.International(xlListSeparator) & "TRUE"
          Else
             thestring = thestring & Application.International(xlListSeparator) & "FALSE"
          End If
          If dlgOptions.chkScaling Then
             thestring = thestring & Application.International(xlListSeparator) & "TRUE"
          Else
             thestring = thestring & Application.International(xlListSeparator) & "FALSE"
          End If
          thestring = thestring & Application.International(xlListSeparator) & "1" ' tangent...
          If dlgOptions.radioForward Then
             thestring = thestring & Application.International(xlListSeparator) & "1"
          Else
             thestring = thestring & Application.International(xlListSeparator) & "2"
          End If
          thestring = thestring & Application.International(xlListSeparator) & "1" ' newton...
          thestring = thestring & Application.International(xlListSeparator) & dlgOptions.editConvergence.Text
          If .CheckBoxes("nonneg").Value = xlOn Then
             thestring = thestring & Application.International(xlListSeparator) & "TRUE"
          Else
             thestring = thestring & Application.International(xlListSeparator) & "FALSE"
          End If
          If "." <> Application.International(xlDecimalSeparator) Then
             dummy = InStr(thestring, Application.International(xlDecimalSeparator))
             Do While dummy <> 0
                Mid(thestring, dummy, 1) = "."
                dummy = InStr(thestring, Application.International(xlDecimalSeparator))
             Loop
          End If
          c.Formula = "={" & thestring & "}"
    ElseIf i = 2 + nConCount Then
          ' save new options
          If Trim(dlgOptions.editTime.Text) = "" Then
             thestring = "0"
          Else
             thestring = dlgOptions.editTime.Text
          End If
          If Trim(dlgOptions.editIterations.Text) = "" Then
             thestring = thestring & Application.International(xlListSeparator) & "0"
          Else
             thestring = thestring & Application.International(xlListSeparator) & dlgOptions.editIterations.Text
          End If
          thestring = thestring & Application.International(xlListSeparator) & .DropDowns("EngineList").ListIndex
          thestring = thestring & Application.International(xlListSeparator) & dlgOptions.editPopSizeGRG
          If dlgOptions.editSeedGRG.Text = "" Then
             thestring = thestring & Application.International(xlListSeparator) & "0"
          Else
             thestring = thestring & Application.International(xlListSeparator) & dlgOptions.editSeedGRG.Text
          End If
          If dlgOptions.chkMultiStart Then
             thestring = thestring & Application.International(xlListSeparator) & "TRUE"
          Else
             thestring = thestring & Application.International(xlListSeparator) & "FALSE"
          End If
          If dlgOptions.chkBounds Then
             thestring = thestring & Application.International(xlListSeparator) & "TRUE"
          Else
             thestring = thestring & Application.International(xlListSeparator) & "FALSE"
          End If
          thestring = thestring & Application.International(xlListSeparator) & dlgOptions.editMutate.Text
          If Trim(dlgOptions.editMaxSubproblems.Text) = "" Then
             thestring = thestring & Application.International(xlListSeparator) & "0"
          Else
             thestring = thestring & Application.International(xlListSeparator) & dlgOptions.editMaxSubproblems.Text
          End If
          If Trim(dlgOptions.editMaxSolutions.Text) = "" Then
             thestring = thestring & Application.International(xlListSeparator) & "0"
          Else
             thestring = thestring & Application.International(xlListSeparator) & dlgOptions.editMaxSolutions.Text
          End If
          If dlgOptions.chkRelax Then
             thestring = thestring & Application.International(xlListSeparator) & "TRUE"
          Else
             thestring = thestring & Application.International(xlListSeparator) & "FALSE"
          End If
          thestring = thestring & Application.International(xlListSeparator) & dlgOptions.editTimeLimit.Text
          If "." <> Application.International(xlDecimalSeparator) Then
             dummy = InStr(thestring, Application.International(xlDecimalSeparator))
             Do While dummy <> 0
                Mid(thestring, dummy, 1) = "."
                dummy = InStr(thestring, Application.International(xlDecimalSeparator))
             Loop
          End If
          c.Formula = "={" & thestring & "}"
          Exit For
    Else
        thestring = .ListBoxes("Constraint_list").List(i)
        theright = GlobalX4Mess.Range("solver_msg_int").Formula
        If Right(thestring, Len(theright)) = theright Then
            theleft = Left(thestring, InStr(thestring, " = " & theright) - 1)
            If Range(Stylecheck(theleft)).Count > 1 Then
               c.FormulaArray = Application.ConvertFormula("=" & Range(Stylecheck(theleft)).Address & "=INT(" & Range(theleft).Address & ")", xlA1, xlR1C1)
            Else
               c.Formula = "=" & Range(Stylecheck(theleft)).Address & "=INT(" & Range(Stylecheck(theleft)).Address & ")"
            End If
        Else
            theright = GlobalX4Mess.Range("solver_msg_bin").Formula
            If Right(thestring, Len(theright)) = theright Then
                theleft = Left(thestring, InStr(thestring, " = " & theright) - 1)
                If Range(Stylecheck(theleft)).Count > 1 Then
                   c.FormulaArray = Application.ConvertFormula("=(" & Range(Stylecheck(theleft)).Address & "=0)+(" & Range(Stylecheck(theleft)).Address & "=1)=1", xlA1, xlR1C1)
                Else
                   c.Formula = "=(" & Range(Stylecheck(theleft)).Address & "=0)+(" & Range(Stylecheck(theleft)).Address & "=1)=1"
                End If
            Else
                theright = GlobalX4Mess.Range("solver_msg_dif").Formula
                If Right(thestring, Len(theright)) = theright Then
                   theleft = Left(thestring, InStr(thestring, " = " & theright) - 1)
                   If Range(Stylecheck(theleft)).Count > 1 Then
                      c.FormulaArray = Application.ConvertFormula("=" & Range(Stylecheck(theleft)).Address & "=COUNT(" & Range(Stylecheck(theleft)).Address & ")", xlA1, xlR1C1)
                   Else
                      c.Formula = "=" & Range(Stylecheck(theleft)).Address & "=COUNT(" & Range(Stylecheck(theleft)).Address & ")"
                   End If
                Else
                   theleft = Left(thestring, InStr(thestring, " ") - 1)
                   Counter = InStr(thestring, " ")
                   Do While Counter <> 0
                      thestring = Left(thestring, Counter - 1) & Trim(Mid(thestring, Counter))
                      Counter = InStr(thestring, " ")
                   Loop
                   If "." <> Application.International(xlDecimalSeparator) Then
                     dummy = InStr(thestring, Application.International(xlDecimalSeparator))
                     Do While dummy <> 0
                       thestring = Left(thestring, dummy - 1) & "." & Mid(thestring, dummy + 1)
                       dummy = InStr(thestring, Application.International(xlDecimalSeparator))
                     Loop
                   End If
                
                   If Range(Stylecheck(theleft)).Count > 1 Then
                      c.FormulaArray = Application.ConvertFormula("=" & thestring, xlA1, xlR1C1)
                   Else
                      c.Formula = "=" & thestring
                   End If
                End If
            End If
        End If
    End If
    i = i + 1
    If i > 2 + nConCount Then
       Exit For
    End If
   Next
   ' move alldiff constraints behind the first options, so we stay backward compatible
   nCells = Range(Stylecheck(strArea)).Cells.Count
   nNewplace = nCells - 1
   For i = 1 To nCells - 2
      If i = nNewplace Then Exit For
      thestring = Range(Stylecheck(strArea)).Cells(i).Formula
      If InStr(thestring, "=COUNT(") > 2 Then
         For j = i To nCells - 2
            If Range(Stylecheck(strArea)).Cells(j + 1).HasArray Then
               Range(Stylecheck(strArea)).Cells(j).FormulaArray = Range(Stylecheck(strArea)).Cells(j + 1).FormulaArray
            Else
               Range(Stylecheck(strArea)).Cells(j).Formula = Range(Stylecheck(strArea)).Cells(j + 1).Formula
            End If
         Next
         Range(Stylecheck(strArea)).Cells(nNewplace).FormulaArray = thestring
         i = i - 1
         nNewplace = nNewplace - 1
      End If
   Next
   End With
   On Error GoTo 0
   SaveMod = True
   Exit Function
saveerror:
   DisplayMessage "solver_msg_se", 1834, 0
   SaveMod = False
   On Error GoTo 0
End Function

Public Sub Reset_all(do_msg)
    'reset everything to default values
    Dim i As Integer
    If do_msg Then
       If MsgBoxW(GlobalX4Mess.Range("solver_msg_17").Text, 33, , Application.Path & GlobalHelpfile, 1830) <> 1 Then
          Exit Sub
       End If
       Application.RecordMacro basiccode:=GlobalX4Mess.Range("resetfunc").Text
    End If
    ResetDialog
    'Set_defaults
    'DefineModel
    'If do_msg Then
    '   dlgSolverParameters.refObj.SetFocus
    'End If
End Sub

Public Function Standard_ok()
    ' user clicks "ok" in option dialog
    Dim thetime As Double, theiter As Double, thesample As Double
    Dim vbacode As String, macrocode As String, theseed As Double
    Dim newpart As String, dummy, m1 As Double, m2 As Double
    Dim dmy1 As String, dmy2 As String, dmy3 As String
    On Error Resume Next
    With dlgOptions
    thetime = CDbl(.editTime.Text)
    theiter = CDbl(.editIterations.Text)
    If thetime <> Int(thetime) Or thetime < 0 Then
       DisplayMessage "solver_msg_8", 70, 1
       .multiOptions.Value = 0
       .editTime.SetFocus
       Standard_ok = False
       Exit Function
    End If
    If theiter <> Int(theiter) Or theiter < 0 Then
       DisplayMessage "solver_msg_9", 70, 1
       .multiOptions.Value = 0
       .editIterations.SetFocus
       Standard_ok = False
       Exit Function
    End If
    If CDbl(.editPrecision.Text) <= 0 Or CDbl(.editPrecision.Text) >= 1 Then
       DisplayMessage "solver_msg_10", 70, 1
       .multiOptions.Value = 0
       .editPrecision.SetFocus
       Standard_ok = False
       Exit Function
    End If
    If CDbl(.editConvergence.Text) <= 0 Or CDbl(.editConvergence.Text) >= 1 Then
       DisplayMessage "solver_msg_10a", 70, 1
       .multiOptions.Value = 1
       .editConvergence.SetFocus
       Standard_ok = False
       Exit Function
    End If
    theseed = CDbl(.editSeedGRG.Text)
    If .editSeedGRG.Text <> "" Then
       If theseed <> Int(theseed) Or theseed < 0 Then
          DisplayMessage "solver_msg_9s", 70, 1
          .multiOptions.Value = 1
          .editSeedGRG.SetFocus
          Standard_ok = False
          Exit Function
       End If
    End If
    thesample = CDbl(.editPopSizeGRG.Text)
    If thesample <> Int(thesample) Or thesample < 0 Then
        DisplayMessage "solver_msg_9a", 70, 1
        .multiOptions.Value = 1
       .editPopSizeGRG.SetFocus
       Standard_ok = False
       Exit Function
    End If
    If CDbl(.editTimeLimit.Text) <> Int(CDbl(.editTimeLimit.Text)) Or CDbl(.editTimeLimit.Text) <= 0 Then
        DisplayMessage "solver_msg_mtwi", 70, 1
        .multiOptions.Value = 2
       .editTimeLimit.SetFocus
       Standard_ok = False
       Exit Function
    End If
    If CDbl(.editMutate.Text) <= 0 Or CDbl(.editMutate.Text) >= 1 Then
       DisplayMessage "solver_msg_mut", 70, 1
       .multiOptions.Value = 2
       .editMutate.SetFocus
       Standard_ok = False
       Exit Function
    End If
    m1 = CDbl(.editMaxSubproblems.Text)
    m2 = CDbl(.editMaxSolutions.Text)
    If m1 <> Int(m1) Or m1 < 0 Then
       .multiOptions.Value = 0
       .editMaxSubproblems.SetFocus
       Standard_ok = False
       Exit Function
    End If
    If m2 <> Int(m2) Or m2 < 0 Then
       .multiOptions.Value = 0
       .editMaxSolutions.SetFocus
       Standard_ok = False
       Exit Function
    End If
    If .editMipGap.Text = "" Then
       .editMipGap.Text = "0"
    End If
    If CDbl(.editMipGap.Text) < 0 Or CDbl(.editMipGap.Text) >= 100 Then
       DisplayMessage "solver_msg_11", 70, 1
       .multiOptions.Value = 0
       .editMipGap.SetFocus
       Standard_ok = False
       Exit Function
    End If
    
    Standard_ok = True
    vbacode = GlobalX4Mess.Range("optionsfunc").Text & " " & GlobalX4Mess.Range("optarg1").Text & ":=" & thetime & ", "
    vbacode = vbacode & GlobalX4Mess.Range("optarg2").Text & ":=" & theiter
    newpart = .editPrecision.Text
    If "." <> Application.International(xlDecimalSeparator) Then
       dummy = InStr(newpart, Application.International(xlDecimalSeparator))
       newpart = "0." & Mid(newpart, dummy + 1)
    End If
    vbacode = vbacode & ", " & GlobalX4Mess.Range("optarg3").Text & ":=" & newpart
    newpart = .editConvergence.Text
    If "." <> Application.International(xlDecimalSeparator) Then
       dummy = InStr(newpart, Application.International(xlDecimalSeparator))
       newpart = "0." & Mid(newpart, dummy + 1)
    End If
    vbacode = vbacode & ", " & GlobalX4Mess.Range("optarg11").Text & ":=" & newpart
    If .chkIterations Then
       vbacode = vbacode & ", " & GlobalX4Mess.Range("optarg5").Text & ":=TRUE"
    Else
       vbacode = vbacode & ", " & GlobalX4Mess.Range("optarg5").Text & ":=FALSE"
    End If
    If .chkScaling Then
       vbacode = vbacode & ", " & GlobalX4Mess.Range("optarg10").Text & ":=TRUE"
    Else
       vbacode = vbacode & ", " & GlobalX4Mess.Range("optarg10").Text & ":=FALSE"
    End If
    If ThisWorkbook.DialogSheets("Solver_dialog").CheckBoxes("Nonneg").Value = xlOn Then
       vbacode = vbacode & ", " & GlobalX4Mess.Range("optarg12").Text & ":=TRUE"
    Else
       vbacode = vbacode & ", " & GlobalX4Mess.Range("optarg12").Text & ":=FALSE"
    End If
    If .radioForward Then
       vbacode = vbacode & ", " & GlobalX4Mess.Range("optarg7").Text & ":=1"
       dmy2 = "1"
    Else
       vbacode = vbacode & ", " & GlobalX4Mess.Range("optarg7").Text & ":=2"
       dmy2 = "2"
    End If
    Application.RecordMacro basiccode:=vbacode
    vbacode = GlobalX4Mess.Range("optionsfunc").Text & " " & GlobalX4Mess.Range("optarg21").Text & ":=" & thesample & ","
    vbacode = vbacode & GlobalX4Mess.Range("optarg22").Text & ":=" & .editSeedGRG.Text & ","
    newpart = .editMutate.Text
    If "." <> Application.International(xlDecimalSeparator) Then
       dummy = InStr(newpart, Application.International(xlDecimalSeparator))
       newpart = "0." & Mid(newpart, dummy + 1)
    End If
    vbacode = vbacode & GlobalX4Mess.Range("optarg23").Text & ":=" & newpart
    If .chkMultiStart Then
       vbacode = vbacode & ", " & GlobalX4Mess.Range("optarg24").Text & ":=TRUE"
    Else
       vbacode = vbacode & ", " & GlobalX4Mess.Range("optarg24").Text & ":=FALSE"
    End If
    If .chkBounds Then
       vbacode = vbacode & ", " & GlobalX4Mess.Range("optarg25").Text & ":=TRUE"
    Else
       vbacode = vbacode & ", " & GlobalX4Mess.Range("optarg25").Text & ":=FALSE"
    End If
    vbacode = vbacode & ", " & GlobalX4Mess.Range("optarg26").Text & ":="
    vbacode = vbacode & m1 & ", " & GlobalX4Mess.Range("optarg27").Text & ":=" & m2
    newpart = .editMipGap.Text
    If "." <> Application.International(xlDecimalSeparator) Then
       dummy = InStr(newpart, Application.International(xlDecimalSeparator))
       newpart = "0." & Mid(newpart, dummy + 1)
    End If
    vbacode = vbacode & ", " & GlobalX4Mess.Range("optarg28").Text & ":=" & newpart
    
    If .chkRelax Then
       vbacode = vbacode & ", " & GlobalX4Mess.Range("optarg29").Text & ":=" & "TRUE"
    Else
       vbacode = vbacode & ", " & GlobalX4Mess.Range("optarg29").Text & ":=" & "FALSE"
    End If
    vbacode = vbacode & ", " & GlobalX4Mess.Range("optarg30").Text & ":=" & .editTimeLimit.Text
    Application.RecordMacro basiccode:=vbacode
    End With
    On Error GoTo 0
    SaveOptions
End Function

Public Function Problem_ok()
    ' validation of model before trying to solve.
    Dim i As Integer, obj_is_var As Boolean, opt As String, VarLimit As Integer
    With ThisWorkbook.DialogSheets("Solver_dialog")
    If .EditBoxes("Adjustable_cells").Caption = "" Then
       DisplayMessage "solver_msg_18", 1830, 0
       Problem_ok = False
       Exit Function
    End If
    opt = .EditBoxes("Optimum_cell").Text
    If opt = "" And .ListBoxes("Constraint_list").ListCount = 0 Then
       DisplayMessage "solver_msg_18", 1830, 0
       Problem_ok = False
       Exit Function
    End If
    If opt <> "" Then
       obj_is_var = False
       If Application.Union(Range("solver_adj"), Range(Stylecheck(opt))).Count = Range("solver_adj").Cells.Count Then
          obj_is_var = True
       End If
       On Error Resume Next
       If obj_is_var = False And Not Range(Stylecheck(opt)).HasFormula Then
          On Error GoTo 0
          DisplayMessage "solver_msg_7a", 1830, 0
          Problem_ok = False
          Exit Function
       End If
    End If
    On Error GoTo 0
    VarLimit = 200
    If Range("solver_adj").Cells.Count > VarLimit Then
       DisplayMessage "solver_msg_19", 1830, 0
       Problem_ok = False
       Exit Function
    End If
    End With
    Problem_ok = True
End Function

Public Sub DefineObjVars()
    ' defines necessary names for solver

    Dim solver_neg As Integer, solver_opt As String
    Dim i As Integer, ii As Integer
    
    If dlgSolverParameters.radioMax Then
       GlobalTyp = 1
    ElseIf dlgSolverParameters.radioMin Then
       GlobalTyp = 2
    Else
       GlobalTyp = 3
    End If
    solver_opt = dlgSolverParameters.refObj.Text
    If solver_opt = "" Then
       On Error Resume Next
       ActiveSheet.Names("solver_opt").Delete
       On Error GoTo 0
    Else
       ActiveSheet.Names.Add Name:="solver_opt", RefersTo:="=" & Range(Stylecheck(solver_opt)).Address, Visible:=False
    End If
    
    If dlgSolverParameters.refVariables.Text = "" Then
       On Error Resume Next
       ActiveSheet.Names("solver_adj").Delete
       On Error GoTo 0
    Else
       ActiveSheet.Names.Add Name:="solver_adj", RefersTo:="=" & Range(Stylecheck(dlgSolverParameters.refVariables.Text)).Address, Visible:=False
    End If
    
    With ActiveSheet.Names
       .Add Name:="solver_typ", RefersToLocal:=GlobalTyp, Visible:=False
       .Add Name:="solver_val", RefersToLocal:=dlgSolverParameters.editValueOf.Text, Visible:=False
       .Add Name:="solver_eng", RefersToLocal:=dlgSolverParameters.comboEngines.ListIndex + 1, Visible:=False
       .Add Name:="solver_num", RefersToLocal:=dlgSolverParameters.listConstraints.ListCount, Visible:=False
       .Add Name:="solver_ver", RefersToLocal:=3, Visible:=False
       If dlgSolverParameters.comboEngines.ListIndex = 1 Then
          .Add Name:="solver_lin", RefersToLocal:=1, Visible:=False
       Else
          ' 0 or 2
          .Add Name:="solver_lin", RefersToLocal:=2, Visible:=False
       End If
    End With
    On Error GoTo 0
End Sub

Public Sub DefineModel()
   Dim i As Integer, constraint As String, the_left As String, the_right As String
   Dim the_mid As Integer, ind As Integer, Right_ind As String
   Dim dummy2 As Integer
   Dim vbacode As String, macrocode As String, newpart As String
   Dim bScreenUpdate As Boolean, iCalc As Integer
   Dim strObj As String, strAdj As String
   bScreenUpdate = Application.ScreenUpdating
   iCalc = Application.Calculation
   Application.Calculation = xlCalculationManual
   Application.ScreenUpdating = False
   'DefineObjVars
   Define_names
   strObj = Obj
   strAdj = Adjustables
   For i = 1 To ThisWorkbook.DialogSheets("Solver_dialog").ListBoxes("Constraint_list").ListCount
      constraint = ThisWorkbook.DialogSheets("Solver_dialog").ListBoxes("Constraint_list").List(i)
      ind = InStr(constraint, " <= ")
      If ind > 0 Then
         the_left = Left(constraint, ind - 1)
         the_mid = 1
         the_right = Mid(constraint, ind + 4)
      Else
         ind = InStr(constraint, " >= ")
         If ind > 0 Then
            the_left = Left(constraint, ind - 1)
            the_mid = 3
            the_right = Mid(constraint, ind + 4)
         Else
            ind = InStr(constraint, " = " & GlobalX4Mess.Range("solver_msg_int").Formula)
            If ind > 0 Then
               the_left = Left(constraint, ind - 1)
               the_mid = 4
               the_right = """" & EscapeQuotes(GlobalX4Mess.Range("solver_msg_int").Formula) & """"
            Else
               ind = InStr(constraint, " = " & GlobalX4Mess.Range("solver_msg_bin").Formula)
               If ind > 0 Then
                  the_left = Left(constraint, ind - 1)
                  the_mid = 5
                  the_right = """" & EscapeQuotes(GlobalX4Mess.Range("solver_msg_bin").Formula) & """"
               Else
                  ind = InStr(constraint, " = " & GlobalX4Mess.Range("solver_msg_dif").Formula)
                  If ind > 0 Then
                     the_left = Left(constraint, ind - 1)
                     the_mid = 6
                     the_right = """" & EscapeQuotes(GlobalX4Mess.Range("solver_msg_dif").Formula) & """"
                  Else
                     ind = InStr(constraint, " = ")
                     the_left = Left(constraint, ind - 1)
                     the_mid = 2
                     the_right = Mid(constraint, ind + 3)
                  End If
               End If
            End If
         End If
      End If
      ActiveSheet.Names.Add Name:="solver_lhs" & Trim(i), RefersTo:="=" & Range(Stylecheck(the_left)).Address, Visible:=False
      ActiveSheet.Names.Add Name:="solver_rel" & Trim(i), RefersTo:=the_mid, Visible:=False
      On Error Resume Next
      If Left(the_right, 1) = "=" Then
         the_right = Mid(the_right, 2)
      End If
      If Not Range(Stylecheck(the_right)).Areas.Count >= 1 Then
         ActiveSheet.Names.Add Name:="solver_rhs" & Trim(i), RefersToLocal:="=" & the_right, Visible:=False
      Else
         Right_ind = ""
         Right_ind = ActiveSheet.Names(the_right).RefersTo
         If Right_ind = "" Then
            ActiveSheet.Names.Add Name:="solver_rhs" & Trim(i), RefersTo:="=" & the_right, Visible:=False
         Else
            ActiveSheet.Names.Add Name:="solver_rhs" & Trim(i), RefersTo:=Right_ind, Visible:=False
         End If
      End If
      On Error GoTo 0
   Next
   ActiveSheet.Names.Add Name:="solver_eng", RefersTo:=ThisWorkbook.DialogSheets("Solver_dialog").DropDowns("EngineList").ListIndex, Visible:=False
   Dim dmy As Integer
   If ThisWorkbook.DialogSheets("Solver_dialog").CheckBoxes("Nonneg").Value = xlOn Then
      dmy = 1
   Else
      dmy = 2
   End If
   ActiveSheet.Names.Add Name:="solver_neg", RefersToLocal:=dmy, Visible:=False
   newpart = ThisWorkbook.DialogSheets("Solver_dialog").EditBoxes("dvalueof").Caption
   If "." <> Application.International(xlDecimalSeparator) Then
      dummy2 = InStr(newpart, Application.International(xlDecimalSeparator))
      If dummy2 <> 0 Then
         newpart = Left(newpart, dummy2 - 1) & "." & Mid(newpart, dummy2 + 1)
      End If
   End If
   With GlobalX4Mess
   Dim EngineListOM(1 To 3) As String
   EngineListOM(1) = GetGlobalX4Mess("solver_grg_eng_OM")
   EngineListOM(2) = GetGlobalX4Mess("solver_lp_eng_OM")
   EngineListOM(3) = GetGlobalX4Mess("solver_crs_eng_OM")
   
   If strObj = "" And strAdj <> "" Then
      vbacode = .Range("okfunc").Text & " " & .Range("okarg2").Text & ":=0, " & .Range("okarg3").Text & ":=" & newpart
      vbacode = vbacode & ", " & .Range("okarg4").Text & ":=" & Chr(34) & strAdj & Chr(34)
      vbacode = vbacode & ", " & .Range("okarg5").Text & ":=" & ThisWorkbook.DialogSheets("Solver_dialog").DropDowns("EngineList").ListIndex
      vbacode = vbacode & ", " & .Range("okarg6").Text & ":=" & Chr(34) & EngineListOM(ThisWorkbook.DialogSheets("Solver_dialog").DropDowns("EngineList").ListIndex) & Chr(34)
      
      Application.RecordMacro basiccode:=vbacode
   ElseIf strAdj <> "" Then
      vbacode = .Range("okfunc").Text & " " & .Range("okarg1").Text & ":=" & Chr(34) & strObj & Chr(34) & ", "
      vbacode = vbacode & .Range("okarg2").Text & ":=" & GlobalTyp & ", " & .Range("okarg3").Text & ":=" & newpart
      vbacode = vbacode & ", " & .Range("okarg4").Text & ":=" & Chr(34) & strAdj & Chr(34)
      vbacode = vbacode & ", " & .Range("okarg5").Text & ":=" & ThisWorkbook.DialogSheets("Solver_dialog").DropDowns("EngineList").ListIndex
      vbacode = vbacode & ", " & .Range("okarg6").Text & ":=" & Chr(34) & EngineListOM(ThisWorkbook.DialogSheets("Solver_dialog").DropDowns("EngineList").ListIndex) & Chr(34)
      Application.RecordMacro basiccode:=vbacode
   End If
   End With
   Application.Calculation = iCalc
   Application.ScreenUpdating = bScreenUpdate
End Sub

Public Sub SaveOptions()
    Dim dmy As Integer
    Dim lTime As Long, lIter As Long, lSubs As Long, lSols As Long
    Dim bScreenUpdate As Boolean, iCalc As Integer
       
    bScreenUpdate = Application.ScreenUpdating
    iCalc = Application.Calculation
    Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = False
    With dlgOptions
       If .editTime.Text = "" Or .editTime.Text = "0" Then
          lTime = PLUS_INF
       Else
          lTime = Val(.editTime.Text)
       End If
       If .editIterations.Text = "" Or .editIterations.Text = "0" Then
          lIter = PLUS_INF
       Else
          lIter = Val(.editIterations.Text)
       End If
       If .editMaxSubproblems.Text = "" Or .editMaxSubproblems.Text = "0" Then
          lSubs = PLUS_INF
       Else
          lSubs = .editMaxSubproblems.Text
       End If
       If .editMaxSolutions.Text = "" Or .editMaxSolutions.Text = "0" Then
          lSols = PLUS_INF
       Else
          lSols = .editMaxSolutions.Text
       End If
       If .editPopSizeGRG.Text = "" Then
          .editPopSizeGRG.Text = "0"
       End If
    End With
    
    With ActiveSheet.Names
        .Add Name:="solver_tim", RefersToLocal:=lTime, Visible:=False
        .Add Name:="solver_itr", RefersToLocal:=lIter, Visible:=False
        .Add Name:="solver_pre", RefersToLocal:=dlgOptions.editPrecision.Text, Visible:=False
        .Add Name:="solver_cvg", RefersToLocal:=dlgOptions.editConvergence.Text, Visible:=False
        If dlgOptions.chkIterations Then
           dmy = 1
        Else
           dmy = 2
        End If
        .Add Name:="solver_sho", RefersToLocal:=dmy, Visible:=False
        If dlgOptions.chkScaling Then
           dmy = 1
        Else
           dmy = 2
        End If
        .Add Name:="solver_scl", RefersToLocal:=dmy, Visible:=False
        'If dlgSolverParameters.chkAssumeNonNeg Then
        '   dmy = 1
        'Else
        '   dmy = 2
        'End If
        '.Add Name:="solver_neg", RefersToLocal:=dmy, Visible:=False
        If dlgOptions.radioCentral Then
           dmy = 2
        Else
           dmy = 1
        End If
        .Add Name:="solver_drv", RefersToLocal:=dmy, Visible:=False
        .Add Name:="solver_ssz", RefersToLocal:=dlgOptions.editPopSizeGRG.Text, Visible:=False
        .Add Name:="solver_mrt", RefersToLocal:=dlgOptions.editMutate.Text, Visible:=False
        .Add Name:="solver_mni", RefersToLocal:=dlgOptions.editTimeLimit.Text, Visible:=False
        If dlgOptions.editSeedGRG.Text <> "" Then
           .Add Name:="solver_rsd", RefersToLocal:=dlgOptions.editSeedGRG.Text, Visible:=False
        Else
            On Error Resume Next
            ActiveSheet.Names("solver_rsd").Delete
            On Error GoTo 0
        End If
        If dlgOptions.chkBounds Then
           dmy = 1
        Else
           dmy = 2
        End If
        .Add Name:="solver_rbv", RefersToLocal:=dmy, Visible:=False
        If dlgOptions.chkMultiStart Then
           dmy = 1
        Else
           dmy = 2
        End If
        .Add Name:="solver_msl", RefersToLocal:=dmy, Visible:=False
        
        .Add Name:="solver_nod", RefersToLocal:=lSubs, Visible:=False
        .Add Name:="solver_mip", RefersToLocal:=lSols, Visible:=False
        .Add Name:="solver_tol", RefersToLocal:=CDbl(dlgOptions.editMipGap.Text) / 100, Visible:=False
        If dlgOptions.chkRelax Then
           dmy = 1
        Else
           dmy = 2
        End If
        .Add Name:="solver_rlx", RefersToLocal:=dmy, Visible:=False
        .Add Name:="solver_est", RefersTo:="1", Visible:=False
        .Add Name:="solver_nwt", RefersTo:="1", Visible:=False
    End With
    Application.Calculation = iCalc
    Application.ScreenUpdating = bScreenUpdate
End Sub
      
Public Function IsCellReference(thecells) As Boolean
On Error Resume Next
If Range(Stylecheck(thecells)).Areas.Count > 1 Then
   IsCellReference = False
Else
   IsCellReference = True
End If
On Error GoTo 0
End Function
    
Public Function IsCellRef(thecells) As Boolean
   On Error Resume Next
   If Not (Range(Stylecheck(thecells)).Areas.Count >= 1) Then
      IsCellRef = False
   Else
      IsCellRef = True
   End If
   On Error GoTo 0
End Function

Function EscapeQuotes(s As String) As String
    EscapeQuotes = Replace(s, Chr(34), Chr(34) & Chr(34))
End Function

Public Function GetName(the_address) As String
Dim i As Integer, j As Integer, result As String
Dim k As Integer, l As Integer, thecount As Integer
Dim stringa As Range, stringc As Range
Dim biggest As Integer, startpoint As Integer
Dim teststring As Range, candidate As String
Dim dummy As String, dummy2 As Integer
On Error Resume Next
the_address = Stylecheck(the_address)
On Error GoTo 0
Err = 0
On Error Resume Next
GetName = Application.ExecuteExcel4Macro("GET.DEF(" & Chr(34) & EscapeQuotes(Application.ConvertFormula(Range(the_address).Address, xlA1, xlR1C1)) & Chr(34) & "," & Chr(34) & EscapeQuotes(GlobalSheetName) & Chr(34) & ")")
If GetName <> "" Then
   On Error GoTo 0
   Exit Function
End If
' try parsing
On Error GoTo bugout:
thecount = Range(the_address).Areas.Count
On Error GoTo 0
On Error Resume Next
If thecount > 1 Then
   ReDim indiv(thecount)
   biggest = 0
   startpoint = 0
   For i = 1 To thecount
      If biggest > thecount - i + 1 Then
         Exit For
      End If
      For j = thecount To i Step -1
         If biggest > j - i + 1 Then
            Exit For
         End If
         Set teststring = Range(the_address).Areas(i)
         If j > i Then
            For k = i + 1 To j
               Set teststring = Application.Union(teststring, Range(the_address).Areas(k))
            Next k
         End If
         result = ""
         result = Application.ExecuteExcel4Macro("GET.DEF(" & Chr(34) & EscapeQuotes(Application.ConvertFormula(teststring.Address, xlA1, xlR1C1)) & Chr(34) & "," & Chr(34) & EscapeQuotes(GlobalSheetName) & Chr(34) & ")")
         If result <> "" Then
            If teststring.Areas.Count = 1 Then indiv(i) = result
            If j - i + 1 > biggest Then
               biggest = j - i + 1
               startpoint = i
               candidate = result
               Exit For
            End If
         End If
      Next j
   Next i
   If biggest = 0 Then
      GetName = Range(the_address).AddressLocal(ReferenceStyle:=Application.ReferenceStyle)
   End If
   ' make separate check for biggest=1; in that case, do a linear result:
   If biggest = 1 Then
      candidate = ""
      For i = 1 To thecount
         If indiv(i) <> "" Then
            candidate = candidate & indiv(i) & Application.International(xlListSeparator)
         Else
            candidate = candidate & Range(the_address).Areas(i).AddressLocal(ReferenceStyle:=Application.ReferenceStyle) & Application.International(xlListSeparator)
         End If
      Next
      GetName = Left(candidate, Len(candidate) - 1)
      Err = 0
      On Error GoTo 0
      Exit Function
   End If
   If startpoint > 1 Then
      Set stringa = Range(the_address).Areas(1)
      If startpoint > 2 Then
         For i = 2 To startpoint - 1
            Set stringa = Application.Union(stringa, Range(the_address).Areas(i))
         Next
      End If
   End If
   If startpoint + biggest - 1 < thecount Then
      Set stringc = Range(the_address).Areas(startpoint + biggest)
      If thecount > startpoint + biggest Then
         For i = startpoint + biggest + 1 To thecount
            Set stringc = Application.Union(stringc, Range(the_address).Areas(i))
         Next
      End If
   End If
   If startpoint > 1 And startpoint + biggest - 1 < thecount Then
     GetName = GetName(stringa.Address(ReferenceStyle:=Application.ReferenceStyle)) & Application.International(xlListSeparator) & candidate & Application.International(xlListSeparator) & GetName(stringc.Address(ReferenceStyle:=Application.ReferenceStyle))
   ElseIf startpoint > 1 Then
     GetName = GetName(stringa.Address(ReferenceStyle:=Application.ReferenceStyle)) & Application.International(xlListSeparator) & candidate
   Else
     GetName = candidate & Application.International(xlListSeparator) & GetName(stringc.Address(ReferenceStyle:=Application.ReferenceStyle))
   End If
Else
   If Range(the_address).Worksheet.Name = ActiveSheet.Name Then
      If Err = 0 Then
         GetName = Range(the_address).AddressLocal(ReferenceStyle:=Application.ReferenceStyle)
      Else
         candidate = Application.ConvertFormula(the_address, xlA1, Application.ReferenceStyle)
         If "[" & ActiveWorkbook.Name & "]" = Left(candidate, Len(ActiveWorkbook.Name) + 2) Then
            candidate = Mid(candidate, Len(ActiveWorkbook.Name) + 3)
         End If
         GetName = candidate
      End If
   Else
      candidate = Application.ConvertFormula(the_address, xlA1, Application.ReferenceStyle)
      If "[" & ActiveWorkbook.Name & "]" = Left(candidate, Len(ActiveWorkbook.Name) + 2) Then
         candidate = Mid(candidate, Len(ActiveWorkbook.Name) + 3)
      End If
      GetName = candidate
   End If
 '  GetName = Range(the_address).Address(ReferenceStyle:=Application.ReferenceStyle)
End If
Err = 0
On Error GoTo 0
Exit Function
bugout:
On Error Resume Next
If IsError(the_address) Then
   GetName = ""
ElseIf the_address <> "" Then
   'GetName = Application.ConvertFormula(the_address, xlA1, Application.ReferenceStyle)
   GetName = the_address
Else
   GetName = ""
End If
On Error GoTo 0
End Function


Public Function Formname(ByVal astring, asheet)
    ' creates names for reports
    Dim currentsheet As String, rowind As Double, colind As Integer, rowstring As String
    Dim colstring As String, i As Long
    currentsheet = ActiveSheet.Name
    Worksheets(asheet).Activate
    If GetName(astring) <> Range(Stylecheck(astring)).Address(ReferenceStyle:=GlobalR1C1) Then
       Formname = GetName(astring)
       Worksheets(currentsheet).Activate
       Exit Function
    End If
    rowind = Range(Stylecheck(astring)).Row
    colind = Range(Stylecheck(astring)).Column
    rowstring = ""
    colstring = ""
    For i = rowind - 1 To 1 Step -1
        If TypeName(Cells(i, colind).Value) = "String" Then
           rowstring = Cells(i, colind).Value
           Exit For
        End If
    Next
    For i = colind - 1 To 1 Step -1
        If TypeName(Cells(rowind, i).Value) = "String" Then
           colstring = Cells(rowind, i).Value
           Exit For
        End If
    Next
    If rowstring <> "" And colstring <> "" Then
       Formname = colstring & " " & rowstring
    Else
       Formname = colstring & rowstring
    End If
    Worksheets(currentsheet).Activate
End Function
     
Public Function EvaluateRHS(TheRHS As String) As String
   Dim pl1 As Integer, workstring As String
   Dim remem As String, xlname As String
   pl1 = 0
   workstring = TheRHS
   pl1 = InStr(workstring, "[" & ActiveWorkbook.Name & "]")
   Do While pl1 <> 0
      workstring = Left(workstring, pl1 - 1) & Mid(workstring, pl1 + Len(ActiveWorkbook.Name) + 2)
      pl1 = InStr(workstring, "[" & ActiveWorkbook.Name & "]")
   Loop
   pl1 = InStr(workstring, "'" & ActiveSheet.Name & "'!")
   Do While pl1 <> 0
      workstring = Left(workstring, pl1 - 1) & Mid(workstring, pl1 + Len(ActiveSheet.Name) + 3)
      pl1 = InStr(workstring, "'" & ActiveSheet.Name & "'!")
   Loop
   pl1 = InStr(workstring, ActiveSheet.Name & "!")
   Do While pl1 <> 0
      workstring = Left(workstring, pl1 - 1) & Mid(workstring, pl1 + Len(ActiveSheet.Name) + 1)
      pl1 = InStr(workstring, ActiveSheet.Name & "!")
   Loop
   If Left(workstring, 1) = "=" Then
      workstring = Mid(workstring, 2)
   End If
   EvaluateRHS = workstring
End Function

Public Sub Do_Infeas(ReportLength As Integer)
    Dim i As Integer, rowind As Double, colind As Integer, adjusts As Integer
    Dim constraints As Integer, infcount As Integer, thestring As String
    Dim rhsstring As String, newsheet As String, j As Integer
    Dim keepgoing As Boolean, status As Integer, constbnds As Integer
    Dim dummy As Integer
    Dim suSav As Boolean, iCalc
    
    suSav = Application.ScreenUpdating
    iCalc = Application.Calculation
    Application.Calculation = xlCalculationManual
    If SolverCls Is Nothing Then
        Set SolverCls = New SolverCalls
    End If
    
    If Not IsNumeric(GlobalX4Sheet.Range("solver_tbl").Value) Then
       DisplayMessage "solver_msg_47", 1830, 0
       Exit Sub
    Else
       Application.ScreenUpdating = False
       Call SolverCls.Solve(1)
       If ReportLength = 1 Then
          dummy = SolverCls.Solve(4)
       Else
          dummy = SolverCls.Solve(5)
       End If
       If dummy >= 6 And dummy <= 8 Then
          Application.StatusBar = False
          Exit Sub
       End If
       rowind = GlobalX4Sheet.Range("solver_tbl").Row
       colind = GlobalX4Sheet.Range("solver_tbl").Column
       adjusts = GlobalX4Sheet.Cells(rowind, colind).Value
       constraints = GlobalX4Sheet.Cells(rowind, colind + 1).Value
       If ReportLength = 1 Then
          constbnds = constraints + GlobalX4Sheet.Cells(rowind, colind + 2).Value
       Else
          constbnds = constraints
       End If
       colind = colind + 1 ' necessary for outlining
    End If
    
    Application.StatusBar = GlobalX4Mess.Range("solver_infmsg1").Text
    ActiveWorkbook.Worksheets.Add
    ActiveWindow.DisplayGridlines = False
    On Error Resume Next
    Err = 0
    infcount = 1
givename:
    ActiveSheet.Name = GlobalX4Mess.Range("solver_infmsg2").Text & " " & Trim(Str(infcount))
    If Err > 0 Then
       Err = 0
       infcount = infcount + 1
       GoTo givename
    End If
    On Error GoTo 0
    Range("$A$1:$A$3").ColumnWidth = 1.5
    Range("$A$1:$A$3").Font.Bold = True
    Call SetCellValue(Cells(1, 1), GlobalX4Mess.Range("solver_msg_49").Text & " " & Application.Version & " " & GlobalX4Mess.Range("solver_infmsg2").Text)
    Call SetCellValue(Cells(2, 1), GlobalX4Mess.Range("solver_msg_51").Text & " [" & ActiveWorkbook.Name & "]" & GlobalSheetName)
    Call SetCellValue(Cells(3, 1), GlobalX4Mess.Range("solver_msg_52").Text & " " & Now)
    newsheet = ActiveSheet.Name
    On Error GoTo handleCancel
    Application.EnableCancelKey = xlErrorHandler
    If ReportLength = 1 Then
       Call SetCellValue(Cells(6, 1), GlobalX4Mess.Range("solver_infmsg3").Text)
    Else
       Call SetCellValue(Cells(6, 1), GlobalX4Mess.Range("solver_infmsg5").Text)
    End If
    Call SetCellValue(Cells(7, 2), GlobalX4Mess.Range("solver_msg_68").Text)
    Call SetCellValue(Cells(7, 3), GlobalX4Mess.Range("solver_msg_69").Text)
    Call SetCellValue(Cells(7, 4), GlobalX4Mess.Range("solver_msg_70").Text)
    Call SetCellValue(Cells(7, 5), GlobalX4Mess.Range("solver_msg_71").Text)
    Call SetCellValue(Cells(7, 6), GlobalX4Mess.Range("solver_msg_72").Text)
    Call SetCellValue(Cells(7, 7), GlobalX4Mess.Range("solver_msg_73").Text)
    Range("$B$7:$G$7").AutoFormat format:=12
    ' fill in constraints
    keepgoing = True
    j = 1
    If GlobalOutline Then
       ReDim OutlineLink(1 To 1)
       ReDim OutlineAddress(1 To 1)
       ReDim OutlineSign(1 To 1)
    End If
    For i = 1 To constbnds
       If i > constraints Or GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 5).Value = 1 Then
          If GlobalR1C1 = xlA1 Then
             thestring = Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + adjusts + i, colind).Formula, xlR1C1, xlA1), 2)
          Else
             thestring = GlobalX4Sheet.Cells(rowind + adjusts + i, colind).Formula
          End If
          status = GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 5)
          Select Case GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 1).Value
            Case 1
              If GlobalR1C1 = xlA1 Then
                 rhsstring = "<=" & Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 2).Formula, xlR1C1, xlA1), 2)
              Else
                 rhsstring = "<=" & GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 2).Formula
              End If
              If i > constraints Then
                 If status = 1 Or status = 2 Then
                    keepgoing = True
                 Else
                    keepgoing = False
                 End If
              End If
            Case 2
              If GlobalR1C1 = xlA1 Then
                 rhsstring = "=" & Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 2).Formula, xlR1C1, xlA1), 2)
              Else
                 rhsstring = "=" & GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 2).Formula
              End If
            Case 3
              If GlobalR1C1 = xlA1 Then
                 rhsstring = ">=" & Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 2).Formula, xlR1C1, xlA1), 2)
              Else
                 rhsstring = ">=" & GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 2).Formula
              End If
              If i > constraints Then
                 If status = 3 Or status = 2 Then
                    keepgoing = True
                 Else
                    keepgoing = False
                 End If
              End If
          End Select
          If i <= constraints Or (i > constraints And keepgoing) Then
             Call SetCellValue(Cells(7 + j, 2), thestring)
             Call SetCellValue(Cells(7 + j, 3), Formname(thestring, GlobalSheetName))
             Call SetCellValue(Cells(7 + j, 4), Worksheets(GlobalSheetName).Range(Stylecheck(thestring)).Value)
             Cells(7 + j, 4).NumberFormat = Worksheets(GlobalSheetName).Range(Stylecheck(thestring)).NumberFormat
             Call SetCellValue(Cells(7 + j, 5), thestring & rhsstring)
             Select Case GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 3).Value
               Case -1
                 Call SetCellValue(Cells(7 + j, 6), GlobalX4Mess.Range("solver_infmsg4").Text)
                 Call SetCellValue(Cells(7 + j, 7), GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 4).Value)
              Case 0
                 Call SetCellValue(Cells(7 + j, 6), GlobalX4Mess.Range("solver_msg_74").Text)
                 Call SetCellValue(Cells(7 + j, 7), GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 4).Value)
              Case 1
                 Call SetCellValue(Cells(7 + j, 6), GlobalX4Mess.Range("solver_msg_75").Text)
                 Call SetCellValue(Cells(7 + j, 7), GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 4).Value)
             End Select
             If GlobalOutline Then
                ReDim Preserve OutlineLink(1 To j)
                ReDim Preserve OutlineAddress(1 To j)
                ReDim Preserve OutlineSign(1 To j)
                OutlineLink(j) = GlobalX4Sheet.Cells(rowind + adjusts + i, colind - 1).Value
                OutlineSign(j) = GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 1).Value
                OutlineAddress(j) = Mid(Application.ConvertFormula("=" & thestring, Application.ReferenceStyle, xlA1), 2)
             End If
             j = j + 1
          End If
       End If
    Next
    Columns("B:G").AutoFit
'    Columns("D:G").HorizontalAlignment = xlCenter
    If GlobalOutline Then
       Dim BlockSize As Integer
       Dim StartAddress As String, FinishAddress As String
       Dim TheTitle As String, StartLink As Integer, FoundIt As Boolean
       Dim Inserts As Integer, TheRow As Integer, Counter As Integer, ii As Integer
       Inserts = 0
       Counter = 0
       ' outline constraints & bounds
       ReDim outlines1(1 To 1) As Integer
       ReDim outlines2(1 To 1) As Integer
       For i = 1 To UBound(OutlineLink)
           StartAddress = OutlineAddress(i)
           StartLink = OutlineLink(i)
           BlockSize = 0
           Do
             BlockSize = BlockSize + 1
             If BlockSize + i > UBound(OutlineLink) Then
                Exit Do
             End If
           Loop Until OutlineLink(BlockSize + i) <> StartLink
           FinishAddress = OutlineAddress(BlockSize + i - 1)
           If BlockSize > 2 And Range(StartAddress & ":" & FinishAddress).Cells.Count = BlockSize Then
              TheTitle = GetName(StartAddress & ":" & FinishAddress)
              Select Case OutlineSign(BlockSize + i - 1)
              Case 1
                TheTitle = TheTitle & " <= "
              Case 2
                 TheTitle = TheTitle & " = "
              Case Else
                 TheTitle = TheTitle & " >= "
              End Select
              i = i + BlockSize - 1
              FoundIt = False
              With ThisWorkbook.DialogSheets("Solver_dialog").ListBoxes("Constraint_list")
              For ii = 1 To .ListCount
                 If Left(.List(ii), Len(TheTitle)) = TheTitle Then
                    TheTitle = .List(ii)
                    FoundIt = True
                    Exit For
                 End If
              Next ii
              End With
              If Not FoundIt Then
                 TheTitle = Left(TheTitle, Len(TheTitle) - 3)
              End If
              ' insert title
              TheRow = 8 + i + Inserts - BlockSize
              Rows(TheRow).Insert Shift:=xlDown
              Rows(TheRow + BlockSize + 1).Insert Shift:=xlDown
              Call SetCellValue(Cells(TheRow, 2), TheTitle)
              Cells(TheRow, 2).Font.ColorIndex = xlAutomatic
              Cells(TheRow, 2).Font.Bold = True
              Cells(TheRow, 2).HorizontalAlignment = xlLeft
              Inserts = Inserts + 2
              Counter = Counter + 1
              ReDim Preserve outlines1(1 To Counter)
              ReDim Preserve outlines2(1 To Counter)
              outlines1(Counter) = TheRow + 1
              outlines2(Counter) = TheRow + BlockSize
              ' group rows
           End If
       Next
       For i = 1 To Counter
          Range(Cells(outlines1(i), 2), Cells(outlines2(i), 2)).Rows.Group
       Next
       ActiveSheet.Outline.ShowLevels RowLevels:=1
    End If
    ActiveWindow.ScrollRow = 1
    Range("$A$1").Select
    Worksheets(GlobalSheetName).Activate
    Application.StatusBar = False
    Application.ScreenUpdating = suSav
    Application.Calculation = iCalc
    On Error GoTo 0
    Exit Sub
handleCancel:
    On Error GoTo 0
    If Err = 18 Then
       Quit_report
    Else
       DisplayMessage "solver_err_msg", 1830, 0
       End
    End If
End Sub

Public Sub Do_Linear()
    Dim newobj As Double, i As Integer, rowind As Double, colind As Integer, adjusts As Integer
    Dim constraints As Integer, lincount As Integer, thestring As String
    Dim opt As String, obj_adjust As Integer, rhsstring As String, newvars() As Double, j As Integer
    Dim newsheet As String, solver_opt As String, temp As String
    Dim found2 As Boolean, foundminus1 As Boolean
    Dim suSav As Boolean, iCalc
    
    iCalc = Application.Calculation
    Application.Calculation = xlCalculationManual
    
    suSav = Application.ScreenUpdating
    If Not IsNumeric(GlobalX4Sheet.Range("solver_tbl").Value) Then
       DisplayMessage "solver_msg_47", 1830, 0
       Exit Sub
    Else
       newobj = 0
       On Error Resume Next
       newobj = Range(Stylecheck(ThisWorkbook.DialogSheets("Solver_dialog").EditBoxes("Optimum_cell").Text)).Value
       On Error GoTo 0
       rowind = GlobalX4Sheet.Range("solver_tbl").Row
       colind = GlobalX4Sheet.Range("solver_tbl").Column
       adjusts = GlobalX4Sheet.Cells(rowind, colind).Value
       constraints = GlobalX4Sheet.Cells(rowind, colind + 1).Value
       colind = colind + 1 ' necessary for outlining
       ReDim newvars(adjusts)
       For i = 1 To adjusts
           newvars(i) = Range(Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + i, colind).Formula, xlR1C1, xlA1), 2)).Value
       Next
    End If
    Application.ScreenUpdating = False
    Application.StatusBar = GlobalX4Mess.Range("solver_linmsg1").Text
    ActiveWorkbook.Worksheets.Add
    ActiveWindow.DisplayGridlines = False
    On Error Resume Next
    Err = 0
    lincount = 1
givename:
    ActiveSheet.Name = GlobalX4Mess.Range("solver_linmsg2").Text & " " & Trim(Str(lincount))
    If Err > 0 Then
       Err = 0
       lincount = lincount + 1
       GoTo givename
    End If
    On Error GoTo 0
    Range("$A$1:$A$3").ColumnWidth = 1.5
    Range("$A$1:$A$3").Font.Bold = True
    Call SetCellValue(Cells(1, 1), GlobalX4Mess.Range("solver_msg_49").Text & " " & Application.Version & " " & GlobalX4Mess.Range("solver_linmsg2").Text)
    Call SetCellValue(Cells(2, 1), GlobalX4Mess.Range("solver_msg_51").Text & " [" & ActiveWorkbook.Name & "]" & GlobalSheetName)
    Call SetCellValue(Cells(3, 1), GlobalX4Mess.Range("solver_msg_52").Text & " " & Now)
    ' target section
    newsheet = ActiveSheet.Name
    If GlobalTyp = 1 Then
       thestring = GlobalX4Mess.Range("solver_msg_53").Text
    ElseIf GlobalTyp = 2 Then
       thestring = GlobalX4Mess.Range("solver_msg_54").Text
    ElseIf GlobalTyp = 3 Then
       thestring = GlobalX4Mess.Range("solver_msg_55").Text
       constraints = constraints - 1
    End If
    Call SetCellValue(Cells(6, 1), GlobalX4Mess.Range("solver_msg_56").Text & " (" & thestring & ")")
    opt = ""
    On Error Resume Next
    Worksheets(GlobalSheetName).Activate
    opt = Mid(CStr(ActiveSheet.Names("solver_opt")), 2)
    Worksheets(newsheet).Activate
    On Error GoTo 0
    On Error GoTo handleCancel
    Application.EnableCancelKey = xlErrorHandler
    If opt = "" Then
       obj_adjust = 2
       Call SetCellValue(Cells(7, 2), GlobalX4Mess.Range("solver_msg_57").Text)
    Else
       obj_adjust = 3
       Call SetCellValue(Cells(7, 2), GlobalX4Mess.Range("solver_msg_58").Text)
       Call SetCellValue(Cells(7, 3), GlobalX4Mess.Range("solver_msg_59").Text)
       Call SetCellValue(Cells(7, 4), GlobalX4Mess.Range("solver_msg_60").Text)
       Call SetCellValue(Cells(7, 5), GlobalX4Mess.Range("solver_msg_61").Text)
       Call SetCellValue(Cells(7, 6), GlobalX4Mess.Range("solver_linmsg3").Text)
       Range("$B$7:$F$8").AutoFormat format:=12
    End If
    ' adjustables section
    Call SetCellValue(Cells(8 + obj_adjust, 1), GlobalX4Mess.Range("solver_msg_62").Text)
    Call SetCellValue(Cells(9 + obj_adjust, 2), GlobalX4Mess.Range("solver_msg_63").Text)
    Call SetCellValue(Cells(9 + obj_adjust, 3), GlobalX4Mess.Range("solver_msg_64").Text)
    Call SetCellValue(Cells(9 + obj_adjust, 4), GlobalX4Mess.Range("solver_msg_65").Text)
    Call SetCellValue(Cells(9 + obj_adjust, 5), GlobalX4Mess.Range("solver_msg_66").Text)
    Call SetCellValue(Cells(9 + obj_adjust, 6), GlobalX4Mess.Range("solver_linmsg4").Text)
    Range("$B$" & Trim(Str(9 + obj_adjust)) & ":$F$" & Trim(Str(9 + obj_adjust + adjusts))).AutoFormat format:=12
    ' constraint section
    If adjusts > 0 Then
      Call SetCellValue(Cells(12 + obj_adjust + adjusts, 1), GlobalX4Mess.Range("solver_msg_67").Text)
    End If
    If constraints > 0 Then
      Call SetCellValue(Cells(13 + obj_adjust + adjusts, 2), GlobalX4Mess.Range("solver_msg_68").Text)
      Call SetCellValue(Cells(13 + obj_adjust + adjusts, 3), GlobalX4Mess.Range("solver_msg_69").Text)
      Call SetCellValue(Cells(13 + obj_adjust + adjusts, 4), GlobalX4Mess.Range("solver_msg_70").Text)
      Call SetCellValue(Cells(13 + obj_adjust + adjusts, 5), GlobalX4Mess.Range("solver_msg_71").Text)
      Call SetCellValue(Cells(13 + obj_adjust + adjusts, 6), GlobalX4Mess.Range("solver_linmsg3").Text)
      Range("$B$" & Trim(Str(13 + obj_adjust + adjusts)) & ":$F$" & Trim(Str(13 + obj_adjust + adjusts + constraints))).AutoFormat format:=12
    Else
      If adjusts > 0 Then
         Call SetCellValue(Cells(13 + obj_adjust + adjusts, 2), GlobalX4Mess.Range("solver_msg_57").Text)
      End If
    End If
    ' fill in target cell
    Worksheets(GlobalSheetName).Activate
    On Error GoTo 0
    On Error Resume Next
    solver_opt = Mid(CStr(ActiveSheet.Names("solver_opt")), 2)
    Worksheets(newsheet).Activate
    If obj_adjust = 3 Then
      Call SetCellValue(Cells(8, 2), Range(Stylecheck(solver_opt)).Address(ReferenceStyle:=GlobalR1C1))
      Call SetCellValue(Cells(8, 3), Formname(Range(Stylecheck(solver_opt)).Address, GlobalSheetName))
      Worksheets(newsheet).Activate
      Call SetCellValue(Cells(8, 4), GlobalOldObj)
      Call SetCellValue(Cells(8, 5), newobj)
      Range("$D$8:$E$8").NumberFormat = GlobalOldObjFormat
      foundminus1 = False
      found2 = False
      For i = 1 To adjusts
         If GlobalX4Sheet.Cells(rowind + i, colind + 5).Value = 2 Then
            found2 = True
            Exit For
         End If
         If GlobalX4Sheet.Cells(rowind + i, colind + 5).Value = -1 Then
            foundminus1 = True
         End If
      Next
      If GlobalTyp = 3 Then
         If GlobalX4Sheet.Cells(rowind + adjusts + constraints + 1, colind + 5).Value = 1 Then
            ' constraint=1 means nonlinear
            found2 = True
         End If
         If GlobalX4Sheet.Cells(rowind + adjusts + constraints + 1, colind + 5).Value = -1 Then
            foundminus1 = True
         End If
      End If
      If found2 Then
         Call SetCellValue(Cells(8, 6), GlobalX4Mess.Range("solver_linmsg5").Text)
         Cells(8, 6).Font.Bold = True
      ElseIf Not foundminus1 Then
         Call SetCellValue(Cells(8, 6), GlobalX4Mess.Range("solver_linmsg7").Text)
      Else
         Call SetCellValue(Cells(8, 6), GlobalX4Mess.Range("solver_linmsg8").Text)
      End If
    End If
    ActiveWindow.ScrollRow = 7 + obj_adjust
    ' fill in vars
    i = 1
    Worksheets(GlobalSheetName).Activate
    For i = 1 To adjusts
       If i Mod 10 = 0 Then
          Application.StatusBar = GlobalX4Mess.Range("solver_linmsg1").Text & "   " & Int(100 * (i / (adjusts + constraints))) & "% done."
       End If
       Worksheets(newsheet).Activate
       temp = Range(Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + i, colind).Formula, xlR1C1, xlA1), 2)).Address(ReferenceStyle:=GlobalR1C1)
       Call SetCellValue(Cells(9 + obj_adjust + i, 2), temp)
       Call SetCellValue(Cells(9 + obj_adjust + i, 3), Formname(temp, GlobalSheetName))
       Call SetCellValue(Cells(9 + obj_adjust + i, 4), GlobalOldVars(i))
       Cells(9 + obj_adjust + i, 4).NumberFormat = GlobalOldVarFormats(i)
       Call SetCellValue(Cells(9 + obj_adjust + i, 5), newvars(i))
       Cells(9 + obj_adjust + i, 5).NumberFormat = GlobalOldVarFormats(i)
       Select Case GlobalX4Sheet.Cells(rowind + i, colind + 5).Value
          Case -1
             Call SetCellValue(Cells(9 + obj_adjust + i, 6), GlobalX4Mess.Range("solver_linmsg8").Text)
          Case 0
             Call SetCellValue(Cells(9 + obj_adjust + i, 6), GlobalX4Mess.Range("solver_linmsg7").Text)
          Case 1, 2
             Call SetCellValue(Cells(9 + obj_adjust + i, 6), GlobalX4Mess.Range("solver_linmsg5").Text)
             Cells(9 + obj_adjust + i, 6).Font.Bold = True
       End Select
       Worksheets(GlobalSheetName).Activate
    Next
    Worksheets(newsheet).Activate
    ' fill in constraints
    For i = 1 To constraints
       If i Mod 10 = 0 Then
          Application.StatusBar = GlobalX4Mess.Range("solver_linmsg1").Text & "   " & Int(100 * ((i + adjusts) / (adjusts + constraints))) & "% done."
       End If
       If GlobalR1C1 = xlA1 Then
          thestring = Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + adjusts + i, colind).Formula, xlR1C1, xlA1), 2)
       Else
          thestring = GlobalX4Sheet.Cells(rowind + adjusts + i, colind).Formula
       End If
       Call SetCellValue(Cells(13 + obj_adjust + adjusts + i, 2), thestring)
       Call SetCellValue(Cells(13 + obj_adjust + adjusts + i, 3), Formname(thestring, GlobalSheetName))
       Call SetCellValue(Cells(13 + obj_adjust + adjusts + i, 4), Worksheets(GlobalSheetName).Range(Stylecheck(thestring)).Value)
       Cells(13 + obj_adjust + adjusts + i, 4).NumberFormat = Worksheets(GlobalSheetName).Range(Stylecheck(thestring)).NumberFormat
       Select Case GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 1).Value
         Case 1
           If GlobalR1C1 = xlA1 Then
              rhsstring = "<=" & Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 2).Formula, xlR1C1, xlA1), 2)
           Else
              rhsstring = "<=" & GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 2).Formula
           End If
           Call SetCellValue(Cells(13 + obj_adjust + adjusts + i, 5), thestring & rhsstring)
         Case 2
           If GlobalR1C1 = xlA1 Then
              rhsstring = "=" & Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 2).Formula, xlR1C1, xlA1), 2)
           Else
              rhsstring = "=" & GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 2).Formula
           End If
           Call SetCellValue(Cells(13 + obj_adjust + adjusts + i, 5), thestring & rhsstring)
         Case 3
           If GlobalR1C1 = xlA1 Then
              rhsstring = ">=" & Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 2).Formula, xlR1C1, xlA1), 2)
           Else
              rhsstring = ">=" & GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 2).Formula
           End If
           Call SetCellValue(Cells(13 + obj_adjust + adjusts + i, 5), thestring & rhsstring)
         Case 4
           rhsstring = "=" & GlobalX4Mess.Range("solver_msg_int").Formula
           Call SetCellValue(Cells(13 + obj_adjust + adjusts + i, 5), thestring & rhsstring)
         Case 5
           rhsstring = "=" & GlobalX4Mess.Range("solver_msg_bin").Formula
           Call SetCellValue(Cells(13 + obj_adjust + adjusts + i, 5), thestring & rhsstring)
         Case 6
           rhsstring = "=" & GlobalX4Mess.Range("solver_msg_dif").Formula
           Call SetCellValue(Cells(13 + obj_adjust + adjusts + i, 5), thestring & rhsstring)
       End Select
       Select Case GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 5).Value
          Case -1
             Call SetCellValue(Cells(13 + obj_adjust + adjusts + i, 6), GlobalX4Mess.Range("solver_linmsg8").Text)
          Case 0
             Call SetCellValue(Cells(13 + obj_adjust + adjusts + i, 6), GlobalX4Mess.Range("solver_linmsg7").Text)
          Case 1
             Call SetCellValue(Cells(13 + obj_adjust + adjusts + i, 6), GlobalX4Mess.Range("solver_linmsg5").Text)
             Cells(13 + obj_adjust + adjusts + i, 6).Font.Bold = True
       End Select
    Next
    Columns("B:G").AutoFit
'    Columns("D:G").HorizontalAlignment = xlCenter
    If GlobalOutline Then
       Dim OutlineCounter As Integer, BlockSize As Integer
       Dim StartAddress As String, FinishAddress As String
       Dim StartLink As Integer, TheTitle As String
       Dim Inserts As Integer, Counter As Integer
       ' outline variables
       OutlineCounter = 1
       Inserts = 0
       Counter = 0
       ReDim outlines1(0) As Integer
       ReDim outlines2(0) As Integer
       Do While OutlineCounter <= adjusts
           StartLink = GlobalX4Sheet.Cells(rowind + OutlineCounter, colind - 1)
           StartAddress = Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + OutlineCounter, colind).Formula, xlR1C1, xlA1), 2)
           BlockSize = 0
           Do
             OutlineCounter = OutlineCounter + 1
             BlockSize = BlockSize + 1
           Loop Until GlobalX4Sheet.Cells(rowind + OutlineCounter, colind - 1) <> StartLink Or OutlineCounter > adjusts
           FinishAddress = Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + OutlineCounter - 1, colind).Formula, xlR1C1, xlA1), 2)
           If BlockSize > 2 Then
              TheTitle = GetName(StartAddress & ":" & FinishAddress)
              ' insert title
              Rows(9 + Inserts + obj_adjust + OutlineCounter - BlockSize).Insert Shift:=xlDown
              Rows(9 + Inserts + obj_adjust + OutlineCounter + 1).Insert Shift:=xlDown
              Call SetCellValue(Cells(9 + Inserts + obj_adjust + OutlineCounter - BlockSize, 2), TheTitle)
              Cells(9 + Inserts + obj_adjust + OutlineCounter - BlockSize, 2).Font.ColorIndex = xlAutomatic
              Cells(9 + Inserts + obj_adjust + OutlineCounter - BlockSize, 2).Font.Bold = True
              Cells(9 + Inserts + obj_adjust + OutlineCounter - BlockSize, 2).HorizontalAlignment = xlLeft
              ReDim Preserve outlines1(0 To Counter)
              ReDim Preserve outlines2(0 To Counter)
              outlines1(Counter) = 9 + Inserts + obj_adjust + OutlineCounter - BlockSize + 1
              outlines2(Counter) = 9 + Inserts + obj_adjust + OutlineCounter
              Inserts = Inserts + 2
              Counter = Counter + 1
              ' group rows
           End If
       Loop
       For i = 0 To Counter - 1
          Range(Cells(outlines1(i), 2), Cells(outlines2(i), 2)).Rows.Group
       Next
       ' outline constraints
       Counter = 0
       ReDim outlines1(1 To 1) As Integer
       ReDim outlines2(1 To 1) As Integer
       Do While OutlineCounter <= adjusts + constraints
           StartLink = GlobalX4Sheet.Cells(rowind + OutlineCounter, colind - 1)
           StartAddress = Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + OutlineCounter, colind).Formula, xlR1C1, xlA1), 2)
           BlockSize = 0
           Do
             OutlineCounter = OutlineCounter + 1
             BlockSize = BlockSize + 1
           Loop Until GlobalX4Sheet.Cells(rowind + OutlineCounter, colind - 1) <> StartLink Or OutlineCounter > adjusts + constraints
           FinishAddress = Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + OutlineCounter - 1, colind).Formula, xlR1C1, xlA1), 2)
           If BlockSize > 2 Then
              TheTitle = GetName(StartAddress & ":" & FinishAddress)
              Select Case GlobalX4Sheet.Cells(rowind + OutlineCounter - 1, colind + 1).Value
              Case 1
                TheTitle = TheTitle & " <= "
              Case 2
                 TheTitle = TheTitle & " = "
              Case 3
                 TheTitle = TheTitle & " >= "
              Case 4
                 TheTitle = TheTitle & " = " & GlobalX4Mess.Range("solver_msg_int").Formula
              Case 5
                 TheTitle = TheTitle & " = " & GlobalX4Mess.Range("solver_msg_bin").Formula
              Case 6
                 TheTitle = TheTitle & " = " & GlobalX4Mess.Range("solver_msg_dif").Formula
              End Select
              With ThisWorkbook.DialogSheets("Solver_dialog").ListBoxes("Constraint_list")
              For i = 1 To .ListCount
                 If Left(.List(i), Len(TheTitle)) = TheTitle Then
                    TheTitle = .List(i)
                    Exit For
                 End If
              Next
              End With
              ' insert title
              Rows(13 + Inserts + obj_adjust + OutlineCounter - BlockSize).Insert Shift:=xlDown
              Rows(13 + Inserts + obj_adjust + OutlineCounter + 1).Insert Shift:=xlDown
              Call SetCellValue(Cells(13 + Inserts + obj_adjust + OutlineCounter - BlockSize, 2), TheTitle)
              Cells(13 + Inserts + obj_adjust + OutlineCounter - BlockSize, 2).Font.ColorIndex = xlAutomatic
              Cells(13 + Inserts + obj_adjust + OutlineCounter - BlockSize, 2).Font.Bold = True
              Cells(13 + Inserts + obj_adjust + OutlineCounter - BlockSize, 2).HorizontalAlignment = xlLeft
              Inserts = Inserts + 2
              Counter = Counter + 1
              ReDim Preserve outlines1(1 To Counter)
              ReDim Preserve outlines2(1 To Counter)
              outlines1(Counter) = 11 + Inserts + obj_adjust + OutlineCounter - BlockSize + 1
              outlines2(Counter) = 11 + Inserts + obj_adjust + OutlineCounter
              ' group rows
           End If
       Loop
       For i = 1 To Counter
          Range(Cells(outlines1(i), 2), Cells(outlines2(i), 2)).Rows.Group
       Next
       ActiveSheet.Outline.ShowLevels RowLevels:=1
    End If
    ActiveWindow.ScrollRow = 1
    Range("$A$1").Select
    Worksheets(GlobalSheetName).Activate
    Application.StatusBar = False
    Application.ScreenUpdating = suSav
    Application.Calculation = iCalc
    On Error GoTo 0
    Exit Sub
handleCancel:
    On Error GoTo 0
    If Err = 18 Then
       Quit_report
    Else
       DisplayMessage "solver_err_msg", 1830, 0
       End
    End If
End Sub

Public Sub Do_Answer()
    ' creates answer report
    Dim newobj As Double, i As Integer, c, rowind As Double, colind As Integer, adjusts As Integer
    Dim constraints As Integer, constbnds As Integer, anscount As Integer, thestring As String
    Dim opt As String, obj_adjust As Integer, rhsstring As String, newvars() As Double, j As Integer
    Dim newsheet As String, solver_opt As String, tmp As String, k As Integer, kk As Integer
    Dim suSav As Boolean, iCalc, engineUsed As Integer
    suSav = Application.ScreenUpdating
    
    iCalc = Application.Calculation
    Application.Calculation = xlCalculationManual
    
    engineUsed = Mid(CStr(ActiveSheet.Names("solver_eng")), 2)
    If Not IsNumeric(GlobalX4Sheet.Range("solver_tbl").Value) Then
       DisplayMessage "solver_msg_47", 1830, 0
       Exit Sub
    Else
       Application.ScreenUpdating = False
       newobj = 0
       On Error Resume Next
       newobj = Range(Mid(CStr(ActiveSheet.Names("solver_opt")), 2)).Value
       On Error GoTo 0
       rowind = GlobalX4Sheet.Range("solver_tbl").Row
       colind = GlobalX4Sheet.Range("solver_tbl").Column
       adjusts = GlobalX4Sheet.Cells(rowind, colind).Value
       constraints = GlobalX4Sheet.Cells(rowind, colind + 1).Value
       constbnds = constraints + GlobalX4Sheet.Cells(rowind, colind + 2).Value
       colind = colind + 1 ' necessary for outlining
       ReDim newvars(adjusts)
       i = 1
       For i = 1 To adjusts
           newvars(i) = Range(Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + i, colind).Formula, xlR1C1, xlA1), 2)).Value
       Next
    End If
    Application.StatusBar = GlobalX4Mess.Range("solver_msg_48").Text
    ActiveWorkbook.Worksheets.Add
    ActiveWindow.DisplayGridlines = False
    On Error Resume Next
    Err = 0
    anscount = 1
givename:
    ActiveSheet.Name = GlobalX4Mess.Range("solver_msg_50").Text & " " & Trim(Str(anscount))
    If Err > 0 Then
       Err = 0
       anscount = anscount + 1
       GoTo givename
    End If
    On Error GoTo 0
    Range("$A$1:$A$9").ColumnWidth = 1.5
    Range("$A$1:$A$9").Font.Bold = True
    Call SetCellValue(Cells(1, 1), GlobalX4Mess.Range("solver_msg_49").Text & " " & Application.Version & " " & GlobalX4Mess.Range("solver_msg_50").Text)
    Call SetCellValue(Cells(2, 1), GlobalX4Mess.Range("solver_msg_51").Text & " [" & ActiveWorkbook.Name & "]" & GlobalSheetName)
    Call SetCellValue(Cells(3, 1), GlobalX4Mess.Range("solver_msg_52").Text & " " & Now)
    Call SetCellValue(Cells(4, 1), GlobalX4Mess.Range("solver_msg_ans1").Text & " " & dlgFinish.lblResult.Caption)
    Call SetCellValue(Cells(5, 1), GlobalX4Mess.Range("solver_msg_engine").Text)
    Call SetCellValue(Cells(6, 2), GlobalX4Mess.Range("solver_msg_ans2").Text & " " & ThisWorkbook.DialogSheets("Solver_dialog").DropDowns("EngineList").List(engineUsed))
    Call SetCellValue(Cells(7, 2), GlobalX4Mess.Range("solver_msg_ans3").Text & " " & _
                            GlobalX4Sheet.Cells(rowind, colind + 7).Value & " " & GlobalX4Mess.Range("solver_msg_ans4").Text)
    Call SetCellValue(Cells(8, 2), GlobalX4Mess.Range("solver_msg_ans5").Text & " " & _
                            GlobalX4Sheet.Cells(rowind, colind + 8).Value & " " & _
                            GlobalX4Mess.Range("solver_msg_ans6").Text & " " & GlobalX4Sheet.Cells(rowind, colind + 9).Value)
    If GlobalOutline Then
        Range(Cells(6, 2), Cells(8, 2)).Rows.Group
    End If
    ' write out the options
    Call SetCellValue(Cells(9, 1), GlobalX4Mess.Range("solver_msg_options").Text)
    tmp = GlobalX4Mess.Range("answer_opt1").Text
    With dlgOptions
        If .editTime.Text = "" Then
           tmp = tmp & " " & GlobalX4Mess.Range("answer_opt18").Text
        Else
           tmp = tmp & " " & .editTime.Text & " " & GlobalX4Mess.Range("answer_opt2").Text
        End If
        tmp = tmp & ", " & GlobalX4Mess.Range("answer_opt19").Text
        If .editIterations.Text = "" Then
           tmp = tmp & " " & GlobalX4Mess.Range("answer_opt18").Text
        Else
           tmp = tmp & " " & .editIterations.Text
        End If
        tmp = tmp & ", " & GlobalX4Mess.Range("Optarg3").Text & " " & .editPrecision.Text
        If .chkScaling Then
           tmp = tmp & ", " & GlobalX4Mess.Range("answer_opt3").Text
        End If
        If .chkIterations Then
           tmp = tmp & ", " & GlobalX4Mess.Range("answer_opt4").Text
        End If
        Call SetCellValue(Cells(10, 2), tmp)
        If ThisWorkbook.DialogSheets("Solver_dialog").DropDowns("EngineList").ListIndex = 1 Then
           tmp = GlobalX4Mess.Range("answer_opt5").Text & " " & .editConvergence.Text
           tmp = tmp & ", " & GlobalX4Mess.Range("answer_opt6").Text & " " & .editPopSizeGRG.Text
           If .editSeedGRG.Text <> "" Then
              tmp = tmp & ", " & GlobalX4Mess.Range("answer_opt7").Text & " " & .editSeedGRG.Text
           End If
           If .radioForward Then
              tmp = tmp & ", " & GlobalX4Mess.Range("answer_opt8").Text
           Else
              tmp = tmp & ", " & GlobalX4Mess.Range("answer_opt9").Text
           End If
           If .chkMultiStart Then
              tmp = tmp & ", " & GlobalX4Mess.Range("solv_dlg6_multi").Text
           End If
           If .chkBounds Then
             tmp = tmp & ", " & GlobalX4Mess.Range("answer_opt10").Text
           End If
           Call SetCellValue(Cells(11, 2), tmp)
        ElseIf ThisWorkbook.DialogSheets("Solver_dialog").DropDowns("EngineList").ListIndex = 3 Then
           tmp = GlobalX4Mess.Range("answer_opt5").Text & " " & .editConvEvol.Text
           tmp = tmp & ", " & GlobalX4Mess.Range("answer_opt6").Text & " " & .editPopEvol.Text
           If .editSeedEvol.Text <> "" Then
              tmp = tmp & ", " & GlobalX4Mess.Range("answer_opt7").Text & " " & .editSeedEvol.Text
           End If
           tmp = tmp & ", " & GlobalX4Mess.Range("answer_opt11").Text & " " & .editMutate.Text
           tmp = tmp & ", " & GlobalX4Mess.Range("answer_opt12").Text & " " & .editTimeLimit.Text & " " & GlobalX4Mess.Range("answer_opt2").Text
           If .chkBoundsEvol Then
              tmp = tmp & ", " & GlobalX4Mess.Range("answer_opt10").Text
           End If
           Call SetCellValue(Cells(11, 2), tmp)
        End If
        tmp = GlobalX4Mess.Range("answer_opt13").Text
        If .editMaxSubproblems.Text = "" Then
           tmp = tmp & " " & GlobalX4Mess.Range("answer_opt18").Text
        Else
           tmp = tmp & " " & .editMaxSubproblems.Text
        End If
        tmp = tmp & ", " & GlobalX4Mess.Range("answer_opt14").Text
        If .editMaxSolutions.Text = "" Then
            tmp = tmp & " " & GlobalX4Mess.Range("answer_opt18").Text
        Else
            tmp = tmp & " " & .editMaxSolutions.Text
        End If
        tmp = tmp & ", " & GlobalX4Mess.Range("answer_opt15").Text & " " & .editMipGap.Text & "%"
        If .chkRelax Then
           tmp = tmp & ", " & GlobalX4Mess.Range("answer_opt16").Text
        End If
        If ThisWorkbook.DialogSheets("Solver_dialog").CheckBoxes("nonneg").Value = xlOn Then
           tmp = tmp & ", " & GlobalX4Mess.Range("answer_opt17").Text
        End If
        If ThisWorkbook.DialogSheets("Solver_dialog").DropDowns("EngineList").ListIndex = 2 Then
           Call SetCellValue(Cells(11, 2), tmp)
           If GlobalOutline Then
              Range(Cells(10, 2), Cells(11, 2)).Rows.Group
           End If
        Else
           Call SetCellValue(Cells(12, 2), tmp)
           If GlobalOutline Then
              Range(Cells(10, 2), Cells(12, 2)).Rows.Group
           End If
        End If
    End With
    ' target section
    newsheet = ActiveSheet.Name
    If GlobalTyp = 1 Then
       thestring = GlobalX4Mess.Range("solver_msg_53").Text
    ElseIf GlobalTyp = 2 Then
       thestring = GlobalX4Mess.Range("solver_msg_54").Text
    ElseIf GlobalTyp = 3 Then
       thestring = GlobalX4Mess.Range("solver_msg_55").Text
    End If
    Call SetCellValue(Cells(14, 1), GlobalX4Mess.Range("solver_msg_56").Text & " (" & thestring & ")")
    opt = ""
    On Error Resume Next
    Worksheets(GlobalSheetName).Activate
    opt = Mid(CStr(ActiveSheet.Names("solver_opt")), 2)
    Worksheets(newsheet).Activate
    On Error GoTo 0
    On Error GoTo handleCancel
    Application.EnableCancelKey = xlErrorHandler
    If opt = "" Then
       obj_adjust = 6
       Call SetCellValue(Cells(15, 2), GlobalX4Mess.Range("solver_msg_57").Text)
    Else
       obj_adjust = 7
       Call SetCellValue(Cells(15, 2), GlobalX4Mess.Range("solver_msg_58").Text)
       Call SetCellValue(Cells(15, 3), GlobalX4Mess.Range("solver_msg_59").Text)
       Call SetCellValue(Cells(15, 4), GlobalX4Mess.Range("solver_msg_60").Text)
       Call SetCellValue(Cells(15, 5), GlobalX4Mess.Range("solver_msg_61").Text)
       Range("$B$15:$E$16").AutoFormat format:=12
    End If
    ' adjustables section
    Call SetCellValue(Cells(12 + obj_adjust, 1), GlobalX4Mess.Range("solver_msg_62").Text)
    Call SetCellValue(Cells(13 + obj_adjust, 2), GlobalX4Mess.Range("solver_msg_63").Text)
    Call SetCellValue(Cells(13 + obj_adjust, 3), GlobalX4Mess.Range("solver_msg_64").Text)
    Call SetCellValue(Cells(13 + obj_adjust, 4), GlobalX4Mess.Range("solver_msg_65").Text)
    Call SetCellValue(Cells(13 + obj_adjust, 5), GlobalX4Mess.Range("solver_msg_66").Text)
    Call SetCellValue(Cells(13 + obj_adjust, 6), GlobalX4Mess.Range("solver_ans_integer").Text)
    Range("$B$" & Trim(Str(13 + obj_adjust)) & ":$F$" & Trim(Str(13 + obj_adjust + adjusts))).AutoFormat format:=12
    ' constraint section
    If adjusts > 0 Then
      Call SetCellValue(Cells(16 + obj_adjust + adjusts, 1), GlobalX4Mess.Range("solver_msg_67").Text)
    End If
    If constbnds > 0 Then
      Call SetCellValue(Cells(17 + obj_adjust + adjusts, 2), GlobalX4Mess.Range("solver_msg_68").Text)
      Call SetCellValue(Cells(17 + obj_adjust + adjusts, 3), GlobalX4Mess.Range("solver_msg_69").Text)
      Call SetCellValue(Cells(17 + obj_adjust + adjusts, 4), GlobalX4Mess.Range("solver_msg_70").Text)
      Call SetCellValue(Cells(17 + obj_adjust + adjusts, 5), GlobalX4Mess.Range("solver_msg_71").Text)
      Call SetCellValue(Cells(17 + obj_adjust + adjusts, 6), GlobalX4Mess.Range("solver_msg_72").Text)
      Call SetCellValue(Cells(17 + obj_adjust + adjusts, 7), GlobalX4Mess.Range("solver_msg_73").Text)
    Else
      If adjusts > 0 Then
         Call SetCellValue(Cells(17 + obj_adjust + adjusts, 2), GlobalX4Mess.Range("solver_msg_57").Text)
      End If
    End If
    ' fill in target cell
    Worksheets(GlobalSheetName).Activate
    On Error GoTo 0
    On Error Resume Next
    solver_opt = Mid(CStr(ActiveSheet.Names("solver_opt")), 2)
    Worksheets(newsheet).Activate
    If obj_adjust = 7 Then
      Call SetCellValue(Cells(16, 2), Range(Stylecheck(solver_opt)).Address(ReferenceStyle:=GlobalR1C1))
      Call SetCellValue(Cells(16, 3), Formname(Range(Stylecheck(solver_opt)).Address, GlobalSheetName))
      Worksheets(newsheet).Activate
      Call SetCellValue(Cells(16, 4), GlobalOldObj)
      Call SetCellValue(Cells(16, 5), newobj)
      Range("$D$16:$E$16").NumberFormat = GlobalOldObjFormat
    End If
    ActiveWindow.ScrollRow = 11 + obj_adjust
    ' fill in vars
    Worksheets(GlobalSheetName).Activate
    For i = 1 To adjusts
       Set c = Range(Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + i, colind).Formula, xlR1C1, xlA1), 2))
       If i Mod 10 = 0 Then
          Application.StatusBar = GlobalX4Mess.Range("solver_msg_48").Text & "   " & Int(100 * (i / (adjusts + constbnds))) & "% done."
       End If
       Worksheets(newsheet).Activate
       Call SetCellValue(Cells(13 + obj_adjust + i, 2), c.Address(ReferenceStyle:=GlobalR1C1))
       Call SetCellValue(Cells(13 + obj_adjust + i, 3), Formname(c.Address, GlobalSheetName))
       Call SetCellValue(Cells(13 + obj_adjust + i, 4), GlobalOldVars(i))
       Cells(13 + obj_adjust + i, 4).NumberFormat = GlobalOldVarFormats(i)
       Call SetCellValue(Cells(13 + obj_adjust + i, 5), newvars(i))
       Cells(13 + obj_adjust + i, 5).NumberFormat = GlobalOldVarFormats(i)
       Call SetCellValue(Cells(13 + obj_adjust + i, 6), GlobalX4Mess.Range("solver_ans_cont").Text)
       Worksheets(GlobalSheetName).Activate
    Next
    Worksheets(newsheet).Activate
    ' fill in constraints
    For i = 1 To constbnds
       If i Mod 10 = 0 Then
          Application.StatusBar = GlobalX4Mess.Range("solver_msg_48").Text & "   " & Int(100 * ((i + adjusts) / (adjusts + constbnds))) & "% done."
       End If
       If GlobalR1C1 = xlA1 Then
          thestring = Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + adjusts + i, colind).Formula, xlR1C1, xlA1), 2)
       Else
          thestring = GlobalX4Sheet.Cells(rowind + adjusts + i, colind).Formula
       End If
       Call SetCellValue(Cells(17 + obj_adjust + adjusts + i, 2), thestring)
       Call SetCellValue(Cells(17 + obj_adjust + adjusts + i, 3), Formname(thestring, GlobalSheetName))
       Call SetCellValue(Cells(17 + obj_adjust + adjusts + i, 4), Worksheets(GlobalSheetName).Range(Stylecheck(thestring)).Value)
       Cells(17 + obj_adjust + adjusts + i, 4).NumberFormat = Worksheets(GlobalSheetName).Range(Stylecheck(thestring)).NumberFormat
       Select Case GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 1).Value
         Case 1
           If GlobalR1C1 = xlA1 Then
              rhsstring = "<=" & Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 2).Formula, xlR1C1, xlA1), 2)
           Else
              rhsstring = "<=" & GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 2).Formula
           End If
           Call SetCellValue(Cells(17 + obj_adjust + adjusts + i, 5), thestring & rhsstring)
           If GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 3).Value = 0 Then
              Call SetCellValue(Cells(17 + obj_adjust + adjusts + i, 6), GlobalX4Mess.Range("solver_msg_74").Text)
              Call SetCellValue(Cells(17 + obj_adjust + adjusts + i, 7), GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 4).Value)
           Else
              Call SetCellValue(Cells(17 + obj_adjust + adjusts + i, 6), GlobalX4Mess.Range("solver_msg_75").Text)
              Call SetCellValue(Cells(17 + obj_adjust + adjusts + i, 7), 0)
           End If
         Case 2
           If GlobalR1C1 = xlA1 Then
              rhsstring = "=" & Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 2).Formula, xlR1C1, xlA1), 2)
           Else
              rhsstring = "=" & GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 2).Formula
           End If
           Call SetCellValue(Cells(17 + obj_adjust + adjusts + i, 5), thestring & rhsstring)
           If GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 3).Value = 0 Then
              Call SetCellValue(Cells(17 + obj_adjust + adjusts + i, 6), GlobalX4Mess.Range("solver_msg_74").Text)
              Call SetCellValue(Cells(17 + obj_adjust + adjusts + i, 7), GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 4).Value)
           Else
              Call SetCellValue(Cells(17 + obj_adjust + adjusts + i, 6), GlobalX4Mess.Range("solver_msg_75").Text)
              Call SetCellValue(Cells(17 + obj_adjust + adjusts + i, 7), 0)
           End If
         Case 3
           If GlobalR1C1 = xlA1 Then
              rhsstring = ">=" & Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 2).Formula, xlR1C1, xlA1), 2)
           Else
              rhsstring = ">=" & GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 2).Formula
           End If
           Call SetCellValue(Cells(17 + obj_adjust + adjusts + i, 5), thestring & rhsstring)
           If GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 3).Value = 0 Then
              Call SetCellValue(Cells(17 + obj_adjust + adjusts + i, 6), GlobalX4Mess.Range("solver_msg_74").Text)
              Call SetCellValue(Cells(17 + obj_adjust + adjusts + i, 7), GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 4).Value)
           Else
              Call SetCellValue(Cells(17 + obj_adjust + adjusts + i, 6), GlobalX4Mess.Range("solver_msg_75").Text)
              Call SetCellValue(Cells(17 + obj_adjust + adjusts + i, 7), 0)
           End If
           Cells(17 + obj_adjust + adjusts + i, 7).NumberFormat = Worksheets(GlobalSheetName).Range(Stylecheck(thestring)).NumberFormat
       End Select
    Next
    Dim extraCounter As Integer
    extraCounter = 1
    For kk = 1 To CInt(Mid(Worksheets(GlobalSheetName).Names("solver_num").RefersTo, 2))
       Select Case CInt(Mid(Worksheets(GlobalSheetName).Names("solver_rel" & Trim(Str(kk))).RefersTo, 2))
       Case 1, 2, 3
            GoTo skipit
       Case 4
           rhsstring = "=" & GlobalX4Mess.Range("solver_ans_integer").Text
       Case 5
           rhsstring = "=" & GlobalX4Mess.Range("solver_ans_bin").Text
       Case 6
           rhsstring = "=" & GlobalX4Mess.Range("solver_ans_diff").Text
       End Select
       Call SetCellValue(Cells(17 + obj_adjust + adjusts + constbnds + extraCounter, 2), _
              Range(Mid(Worksheets(GlobalSheetName).Names("solver_lhs" & Trim(Str(kk))).RefersTo, 2)).Address(ReferenceStyle:=GlobalR1C1) & rhsstring)
       
       extraCounter = extraCounter + 1
       For Each c In Range(Mid(Worksheets(GlobalSheetName).Names("solver_lhs" & Trim(Str(kk))).RefersTo, 2)).Cells
           thestring = c.Address(ReferenceStyle:=GlobalR1C1)
            For k = 1 To adjusts
               If Cells(13 + obj_adjust + k, 2).Formula = thestring Then
                  Call SetCellValue(Cells(13 + obj_adjust + k, 6), Mid(rhsstring, 2))
                  Exit For
               End If
           Next
       Next
skipit:
    Next
    Range("$B$" & Trim(Str(17 + obj_adjust + adjusts)) & ":$G$" & Trim(Str(17 + obj_adjust + adjusts + constbnds + extraCounter - 1))).AutoFormat format:=12
    Columns("C:G").AutoFit
  '    Columns("D:G").HorizontalAlignment = xlCenter
    If GlobalOutline Then
       Dim OutlineCounter As Integer, BlockSize As Integer
       Dim StartAddress As String, FinishAddress As String
       Dim StartLink As Integer, TheTitle As String
       Dim Inserts As Integer, Counter As Integer
       ' outline variables
       OutlineCounter = 1
       Inserts = 0
       ReDim outlines1(0) As Integer
       ReDim outlines2(0) As Integer
       Do While OutlineCounter <= adjusts
           StartLink = GlobalX4Sheet.Cells(rowind + OutlineCounter, colind - 1)
           StartAddress = Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + OutlineCounter, colind).Formula, xlR1C1, xlA1), 2)
           BlockSize = 0
           Do
             OutlineCounter = OutlineCounter + 1
             BlockSize = BlockSize + 1
           Loop Until GlobalX4Sheet.Cells(rowind + OutlineCounter, colind - 1) <> StartLink Or OutlineCounter > adjusts
           FinishAddress = Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + OutlineCounter - 1, colind).Formula, xlR1C1, xlA1), 2)
           If BlockSize > 2 Then
              TheTitle = GetName(StartAddress & ":" & FinishAddress)
              ' insert title
              Rows(13 + Inserts + obj_adjust + OutlineCounter - BlockSize).Insert Shift:=xlDown
              Rows(13 + Inserts + obj_adjust + OutlineCounter + 1).Insert Shift:=xlDown
              Call SetCellValue(Cells(13 + Inserts + obj_adjust + OutlineCounter - BlockSize, 2), TheTitle)
              Cells(13 + Inserts + obj_adjust + OutlineCounter - BlockSize, 2).Font.ColorIndex = xlAutomatic
              Cells(13 + Inserts + obj_adjust + OutlineCounter - BlockSize, 2).Font.Bold = True
              Cells(13 + Inserts + obj_adjust + OutlineCounter - BlockSize, 2).HorizontalAlignment = xlLeft
              ReDim Preserve outlines1(0 To Counter)
              ReDim Preserve outlines2(0 To Counter)
              outlines1(Counter) = 13 + Inserts + obj_adjust + OutlineCounter - BlockSize + 1
              outlines2(Counter) = 13 + Inserts + obj_adjust + OutlineCounter
              Inserts = Inserts + 2
              Counter = Counter + 1
              ' group rows
           End If
       Loop
       For i = 0 To Counter - 1
          Range(Cells(outlines1(i), 2), Cells(outlines2(i), 2)).Rows.Group
       Next
       ' outline constraints & bounds
       Counter = 0
       ReDim outlines1(1 To 1) As Integer
       ReDim outlines2(1 To 1) As Integer
       Do While OutlineCounter <= adjusts + constbnds
           StartLink = GlobalX4Sheet.Cells(rowind + OutlineCounter, colind - 1)
           StartAddress = Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + OutlineCounter, colind).Formula, xlR1C1, xlA1), 2)
           BlockSize = 0
           Do
             OutlineCounter = OutlineCounter + 1
             BlockSize = BlockSize + 1
           Loop Until GlobalX4Sheet.Cells(rowind + OutlineCounter, colind - 1) <> StartLink Or OutlineCounter > adjusts + constbnds
           FinishAddress = Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + OutlineCounter - 1, colind).Formula, xlR1C1, xlA1), 2)
           If BlockSize > 2 Then
              TheTitle = GetName(StartAddress & ":" & FinishAddress)
              Select Case GlobalX4Sheet.Cells(rowind + OutlineCounter - 1, colind + 1).Value
              Case 1
                TheTitle = TheTitle & " <= "
              Case 2
                 TheTitle = TheTitle & " = "
              Case 3
                 TheTitle = TheTitle & " >= "
              Case 4
                 TheTitle = TheTitle & " = " & GlobalX4Mess.Range("solver_msg_int").Formula
              Case 5
                 TheTitle = TheTitle & " = " & GlobalX4Mess.Range("solver_msg_bin").Formula
              Case 6
                 TheTitle = TheTitle & " = " & GlobalX4Mess.Range("solver_msg_dif").Formula
              End Select
              With ThisWorkbook.DialogSheets("solver_dialog").ListBoxes("Constraint_list")
              For i = 1 To .ListCount
                 If Left(.List(i), Len(TheTitle)) = TheTitle Then
                    TheTitle = .List(i)
                    Exit For
                 End If
              Next
              End With
              ' insert title
              Rows(17 + Inserts + obj_adjust + OutlineCounter - BlockSize).Insert Shift:=xlDown
              Rows(17 + Inserts + obj_adjust + OutlineCounter + 1).Insert Shift:=xlDown
              Call SetCellValue(Cells(17 + Inserts + obj_adjust + OutlineCounter - BlockSize, 2), TheTitle)
              Cells(17 + Inserts + obj_adjust + OutlineCounter - BlockSize, 2).Font.ColorIndex = xlAutomatic
              Cells(17 + Inserts + obj_adjust + OutlineCounter - BlockSize, 2).Font.Bold = True
              Cells(17 + Inserts + obj_adjust + OutlineCounter - BlockSize, 2).HorizontalAlignment = xlLeft
              Inserts = Inserts + 2
              Counter = Counter + 1
              ReDim Preserve outlines1(1 To Counter)
              ReDim Preserve outlines2(1 To Counter)
              outlines1(Counter) = 15 + Inserts + obj_adjust + OutlineCounter - BlockSize + 1
              outlines2(Counter) = 15 + Inserts + obj_adjust + OutlineCounter
              ' group rows
           End If
       Loop
       For i = 1 To Counter
          Range(Cells(outlines1(i), 2), Cells(outlines2(i), 2)).Rows.Group
       Next
       ActiveSheet.Outline.ShowLevels RowLevels:=1
    End If
    ActiveWindow.ScrollRow = 1
    Range("$A$1").Select
    Worksheets(GlobalSheetName).Activate
    Application.StatusBar = False
    Application.ScreenUpdating = suSav
    Application.Calculation = iCalc
    On Error GoTo 0
    Exit Sub
handleCancel:
    On Error GoTo 0
    If Err = 18 Then
       Quit_report
    Else
       DisplayMessage "solver_err_msg", 1830, 0
       End
    End If
End Sub

Public Sub Quit_report()
    ' user escaped out of answer or sensitivity report
    DisplayMessage "solver_msg_76", 1830, 0
    Worksheets(GlobalSheetName).Activate
    Application.StatusBar = False
    Application.EnableCancelKey = xlDisabled
End Sub

Public Sub Do_Sensitivity()
    ' create sensitivity report
    Dim i As Integer, c, rowind As Double, colind As Integer, adjusts As Integer, newvars() As Double
    Dim constraints As Integer, constbnds As Integer, sencount As Integer, thestring As String, j As Integer
    Dim newsheet As String, dmy As Integer, sh
    Dim suSav As Boolean, iCalc
    iCalc = Application.Calculation
    Application.Calculation = xlCalculationManual
    suSav = Application.ScreenUpdating
    If Not IsNumeric(GlobalX4Sheet.Range("solver_tbl").Value) Then
       DisplayMessage "solver_msg_47", 1830, 0
       Exit Sub
    Else
       Application.ScreenUpdating = False
       rowind = GlobalX4Sheet.Range("solver_tbl").Row
       colind = GlobalX4Sheet.Range("solver_tbl").Column
       adjusts = GlobalX4Sheet.Cells(rowind, colind).Value
       constraints = GlobalX4Sheet.Cells(rowind, colind + 1).Value
       constbnds = constraints + GlobalX4Sheet.Cells(rowind, colind + 2).Value
       colind = colind + 1 ' necessary for outlining
       ReDim newvars(adjusts)
       For i = 1 To adjusts
           newvars(i) = Range(Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + i, colind).Formula, xlR1C1, xlA1), 2)).Value
       Next
    End If
    Application.EnableCancelKey = xlErrorHandler
    Application.StatusBar = GlobalX4Mess.Range("solver_msg_78").Text
    ActiveWorkbook.Worksheets.Add
    ActiveWindow.DisplayGridlines = False
    On Error Resume Next
    Err = 0
    sencount = 1
givename:
    ActiveSheet.Name = GlobalX4Mess.Range("solver_msg_79").Text & " " & Trim(Str(sencount))
    If Err > 0 Then
       Err = 0
       sencount = sencount + 1
       GoTo givename
    End If
    Range("$A$1:$A$3").Select
    Selection.ColumnWidth = 1.5
    Selection.Font.Bold = True
    newsheet = ActiveSheet.Name
    Call SetCellValue(Cells(1, 1), GlobalX4Mess.Range("solver_msg_49").Text & " " & Application.Version & " " & GlobalX4Mess.Range("solver_msg_79").Text)
    Call SetCellValue(Cells(2, 1), GlobalX4Mess.Range("solver_msg_51").Text & " [" & ActiveWorkbook.Name & "]" & GlobalSheetName)
    Call SetCellValue(Cells(3, 1), GlobalX4Mess.Range("solver_msg_52").Text & " " & Now)
    ' adjustables section
    Call SetCellValue(Cells(6, 1), GlobalX4Mess.Range("solver_msg_80").Text)
    Call SetCellValue(Cells(8, 2), GlobalX4Mess.Range("solver_msg_81").Text)
    Call SetCellValue(Cells(8, 3), GlobalX4Mess.Range("solver_msg_82").Text)
    Call SetCellValue(Cells(7, 4), GlobalX4Mess.Range("solver_msg_83").Text)
    Call SetCellValue(Cells(8, 4), GlobalX4Mess.Range("solver_msg_84").Text)
    If GlobalX4Sheet.Cells(rowind, colind + 5).Value = 3 Then
       Call SetCellValue(Cells(7, 5), GlobalX4Mess.Range("solver_msg_85").Text)
       Call SetCellValue(Cells(8, 5), GlobalX4Mess.Range("solver_msg_86").Text)
       Call SetCellValue(Cells(7, 6), GlobalX4Mess.Range("solver_msg_87").Text)
       Call SetCellValue(Cells(8, 6), GlobalX4Mess.Range("solver_msg_88").Text)
       Call SetCellValue(Cells(7, 7), GlobalX4Mess.Range("solver_msg_89").Text)
       Call SetCellValue(Cells(8, 7), GlobalX4Mess.Range("solver_msg_90").Text)
       Call SetCellValue(Cells(7, 8), GlobalX4Mess.Range("solver_msg_91").Text)
       Call SetCellValue(Cells(8, 8), GlobalX4Mess.Range("solver_msg_92").Text)
       Range("$B$7:$H$" & Trim(Str(8 + adjusts))).AutoFormat format:=12
    Else
       Call SetCellValue(Cells(7, 5), GlobalX4Mess.Range("solver_msg_93").Text)
       Call SetCellValue(Cells(8, 5), GlobalX4Mess.Range("solver_msg_94").Text)
       Range("$B$7:$E$" & Trim(Str(8 + adjusts))).AutoFormat format:=12
    End If
    ' constraint section
    Call SetCellValue(Cells(10 + adjusts, 1), GlobalX4Mess.Range("solver_msg_95").Text)
    If constraints > 0 Then
      Call SetCellValue(Cells(12 + adjusts, 2), GlobalX4Mess.Range("solver_msg_96").Text)
      Call SetCellValue(Cells(12 + adjusts, 3), GlobalX4Mess.Range("solver_msg_97").Text)
      Call SetCellValue(Cells(11 + adjusts, 4), GlobalX4Mess.Range("solver_msg_98").Text)
      Call SetCellValue(Cells(12 + adjusts, 4), GlobalX4Mess.Range("solver_msg_99").Text)
      If GlobalX4Sheet.Cells(rowind, colind + 5).Value = 3 Then
         Call SetCellValue(Cells(11 + adjusts, 5), GlobalX4Mess.Range("solver_msg_100").Text)
         Call SetCellValue(Cells(12 + adjusts, 5), GlobalX4Mess.Range("solver_msg_101").Text)
         Call SetCellValue(Cells(11 + adjusts, 6), GlobalX4Mess.Range("solver_msg_102").Text)
         Call SetCellValue(Cells(12 + adjusts, 6), GlobalX4Mess.Range("solver_msg_103").Text)
         Call SetCellValue(Cells(11 + adjusts, 7), GlobalX4Mess.Range("solver_msg_104").Text)
         Call SetCellValue(Cells(12 + adjusts, 7), GlobalX4Mess.Range("solver_msg_105").Text)
         Call SetCellValue(Cells(11 + adjusts, 8), GlobalX4Mess.Range("solver_msg_106").Text)
         Call SetCellValue(Cells(12 + adjusts, 8), GlobalX4Mess.Range("solver_msg_107").Text)
         Range("$B$" & Trim(Str(11 + adjusts)) & ":$H$" & Trim(Str(12 + adjusts + constraints))).AutoFormat format:=12
      Else
         Call SetCellValue(Cells(11 + adjusts, 5), GlobalX4Mess.Range("solver_msg_108").Text)
         Call SetCellValue(Cells(12 + adjusts, 5), GlobalX4Mess.Range("solver_msg_109").Text)
         Range("$B$" & Trim(Str(11 + adjusts)) & ":$E$" & Trim(Str(12 + adjusts + constraints))).AutoFormat format:=12
      End If
    Else
       Call SetCellValue(Cells(11 + adjusts, 2), GlobalX4Mess.Range("solver_msg_110").Text)
    End If
    ' fill in vars
    Worksheets(GlobalSheetName).Activate
    For i = 1 To adjusts
       Set c = Range(Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + i, colind).Formula, xlR1C1, xlA1), 2))
       If i Mod 10 = 0 Then
          Application.StatusBar = GlobalX4Mess.Range("solver_msg_78").Text & "   " & Str(Int(100 * (i / (adjusts + constraints)))) & "% done."
       End If
       Worksheets(newsheet).Activate
       Call SetCellValue(Cells(8 + i, 2), c.Address(ReferenceStyle:=GlobalR1C1))
       Call SetCellValue(Cells(8 + i, 3), Formname(c.Address, GlobalSheetName))
       Call SetCellValue(Cells(8 + i, 4), newvars(i))
       'Cells(8 + i, 4).NumberFormat = GlobalOldVarFormats(i)
       Call SetCellValue(Cells(8 + i, 5), GlobalX4Sheet.Cells(rowind + i, colind + 5).Value)
       'Cells(8 + i, 5).NumberFormat = GlobalOldVarFormats(i)
       If GlobalX4Sheet.Cells(rowind, colind + 5).Value = 3 Then
           Call SetCellValue(Cells(8 + i, 6), GlobalX4Sheet.Cells(rowind + i, colind + 6).Value)
           Call SetCellValue(Cells(8 + i, 7), GlobalX4Sheet.Cells(rowind + i, colind + 7).Value)
           Call SetCellValue(Cells(8 + i, 8), GlobalX4Sheet.Cells(rowind + i, colind + 8).Value)
       End If
       Worksheets(GlobalSheetName).Activate
    Next
    Worksheets(newsheet).Activate
    ' fill in constraints
    For i = 1 To constraints
       If i Mod 10 = 0 Then
          Application.StatusBar = GlobalX4Mess.Range("solver_msg_78").Text & "   " & Int(100 * ((i + adjusts) / (adjusts + constraints))) & "% done."
       End If
       If GlobalR1C1 = xlA1 Then
          thestring = Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + adjusts + i, colind).Formula, xlR1C1, xlA1), 2)
       Else
          thestring = GlobalX4Sheet.Cells(rowind + adjusts + i, colind).Formula
       End If
       Call SetCellValue(Cells(12 + adjusts + i, 2), thestring)
       Call SetCellValue(Cells(12 + adjusts + i, 3), Formname(thestring, GlobalSheetName))
       Call SetCellValue(Cells(12 + adjusts + i, 4), Worksheets(GlobalSheetName).Range(Stylecheck(thestring)).Value)
       'Cells(12 + adjusts + i, 4).NumberFormat = Worksheets(GlobalSheetName).Range(Stylecheck(thestring)).NumberFormat
       Call SetCellValue(Cells(12 + adjusts + i, 5), GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 5))
       'Cells(12 + adjusts + i, 5).NumberFormat = Worksheets(GlobalSheetName).Range(Stylecheck(thestring)).NumberFormat
       If GlobalX4Sheet.Cells(rowind, colind + 5).Value = 3 Then
          Call SetCellValue(Cells(12 + adjusts + i, 6), GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 6))
          Call SetCellValue(Cells(12 + adjusts + i, 7), GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 7))
          Call SetCellValue(Cells(12 + adjusts + i, 8), GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 8))
       End If
    Next
    Columns("B:H").AutoFit
'    Columns("D:H").HorizontalAlignment = xlCenter
    If GlobalOutline Then
       Dim OutlineCounter As Integer, BlockSize As Integer
       Dim StartAddress As String, FinishAddress As String
       Dim StartLink As Integer, TheTitle As String
       Dim Inserts As Integer, Counter As Integer
       ' outline variables
       OutlineCounter = 1
       Inserts = 0
       Counter = 0
       ReDim outlines1(0) As Integer
       ReDim outlines2(0) As Integer
       Do While OutlineCounter <= adjusts
           StartLink = GlobalX4Sheet.Cells(rowind + OutlineCounter, colind - 1)
           StartAddress = Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + OutlineCounter, colind).Formula, xlR1C1, xlA1), 2)
           BlockSize = 0
           Do
             OutlineCounter = OutlineCounter + 1
             BlockSize = BlockSize + 1
           Loop Until GlobalX4Sheet.Cells(rowind + OutlineCounter, colind - 1) <> StartLink Or OutlineCounter > adjusts
           FinishAddress = Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + OutlineCounter - 1, colind).Formula, xlR1C1, xlA1), 2)
           If BlockSize > 2 Then
              TheTitle = GetName(StartAddress & ":" & FinishAddress)
              ' insert title
              Rows(8 + Inserts + OutlineCounter - BlockSize).Insert Shift:=xlDown
              Rows(8 + Inserts + OutlineCounter + 1).Insert Shift:=xlDown
              Call SetCellValue(Cells(8 + Inserts + OutlineCounter - BlockSize, 2), TheTitle)
              Cells(8 + Inserts + OutlineCounter - BlockSize, 2).Font.ColorIndex = xlAutomatic
              Cells(8 + Inserts + OutlineCounter - BlockSize, 2).Font.Bold = True
              Cells(8 + Inserts + OutlineCounter - BlockSize, 2).HorizontalAlignment = xlLeft
              ReDim Preserve outlines1(0 To Counter)
              ReDim Preserve outlines2(0 To Counter)
              outlines1(Counter) = 8 + Inserts + OutlineCounter - BlockSize + 1
              outlines2(Counter) = 8 + Inserts + OutlineCounter
              Inserts = Inserts + 2
              Counter = Counter + 1
              ' group rows
           End If
       Loop
       For i = 0 To Counter - 1
          Range(Cells(outlines1(i), 2), Cells(outlines2(i), 2)).Rows.Group
       Next
       ' outline constraints & bounds
       Counter = 0
       ReDim outlines1(1 To 1) As Integer
       ReDim outlines2(1 To 1) As Integer
       Do While OutlineCounter <= adjusts + constraints
           StartLink = GlobalX4Sheet.Cells(rowind + OutlineCounter, colind - 1)
           StartAddress = Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + OutlineCounter, colind).Formula, xlR1C1, xlA1), 2)
           BlockSize = 0
           Do
             OutlineCounter = OutlineCounter + 1
             BlockSize = BlockSize + 1
           Loop Until GlobalX4Sheet.Cells(rowind + OutlineCounter, colind - 1) <> StartLink Or OutlineCounter > adjusts + constraints
           FinishAddress = Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + OutlineCounter - 1, colind).Formula, xlR1C1, xlA1), 2)
           If BlockSize > 2 Then
              TheTitle = GetName(StartAddress & ":" & FinishAddress)
              Select Case GlobalX4Sheet.Cells(rowind + OutlineCounter - 1, colind + 1).Value
              Case 1
                TheTitle = TheTitle & " <= "
              Case 2
                 TheTitle = TheTitle & " = "
              Case 3
                 TheTitle = TheTitle & " >= "
              Case 4
                 TheTitle = TheTitle & " = " & GlobalX4Mess.Range("solver_msg_int").Formula
              Case 5
                 TheTitle = TheTitle & " = " & GlobalX4Mess.Range("solver_msg_bin").Formula
              Case 6
                 TheTitle = TheTitle & " = " & GlobalX4Mess.Range("solver_msg_dif").Formula
              End Select
              With ThisWorkbook.DialogSheets("solver_dialog").ListBoxes("Constraint_list")
              For i = 1 To .ListCount
                 If Left(.List(i), Len(TheTitle)) = TheTitle Then
                    TheTitle = .List(i)
                    Exit For
                 End If
              Next
              End With
              ' insert title
              Rows(12 + Inserts + OutlineCounter - BlockSize).Insert Shift:=xlDown
              Rows(12 + Inserts + OutlineCounter + 1).Insert Shift:=xlDown
              Call SetCellValue(Cells(12 + Inserts + OutlineCounter - BlockSize, 2), TheTitle)
              Cells(12 + Inserts + OutlineCounter - BlockSize, 2).Font.ColorIndex = xlAutomatic
              Cells(12 + Inserts + OutlineCounter - BlockSize, 2).Font.Bold = True
              Cells(12 + Inserts + OutlineCounter - BlockSize, 2).HorizontalAlignment = xlLeft
              Inserts = Inserts + 2
              Counter = Counter + 1
              ReDim Preserve outlines1(1 To Counter)
              ReDim Preserve outlines2(1 To Counter)
              outlines1(Counter) = 10 + Inserts + OutlineCounter - BlockSize + 1
              outlines2(Counter) = 10 + Inserts + OutlineCounter
              ' group rows
           End If
       Loop
       For i = 1 To Counter
          Range(Cells(outlines1(i), 2), Cells(outlines2(i), 2)).Rows.Group
       Next
       ActiveSheet.Outline.ShowLevels RowLevels:=1
    End If
    ActiveWindow.ScrollRow = 1
    Range("$A$1").Select
    Worksheets(GlobalSheetName).Activate
    Application.StatusBar = False
    Application.ScreenUpdating = suSav
    Application.Calculation = iCalc
    On Error GoTo 0
    Exit Sub
handleCancel:
    If Err = 18 Then
       Quit_report
    Else
       DisplayMessage "solver_err_msg", 1830, 0
       End
    End If
End Sub

Public Sub Do_Pop()
    ' create population report
    Dim i As Integer, c, rowind As Double, colind As Integer, adjusts As Integer, newvars() As Double
    Dim constraints As Integer, constbnds As Integer, sencount As Integer, thestring As String, j As Integer
    Dim newsheet As String, dmy As Integer
    Dim suSav As Boolean, iCalc
    iCalc = Application.Calculation
    Application.Calculation = xlCalculationManual
    suSav = Application.ScreenUpdating
    If Not IsNumeric(GlobalX4Sheet.Range("solver_tbl").Value) Then
       DisplayMessage "solver_msg_47", 1830, 0
       Exit Sub
    Else
       Application.ScreenUpdating = False
       rowind = GlobalX4Sheet.Range("solver_tbl").Row
       colind = GlobalX4Sheet.Range("solver_tbl").Column
       adjusts = GlobalX4Sheet.Cells(rowind, colind).Value
       constraints = GlobalX4Sheet.Cells(rowind, colind + 1).Value
       constbnds = constraints + GlobalX4Sheet.Cells(rowind, colind + 2).Value
       colind = colind + 1 ' necessary for outlining
       ReDim newvars(adjusts)
       For i = 1 To adjusts
           newvars(i) = Range(Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + i, colind).Formula, xlR1C1, xlA1), 2)).Value
       Next
    End If
    Application.EnableCancelKey = xlErrorHandler
    Application.StatusBar = GlobalX4Mess.Range("solver_pop1").Text
    ActiveWorkbook.Worksheets.Add
    ActiveWindow.DisplayGridlines = False
    On Error Resume Next
    Err = 0
    sencount = 1
givename:
    ActiveSheet.Name = GlobalX4Mess.Range("solver_pop2").Text & " " & Trim(Str(sencount))
    If Err > 0 Then
       Err = 0
       sencount = sencount + 1
       GoTo givename
    End If
    Range("$A$1:$A$3").Select
    Selection.ColumnWidth = 1.5
    Selection.Font.Bold = True
    newsheet = ActiveSheet.Name
    Call SetCellValue(Cells(1, 1), GlobalX4Mess.Range("solver_msg_49").Text & " " & Application.Version & " " & GlobalX4Mess.Range("solver_pop2").Text)
    Call SetCellValue(Cells(2, 1), GlobalX4Mess.Range("solver_msg_51").Text & " [" & ActiveWorkbook.Name & "]" & GlobalSheetName)
    Call SetCellValue(Cells(3, 1), GlobalX4Mess.Range("solver_msg_52").Text & " " & Now)
    ' adjustables section
    Call SetCellValue(Cells(6, 1), GlobalX4Mess.Range("solver_msg_80").Text)
    Call SetCellValue(Cells(8, 2), GlobalX4Mess.Range("solver_msg_81").Text)
    Call SetCellValue(Cells(8, 3), GlobalX4Mess.Range("solver_msg_82").Text)
    Call SetCellValue(Cells(7, 4), GlobalX4Mess.Range("solver_pop3").Text)
    Call SetCellValue(Cells(8, 4), GlobalX4Mess.Range("solver_pop8").Text)
    Call SetCellValue(Cells(7, 5), GlobalX4Mess.Range("solver_pop4").Text)
    Call SetCellValue(Cells(8, 5), GlobalX4Mess.Range("solver_pop8").Text)
    Call SetCellValue(Cells(7, 6), GlobalX4Mess.Range("solver_pop5").Text)
    Call SetCellValue(Cells(8, 6), GlobalX4Mess.Range("solver_pop5a").Text)
    Call SetCellValue(Cells(7, 7), GlobalX4Mess.Range("solver_pop6").Text)
    Call SetCellValue(Cells(8, 7), GlobalX4Mess.Range("solver_pop8").Text)
    Call SetCellValue(Cells(7, 8), GlobalX4Mess.Range("solver_pop7").Text)
    Call SetCellValue(Cells(8, 8), GlobalX4Mess.Range("solver_pop8").Text)
    Range("$B$7:$H$" & Trim(Str(8 + adjusts))).AutoFormat format:=12
    ' constraint section
    Call SetCellValue(Cells(10 + adjusts, 1), GlobalX4Mess.Range("solver_msg_95").Text)
    If constraints > 0 Then
      Call SetCellValue(Cells(12 + adjusts, 2), GlobalX4Mess.Range("solver_msg_96").Text)
      Call SetCellValue(Cells(12 + adjusts, 3), GlobalX4Mess.Range("solver_msg_97").Text)
      Call SetCellValue(Cells(11 + adjusts, 4), GlobalX4Mess.Range("solver_pop3").Text)
      Call SetCellValue(Cells(12 + adjusts, 4), GlobalX4Mess.Range("solver_pop8").Text)
      Call SetCellValue(Cells(11 + adjusts, 5), GlobalX4Mess.Range("solver_pop4").Text)
      Call SetCellValue(Cells(12 + adjusts, 5), GlobalX4Mess.Range("solver_pop8").Text)
      Call SetCellValue(Cells(11 + adjusts, 6), GlobalX4Mess.Range("solver_pop5").Text)
      Call SetCellValue(Cells(12 + adjusts, 6), GlobalX4Mess.Range("solver_pop5a").Text)
      Call SetCellValue(Cells(11 + adjusts, 7), GlobalX4Mess.Range("solver_pop6").Text)
      Call SetCellValue(Cells(12 + adjusts, 7), GlobalX4Mess.Range("solver_pop8").Text)
      Call SetCellValue(Cells(11 + adjusts, 8), GlobalX4Mess.Range("solver_pop7").Text)
      Call SetCellValue(Cells(12 + adjusts, 8), GlobalX4Mess.Range("solver_pop8").Text)
      Range("$B$" & Trim(Str(11 + adjusts)) & ":$H$" & Trim(Str(12 + adjusts + constraints))).AutoFormat format:=12
    Else
       Call SetCellValue(Cells(11 + adjusts, 2), GlobalX4Mess.Range("solver_msg_110").Text)
    End If
    ' fill in vars
    Worksheets(GlobalSheetName).Activate
    For i = 1 To adjusts
       Set c = Range(Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + i, colind).Formula, xlR1C1, xlA1), 2))
       If i Mod 10 = 0 Then
          Application.StatusBar = GlobalX4Mess.Range("solver_pop1").Text & "   " & Str(Int(100 * (i / (adjusts + constraints)))) & "% done."
       End If
       Worksheets(newsheet).Activate
       Call SetCellValue(Cells(8 + i, 2), c.Address(ReferenceStyle:=GlobalR1C1))
       Call SetCellValue(Cells(8 + i, 3), Formname(c.Address, GlobalSheetName))
       Call SetCellValue(Cells(8 + i, 4), newvars(i))
       Cells(8 + i, 4).NumberFormat = GlobalOldVarFormats(i)
       Call SetCellValue(Cells(8 + i, 5), GlobalX4Sheet.Cells(rowind + i, colind + 5).Value)
       Cells(8 + i, 5).NumberFormat = GlobalOldVarFormats(i)
       Call SetCellValue(Cells(8 + i, 6), GlobalX4Sheet.Cells(rowind + i, colind + 6).Value)
       Call SetCellValue(Cells(8 + i, 7), GlobalX4Sheet.Cells(rowind + i, colind + 7).Value)
       Call SetCellValue(Cells(8 + i, 8), GlobalX4Sheet.Cells(rowind + i, colind + 8).Value)
       Worksheets(GlobalSheetName).Activate
    Next
    Worksheets(newsheet).Activate
    ' fill in constraints
    For i = 1 To constraints
       If i Mod 10 = 0 Then
          Application.StatusBar = GlobalX4Mess.Range("solver_pop1").Text & "   " & Int(100 * ((i + adjusts) / (adjusts + constraints))) & "% done."
       End If
       If GlobalR1C1 = xlA1 Then
          thestring = Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + adjusts + i, colind).Formula, xlR1C1, xlA1), 2)
       Else
          thestring = GlobalX4Sheet.Cells(rowind + adjusts + i, colind).Formula
       End If
       Call SetCellValue(Cells(12 + adjusts + i, 2), thestring)
       Call SetCellValue(Cells(12 + adjusts + i, 3), Formname(thestring, GlobalSheetName))
       Call SetCellValue(Cells(12 + adjusts + i, 4), Worksheets(GlobalSheetName).Range(Stylecheck(thestring)).Value)
       Cells(12 + adjusts + i, 4).NumberFormat = Worksheets(GlobalSheetName).Range(Stylecheck(thestring)).NumberFormat
       Call SetCellValue(Cells(12 + adjusts + i, 5), GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 5))
       Cells(12 + adjusts + i, 5).NumberFormat = Worksheets(GlobalSheetName).Range(Stylecheck(thestring)).NumberFormat
       Call SetCellValue(Cells(12 + adjusts + i, 6), GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 6))
       Call SetCellValue(Cells(12 + adjusts + i, 7), GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 7))
       Call SetCellValue(Cells(12 + adjusts + i, 8), GlobalX4Sheet.Cells(rowind + adjusts + i, colind + 8))
    Next
    Columns("B:H").AutoFit
'    Columns("D:H").HorizontalAlignment = xlCenter
    If GlobalOutline Then
       Dim OutlineCounter As Integer, BlockSize As Integer
       Dim StartAddress As String, FinishAddress As String
       Dim StartLink As Integer, TheTitle As String
       Dim Inserts As Integer, Counter As Integer
       ' outline variables
       OutlineCounter = 1
       Inserts = 0
       Counter = 0
       ReDim outlines1(0) As Integer
       ReDim outlines2(0) As Integer
       Do While OutlineCounter <= adjusts
           StartLink = GlobalX4Sheet.Cells(rowind + OutlineCounter, colind - 1)
           StartAddress = Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + OutlineCounter, colind).Formula, xlR1C1, xlA1), 2)
           BlockSize = 0
           Do
             OutlineCounter = OutlineCounter + 1
             BlockSize = BlockSize + 1
           Loop Until GlobalX4Sheet.Cells(rowind + OutlineCounter, colind - 1) <> StartLink Or OutlineCounter > adjusts
           FinishAddress = Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + OutlineCounter - 1, colind).Formula, xlR1C1, xlA1), 2)
           If BlockSize > 2 Then
              TheTitle = GetName(StartAddress & ":" & FinishAddress)
              ' insert title
              Rows(8 + Inserts + OutlineCounter - BlockSize).Insert Shift:=xlDown
              Rows(8 + Inserts + OutlineCounter + 1).Insert Shift:=xlDown
              Call SetCellValue(Cells(8 + Inserts + OutlineCounter - BlockSize, 2), TheTitle)
              Cells(8 + Inserts + OutlineCounter - BlockSize, 2).Font.ColorIndex = xlAutomatic
              Cells(8 + Inserts + OutlineCounter - BlockSize, 2).Font.Bold = True
              Cells(8 + Inserts + OutlineCounter - BlockSize, 2).HorizontalAlignment = xlLeft
              ReDim Preserve outlines1(0 To Counter)
              ReDim Preserve outlines2(0 To Counter)
              outlines1(Counter) = 8 + Inserts + OutlineCounter - BlockSize + 1
              outlines2(Counter) = 8 + Inserts + OutlineCounter
              Inserts = Inserts + 2
              Counter = Counter + 1
              ' group rows
           End If
       Loop
       For i = 0 To Counter - 1
          Range(Cells(outlines1(i), 2), Cells(outlines2(i), 2)).Rows.Group
       Next
       ' outline constraints & bounds
       Counter = 0
       ReDim outlines1(1 To 1) As Integer
       ReDim outlines2(1 To 1) As Integer
       Do While OutlineCounter <= adjusts + constraints
           StartLink = GlobalX4Sheet.Cells(rowind + OutlineCounter, colind - 1)
           StartAddress = Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + OutlineCounter, colind).Formula, xlR1C1, xlA1), 2)
           BlockSize = 0
           Do
             OutlineCounter = OutlineCounter + 1
             BlockSize = BlockSize + 1
           Loop Until GlobalX4Sheet.Cells(rowind + OutlineCounter, colind - 1) <> StartLink Or OutlineCounter > adjusts + constraints
           FinishAddress = Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + OutlineCounter - 1, colind).Formula, xlR1C1, xlA1), 2)
           If BlockSize > 2 Then
              TheTitle = GetName(StartAddress & ":" & FinishAddress)
              Select Case GlobalX4Sheet.Cells(rowind + OutlineCounter - 1, colind + 1).Value
              Case 1
                TheTitle = TheTitle & " <= "
              Case 2
                 TheTitle = TheTitle & " = "
              Case 3
                 TheTitle = TheTitle & " >= "
              Case 4
                 TheTitle = TheTitle & " = " & GlobalX4Mess.Range("solver_msg_int").Formula
              Case 5
                 TheTitle = TheTitle & " = " & GlobalX4Mess.Range("solver_msg_bin").Formula
              Case 6
                 TheTitle = TheTitle & " = " & GlobalX4Mess.Range("solver_msg_dif").Formula
              End Select
              With ThisWorkbook.DialogSheets("solver_dialog").ListBoxes("Constraint_list")
              For i = 1 To .ListCount
                 If Left(.List(i), Len(TheTitle)) = TheTitle Then
                    TheTitle = .List(i)
                    Exit For
                 End If
              Next
              End With
              ' insert title
              Rows(12 + Inserts + OutlineCounter - BlockSize).Insert Shift:=xlDown
              Rows(12 + Inserts + OutlineCounter + 1).Insert Shift:=xlDown
              Call SetCellValue(Cells(12 + Inserts + OutlineCounter - BlockSize, 2), TheTitle)
              Cells(12 + Inserts + OutlineCounter - BlockSize, 2).Font.ColorIndex = xlAutomatic
              Cells(12 + Inserts + OutlineCounter - BlockSize, 2).Font.Bold = True
              Cells(12 + Inserts + OutlineCounter - BlockSize, 2).HorizontalAlignment = xlLeft
              Inserts = Inserts + 2
              Counter = Counter + 1
              ReDim Preserve outlines1(1 To Counter)
              ReDim Preserve outlines2(1 To Counter)
              outlines1(Counter) = 10 + Inserts + OutlineCounter - BlockSize + 1
              outlines2(Counter) = 10 + Inserts + OutlineCounter
              ' group rows
           End If
       Loop
       For i = 1 To Counter
          Range(Cells(outlines1(i), 2), Cells(outlines2(i), 2)).Rows.Group
       Next
       ActiveSheet.Outline.ShowLevels RowLevels:=1
    End If
    ActiveWindow.ScrollRow = 1
    Range("$A$1").Select
    Worksheets(GlobalSheetName).Activate
    Application.StatusBar = False
    Application.ScreenUpdating = suSav
    Application.Calculation = iCalc
    On Error GoTo 0
    Exit Sub
handleCancel:
    If Err = 18 Then
       Quit_report
    Else
       DisplayMessage "solver_err_msg", 1830, 0
       End
    End If
End Sub

Public Sub Do_Limits()
    ' create limits report
    Dim i As Integer, newobj As Double, c, rowind As Double, colind As Integer, j As Integer
    Dim constraints As Integer, constbnds As Integer, adjusts As Integer, limcount As Integer
    Dim freshobj As Variant, newvar As Double, newvars() As Double, solver_opt As String, solver_adj As String
    Dim newsheet As String, solver_sho As String, dmy As Integer
    Dim ii As Integer, sh
    Dim suSav As Boolean, iCalc
    suSav = Application.ScreenUpdating
    iCalc = Application.Calculation
    Application.Calculation = xlCalculationManual
    If Not IsNumeric(GlobalX4Sheet.Range("solver_tbl").Value) Then
       DisplayMessage "solver_msg_47", 1830, 0
       Exit Sub
    Else
       Application.ScreenUpdating = False
       newobj = 0
       On Error Resume Next
       newobj = Range(Mid(CStr(ActiveSheet.Names("solver_opt")), 2)).Value
       On Error GoTo 0
       rowind = GlobalX4Sheet.Range("solver_tbl").Row
       colind = GlobalX4Sheet.Range("solver_tbl").Column
       adjusts = GlobalX4Sheet.Cells(rowind, colind).Value
       constraints = GlobalX4Sheet.Cells(rowind, colind + 1).Value
       constbnds = constraints + GlobalX4Sheet.Cells(rowind, colind + 2).Value
       colind = colind + 1 ' necessary for outlining
       ReDim newvars(adjusts)
       For i = 1 To adjusts
           newvars(i) = Range(Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + i, colind).Formula, xlR1C1, xlA1), 2)).Value
       Next
    End If
    Application.StatusBar = GlobalX4Mess.Range("solver_msg_111").Text
    If GlobalOutline Then
       Dim OutlineCounter As Integer, BlockSize As Integer
       Dim StartAddress As String, FinishAddress As String
       Dim StartLink As Integer, TheTitle As String
       Dim Inserts As Integer, Counter As Integer
       ' outline variables
       OutlineCounter = 1
       Inserts = 0
       Counter = 0
       ReDim outlines1(0) As Integer
       ReDim outlines2(0) As Integer
       ReDim InsertPlaces(0) As Integer
       ReDim InsertPlaces2(0) As Integer
       ReDim TheTitles(0) As String
       Do While OutlineCounter <= adjusts
           StartLink = GlobalX4Sheet.Cells(rowind + OutlineCounter, colind - 1)
           StartAddress = Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + OutlineCounter, colind).Formula, xlR1C1, xlA1), 2)
           BlockSize = 0
           Do
             OutlineCounter = OutlineCounter + 1
             BlockSize = BlockSize + 1
           Loop Until GlobalX4Sheet.Cells(rowind + OutlineCounter, colind - 1) <> StartLink Or OutlineCounter > adjusts
           FinishAddress = Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + OutlineCounter - 1, colind).Formula, xlR1C1, xlA1), 2)
           If BlockSize > 2 Then
              TheTitle = GetName(StartAddress & ":" & FinishAddress)
              ' insert title
              ReDim Preserve InsertPlaces(0 To Counter)
              ReDim Preserve InsertPlaces2(0 To Counter)
              ReDim Preserve TheTitles(0 To Counter)
              ReDim Preserve outlines1(0 To Counter)
              ReDim Preserve outlines2(0 To Counter)
              InsertPlaces(Counter) = 12 + Inserts + OutlineCounter - BlockSize
              InsertPlaces2(Counter) = 12 + Inserts + OutlineCounter + 1
              TheTitles(Counter) = TheTitle
              outlines1(Counter) = 12 + Inserts + OutlineCounter - BlockSize + 1
              outlines2(Counter) = 12 + Inserts + OutlineCounter
              Inserts = Inserts + 2
              Counter = Counter + 1
              ' group rows
           End If
       Loop
    End If
    ActiveWorkbook.Worksheets.Add
    ActiveWindow.DisplayGridlines = False
    On Error Resume Next
    Err = 0
    limcount = 1
givename:
    ActiveSheet.Name = GlobalX4Mess.Range("solver_msg_112").Text & " " & Trim(Str(limcount))
    If Err > 0 Then
       Err = 0
       limcount = limcount + 1
       GoTo givename
    End If
    Range("$A$1:$A$3").Select
    Selection.ColumnWidth = 1.5
    Selection.Font.Bold = True
    newsheet = ActiveSheet.Name
    Call SetCellValue(Cells(1, 1), GlobalX4Mess.Range("solver_msg_49").Text & " " & Application.Version & " " & GlobalX4Mess.Range("solver_msg_112").Text)
    Call SetCellValue(Cells(2, 1), GlobalX4Mess.Range("solver_msg_51").Text & " [" & ActiveWorkbook.Name & "]" & GlobalSheetName)
    Call SetCellValue(Cells(3, 1), GlobalX4Mess.Range("solver_msg_52").Text & " " & Now)
    ' target section
    Call SetCellValue(Cells(7, 2), GlobalX4Mess.Range("solver_msg_113").Text)
    Call SetCellValue(Cells(6, 3), GlobalX4Mess.Range("solver_msg_114").Text)
    Call SetCellValue(Cells(7, 3), GlobalX4Mess.Range("solver_msg_115").Text)
    Call SetCellValue(Cells(7, 4), GlobalX4Mess.Range("solver_msg_116").Text)
    Range("$B$6:$D$8").AutoFormat format:=12
    ' adjustable section
    Call SetCellValue(Cells(12, 2), GlobalX4Mess.Range("solver_msg_117").Text)
    Call SetCellValue(Cells(11, 3), GlobalX4Mess.Range("solver_msg_118").Text)
    Call SetCellValue(Cells(12, 3), GlobalX4Mess.Range("solver_msg_119").Text)
    Call SetCellValue(Cells(12, 4), GlobalX4Mess.Range("solver_msg_120").Text)
    Range("$B$11:$D$" & Trim(Str(11 + adjusts + 1))).AutoFormat format:=12
    Cells(12, 5).ColumnWidth = 1.5
    Call SetCellValue(Cells(11, 6), GlobalX4Mess.Range("solver_msg_121").Text)
    Call SetCellValue(Cells(12, 6), GlobalX4Mess.Range("solver_msg_122").Text)
    Call SetCellValue(Cells(11, 7), GlobalX4Mess.Range("solver_msg_123").Text)
    Call SetCellValue(Cells(12, 7), GlobalX4Mess.Range("solver_msg_124").Text)
    Range("$F$11:$G$" & Trim(Str(11 + adjusts + 1))).AutoFormat format:=12
    Cells(12, 8).ColumnWidth = 1.5
    Call SetCellValue(Cells(11, 9), GlobalX4Mess.Range("solver_msg_125").Text)
    Call SetCellValue(Cells(12, 9), GlobalX4Mess.Range("solver_msg_126").Text)
    Call SetCellValue(Cells(11, 10), GlobalX4Mess.Range("solver_msg_127").Text)
    Call SetCellValue(Cells(12, 10), GlobalX4Mess.Range("solver_msg_128").Text)
    Range("$I$11:$J$" & Trim(Str(11 + adjusts + 1))).AutoFormat format:=12
    ' fill in target
    solver_opt = ""
    On Error Resume Next
    Worksheets(GlobalSheetName).Activate
    solver_opt = Mid(CStr(ActiveSheet.Names("solver_opt")), 2)
    solver_adj = Mid(CStr(ActiveSheet.Names("solver_adj")), 2)
    solver_sho = Mid(CStr(ActiveSheet.Names("solver_sho")), 2)
    Worksheets(newsheet).Activate
    On Error GoTo handleCancel
    Application.EnableCancelKey = xlErrorHandler
    If solver_opt = "" Then
       Call SetCellValue(Cells(8, 2), GlobalX4Mess.Range("solver_msg_129").Text)
       Call SetCellValue(Cells(8, 4), 0)
    Else
       Call SetCellValue(Cells(8, 2), Range(Stylecheck(solver_opt)).Address(ReferenceStyle:=GlobalR1C1))
       Call SetCellValue(Cells(8, 3), Formname(Range(Stylecheck(solver_opt)).Address, GlobalSheetName))
       Call SetCellValue(Cells(8, 4), newobj)
       Cells(8, 4).NumberFormat = GlobalOldObjFormat
    End If
    ' adjustable section
    Application.Calculate
    i = 1
    ActiveSheet.Names.Add Name:="solver_sho", RefersToLocal:=2, Visible:=False
    Worksheets(GlobalSheetName).Activate
    ReDim thec(1 To adjusts)
    For ii = 1 To adjusts
      thec(ii) = Range(Mid(Application.ConvertFormula("=" & GlobalX4Sheet.Cells(rowind + ii, colind).Formula, xlR1C1, xlA1), 2)).Address(external:=True)
    Next
    For ii = 1 To UBound(thec)
      Set c = Range(thec(ii))
      Worksheets(newsheet).Activate
      GoSub limitheart
      Worksheets(GlobalSheetName).Activate
    Next
    ActiveSheet.Names.Add Name:="solver_typ", RefersToLocal:=GlobalTyp, Visible:=False
    ActiveSheet.Names.Add Name:="solver_sho", RefersToLocal:=solver_sho, Visible:=False
    If solver_opt <> "" Then
       ActiveSheet.Names.Add Name:="solver_opt", RefersTo:="=" & solver_opt, Visible:=False
    End If
    If solver_adj <> "" Then
       ActiveSheet.Names.Add Name:="solver_adj", RefersTo:="=" & solver_adj, Visible:=False
    End If
    On Error Resume Next

    Worksheets("Limits Report " & Trim(Str(limcount))).Activate
    Columns("B:D").AutoFit
    Columns("F:G").AutoFit
    Columns("I:J").AutoFit
'    Columns("D:J").HorizontalAlignment = xlCenter
    If GlobalOutline Then
       For i = 0 To Counter
          Rows(InsertPlaces(i)).Insert Shift:=xlDown
          Rows(InsertPlaces2(i)).Insert Shift:=xlDown
          Call SetCellValue(Cells(InsertPlaces(i), 2), TheTitles(i))
          Cells(InsertPlaces(i), 2).Font.ColorIndex = xlAutomatic
          Cells(InsertPlaces(i), 2).Font.Bold = True
          Cells(InsertPlaces(i), 2).HorizontalAlignment = xlLeft
       Next
       For i = 0 To Inserts - 1
          Range(Cells(outlines1(i), 2), Cells(outlines2(i), 2)).Rows.Group
       Next
       ActiveSheet.Outline.ShowLevels RowLevels:=1
    End If
    ActiveWindow.ScrollRow = 1
    Range("$A$1").Select
    Worksheets(GlobalSheetName).Activate
    ActiveSheet.Name = GlobalSheetName
    Application.StatusBar = False
    Application.ScreenUpdating = suSav
    Application.Calculation = iCalc
    Exit Sub
handleCancel:
    If Err = 18 Then
       Quit_limits
    Else
       DisplayMessage "solver_err_msg", 1830, 0
       End
    End If
    Exit Sub
limitheart:
       If SolverCls Is Nothing Then
          Set SolverCls = New SolverCalls
       End If
       Call SetCellValue(Cells(12 + i, 2), c.Address(ReferenceStyle:=GlobalR1C1))
       Call SetCellValue(Cells(12 + i, 3), Formname(c.Address, GlobalSheetName))
       Call SetCellValue(Cells(12 + i, 4), newvars(i))
       Cells(12 + i, 4).NumberFormat = GlobalOldVarFormats(i)
       Worksheets(GlobalSheetName).Activate
       ActiveSheet.Names.Add Name:="solver_adj", RefersTo:="=" & c.Address, Visible:=False
       On Error Resume Next
       ActiveSheet.Names.Add Name:="solver_opt", RefersTo:="=" & c.Address, Visible:=False
       ActiveSheet.Names.Add Name:="solver_typ", RefersToLocal:=2, Visible:=False
       GlobalAnswer = SolverCls.Solve(3)
       On Error GoTo handleCancel
       newvar = Range(c.Address).Value
       freshobj = CVErr(xlErrNA)
       On Error Resume Next
       If solver_opt <> "" Then
          freshobj = Range(Stylecheck(solver_opt)).Value
       Else
          freshobj = 0
       End If
       On Error GoTo handleCancel
       Worksheets(newsheet).Activate
       If GlobalAnswer <= 2 Then
          Call SetCellValue(Cells(12 + i, 6), newvar)
          Cells(12 + i, 6).NumberFormat = GlobalOldVarFormats(i)
          Call SetCellValue(Cells(12 + i, 7), freshobj)
          Cells(12 + i, 7).NumberFormat = GlobalOldVarFormats(i)
       Else
          Call SetCellValue(Cells(12 + i, 6), GlobalX4Mess.Range("solver_msg_130").Text)
          Call SetCellValue(Cells(12 + i, 7), GlobalX4Mess.Range("solver_msg_130").Text)
       End If
       Worksheets(GlobalSheetName).Activate
       ActiveSheet.Names.Add Name:="solver_typ", RefersToLocal:=1, Visible:=False
       On Error Resume Next
       Application.DisplayAlerts = False
       GlobalAnswer = SolverCls.Solve(3)
       On Error GoTo handleCancel
       Application.DisplayAlerts = True
       newvar = Range(c.Address).Value
       If solver_opt <> "" Then
          freshobj = Range(Stylecheck(solver_opt)).Value
       Else
          freshobj = 0
       End If
       Range(c.Address).Value = newvars(i)
       Worksheets(newsheet).Activate
       If GlobalAnswer <= 2 Then
          Call SetCellValue(Cells(12 + i, 9), newvar)
          Cells(12 + i, 9).NumberFormat = GlobalOldVarFormats(i)
          Call SetCellValue(Cells(12 + i, 10), freshobj)
          Cells(12 + i, 10).NumberFormat = GlobalOldVarFormats(i)
       Else
          Call SetCellValue(Cells(12 + i, 9), GlobalX4Mess.Range("solver_msg_130").Text)
          Call SetCellValue(Cells(12 + i, 10), GlobalX4Mess.Range("solver_msg_130").Text)
       End If
       i = i + 1
       Worksheets(GlobalSheetName).Activate
       Application.Calculate
       Return
End Sub

Public Sub Quit_limits()
    ' user escaped out of limit report
    DisplayMessage "solver_msg_76", 1830, 0
    Worksheets(GlobalSheetName).Activate
    DefineModel
    'Define_names
    Application.StatusBar = False
    Application.EnableCancelKey = xlDisabled
End Sub

Function SolvAdd(CellRef As Variant, Relation As Integer, Optional FormulaText As Variant) As Variant
    If (Not ReadyForMacros()) Then
        SolvAdd = CVErr(xlErrValue)
        Exit Function
    End If
    
    On Error GoTo errorhandling
    Dim rememberscreen, dummy
    rememberscreen = Application.ScreenUpdating
    Application.ScreenUpdating = False
    SetGlobals
    If ActiveSheet.Type <> xlWorksheet Or ActiveSheet.ProtectContents Then
        SolvAdd = CVErr(xlErrValue)
        Application.ScreenUpdating = rememberscreen
        Exit Function
    End If
    On Error GoTo mainerror
    If IsMissing(CellRef) Or IsError(CellRef) Then
       SolvAdd = 1
       Application.ScreenUpdating = rememberscreen
       Exit Function
    Else
       On Error Resume Next
       If TypeName(CellRef) = "Range" And Not IsCellReference(Stylecheck(CStr(CellRef))) Then
          CellRef = CellRef.Address
       End If
       CellRef = CStr(CellRef)
       CellRef = Stylecheck(CellRef)
       On Error GoTo mainerror
    End If
    If IsMissing(Relation) Or IsError(Relation) Then
       SolvAdd = 2
       Application.ScreenUpdating = rememberscreen
       Exit Function
    End If
    If Not IsCellReference(CellRef) Then
       SolvAdd = 1
       Application.ScreenUpdating = rememberscreen
       Exit Function
    End If
    If Not IsNumeric(Relation) Then
       SolvAdd = 2
       Application.ScreenUpdating = rememberscreen
       Exit Function
    End If
    If Relation < 1 Or Relation > 6 Then
       SolvAdd = 2
       Application.ScreenUpdating = rememberscreen
       Exit Function
    End If
    If Relation < 4 Then
       If IsMissing(FormulaText) Or IsError(FormulaText) Then
          SolvAdd = 3
          Application.ScreenUpdating = rememberscreen
          Exit Function
       Else
          If "." <> Application.International(xlDecimalSeparator) Then
             dummy = InStr(FormulaText, Application.International(xlDecimalSeparator))
             Do While dummy <> 0
                Mid(FormulaText, dummy, 1) = "."
                dummy = InStr(FormulaText, Application.International(xlDecimalSeparator))
             Loop
          End If
          If Not IsNumeric(FormulaText) Then
             On Error Resume Next
             If TypeName(FormulaText) = "Range" And Not IsCellReference(Stylecheck(CStr(FormulaText))) Then
                FormulaText = FormulaText.Address
             End If
             FormulaText = CStr(FormulaText)
             FormulaText = Stylecheck(FormulaText)
             On Error GoTo mainerror
          Else
             FormulaText = CDbl(FormulaText)
          End If
       End If
    End If
    If Relation > 3 Then
       On Error Resume Next
       If Range(ActiveSheet.Names("solver_adj").Name).Count <> Union(Range(CellRef), Range(ActiveSheet.Names("solver_adj").Name)).Count Then
          SolvAdd = 1
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    Dim solver_num As Integer
    On Error Resume Next
    solver_num = Mid(CStr(ActiveSheet.Names("solver_num")), 2)
    On Error GoTo mainerror
    If Relation > 3 Then
       With ActiveSheet.Names
       .Add Name:="solver_lhs" & Trim(Str(solver_num + 1)), RefersTo:="=" & Range(CellRef).Address, Visible:=False
       .Add Name:="solver_rel" & Trim(Str(solver_num + 1)), RefersTo:=Relation, Visible:=False
       .Add Name:="solver_num", RefersTo:=solver_num + 1, Visible:=False
       If Relation = 4 Then
          .Add Name:="solver_rhs" & Trim(Str(solver_num + 1)), RefersTo:="=""" & EscapeQuotes(GlobalX4Mess.Range("solver_msg_int").Formula) & """", Visible:=False
       ElseIf Relation = 5 Then
          .Add Name:="solver_rhs" & Trim(Str(solver_num + 1)), RefersTo:="=""" & EscapeQuotes(GlobalX4Mess.Range("solver_msg_bin").Formula) & """", Visible:=False
       Else
          .Add Name:="solver_rhs" & Trim(Str(solver_num + 1)), RefersTo:="=""" & EscapeQuotes(GlobalX4Mess.Range("solver_msg_dif").Formula) & """", Visible:=False
       End If
       End With
       Application.ScreenUpdating = rememberscreen
       SolvAdd = 0
       Exit Function
    End If
    If IsCellReference(FormulaText) Then
       If Range(FormulaText).Count > 1 And Range(FormulaText).Count <> Range(CellRef).Count Then
          SolvAdd = 3
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    Else
       If Not IsNumeric(Application.Evaluate(FormulaText)) Then
          SolvAdd = 3
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    If Left(FormulaText, 1) <> "=" Then
       FormulaText = "=" & FormulaText
    End If
    With ActiveSheet.Names
    .Add Name:="solver_lhs" & Trim(Str(solver_num + 1)), RefersTo:="=" & Range(CellRef).Address, Visible:=False
    .Add Name:="solver_rel" & Trim(Str(solver_num + 1)), RefersTo:=Relation, Visible:=False
    .Add Name:="solver_rhs" & Trim(Str(solver_num + 1)), RefersTo:=FormulaText, Visible:=False
    .Add Name:="solver_num", RefersTo:=solver_num + 1, Visible:=False
    End With
    Application.ScreenUpdating = rememberscreen
    SolvAdd = 0
    Exit Function
mainerror:
    MsgBoxW GlobalX4Mess.Range("solver_err_msg").Text, 32, , GlobalHelpfile, 1830
    End
errorhandling:
   SolvAdd = CVErr(xlErrValue)
End Function

Function SolvChange(CellRef As Variant, Relation As Integer, Optional FormulaText As Variant) As Variant
    If (Not ReadyForMacros()) Then
        SolvChange = CVErr(xlErrValue)
        Exit Function
    End If
    
    Dim matches As Long, i As Long, remember As Long
    Dim rememberscreen, dummy
    rememberscreen = Application.ScreenUpdating
    Application.ScreenUpdating = False
    On Error GoTo errorhandling
    SetGlobals
    If ActiveSheet.Type <> xlWorksheet Or ActiveSheet.ProtectContents Then
        SolvChange = CVErr(xlErrValue)
        Application.ScreenUpdating = rememberscreen
        Exit Function
    End If
    On Error GoTo mainerror
    If IsMissing(CellRef) Or IsError(CellRef) Then
       SolvChange = 1
       Application.ScreenUpdating = rememberscreen
       Exit Function
    Else
       On Error Resume Next
       If TypeName(CellRef) = "Range" And Not IsCellReference(Stylecheck(CStr(CellRef))) Then
          CellRef = CellRef.Address
       End If
       CellRef = CStr(CellRef)
       CellRef = Stylecheck(CellRef)
       On Error GoTo mainerror
    End If
    If IsMissing(Relation) Or IsError(Relation) Then
       SolvChange = 2
       Application.ScreenUpdating = rememberscreen
       Exit Function
    End If
    If Not IsCellReference(CellRef) Then
       SolvChange = 1
       Application.ScreenUpdating = rememberscreen
       Exit Function
    End If
    If Not IsNumeric(Relation) Then
       SolvChange = 2
       Application.ScreenUpdating = rememberscreen
       Exit Function
    End If
    If Relation < 1 Or Relation > 6 Then
       SolvChange = 2
       Application.ScreenUpdating = rememberscreen
       Exit Function
    End If
    If Relation < 4 Then
       If IsMissing(FormulaText) Or IsError(FormulaText) Then
          SolvChange = 3
          Application.ScreenUpdating = rememberscreen
          Exit Function
       Else
         On Error Resume Next
         If "." <> Application.International(xlDecimalSeparator) Then
             dummy = InStr(FormulaText, Application.International(xlDecimalSeparator))
             Do While dummy <> 0
                Mid(FormulaText, dummy, 1) = "."
                dummy = InStr(FormulaText, Application.International(xlDecimalSeparator))
             Loop
         End If
         If TypeName(FormulaText) = "Range" And Not IsCellReference(CStr(FormulaText)) Then
            FormulaText = FormulaText.Address
         End If
         FormulaText = CStr(FormulaText)
         FormulaText = Stylecheck(FormulaText)
         On Error GoTo mainerror
       End If
    End If
    If Relation > 3 Then
       On Error Resume Next
       If Range(ActiveSheet.Names("solver_adj").Name).Count <> Union(Range(CellRef), Range(ActiveSheet.Names("solver_adj").Name)).Count Then
          SolvChange = 1
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    Dim solver_num As Integer
    On Error Resume Next
    solver_num = Mid(CStr(ActiveSheet.Names("solver_num")), 2)
    On Error GoTo mainerror
    If IsCellReference(FormulaText) Then
       If Range(FormulaText).Count > 1 And Range(FormulaText).Count <> Range(CellRef).Count Then
          SolvChange = 3
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    Else
       If Not IsNumeric(Application.Evaluate(FormulaText)) Then
          SolvChange = 3
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    If Left(FormulaText, 1) <> "=" Then
       FormulaText = "=" & FormulaText
    End If
    matches = 0
    For i = 1 To solver_num
       If Range(CellRef).Address = Range(Mid(CStr(ActiveSheet.Names("solver_lhs" & Trim(Str(i)))), 2 _
          )).Address And Relation = Mid(CStr(ActiveSheet.Names("solver_rel" & Trim(Str(i)))), 2) Then
          matches = matches + 1
          If matches = 1 Then
             remember = i
          End If
       End If
       If matches > 1 Then
          SolvChange = 4
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    Next
    If matches = 0 Then
       SolvChange = 4
       Application.ScreenUpdating = rememberscreen
       Exit Function
    End If
    
    ActiveSheet.Names.Add Name:="solver_rhs" & Trim(Str(remember)), RefersTo:=FormulaText, Visible:=False
    
    SolvChange = 0
    Application.ScreenUpdating = rememberscreen
    Exit Function
mainerror:
    MsgBoxW GlobalX4Mess.Range("solver_err_msg").Text, 32, , GlobalHelpfile, 1830
    End
errorhandling:
   SolvChange = CVErr(xlErrValue)
End Function

Function SolvDelete(CellRef As Variant, Relation As Integer, Optional FormulaText As Variant) As Variant
    If (Not ReadyForMacros()) Then
        SolvDelete = CVErr(xlErrValue)
        Exit Function
    End If

    Dim remember As Long, matches As Long, i As Long, stringmatch As String, the_right As String
    Dim rememberscreen, j As Long
    On Error GoTo errorhandling
    rememberscreen = Application.ScreenUpdating
    Application.ScreenUpdating = False
    SetGlobals
    If ActiveSheet.Type <> xlWorksheet Or ActiveSheet.ProtectContents Then
        SolvDelete = CVErr(xlErrValue)
        Application.ScreenUpdating = rememberscreen
        Exit Function
    End If
    On Error GoTo mainerror
    If IsMissing(CellRef) Or IsError(CellRef) Then
       SolvDelete = 1
       Application.ScreenUpdating = rememberscreen
       Exit Function
    Else
       On Error Resume Next
       If TypeName(CellRef) = "Range" And Not IsCellReference(Stylecheck(CStr(CellRef))) Then
          CellRef = CellRef.Address
       End If
       CellRef = CStr(CellRef)
       CellRef = Stylecheck(CellRef)
       On Error GoTo mainerror
    End If
    If IsMissing(Relation) Or IsError(Relation) Then
       SolvDelete = 2
       Application.ScreenUpdating = rememberscreen
       Exit Function
    End If
    If Not IsCellReference(CellRef) Then
       SolvDelete = 1
       Application.ScreenUpdating = rememberscreen
       Exit Function
    End If
    If Not IsNumeric(Relation) Then
       SolvDelete = 2
       Application.ScreenUpdating = rememberscreen
       Exit Function
    End If
    If Relation < 1 Or Relation > 6 Then
       SolvDelete = 2
       Application.ScreenUpdating = rememberscreen
       Exit Function
    End If
    If Relation > 3 Then
       'On Error Resume Next
       If Range(ActiveSheet.Names("solver_adj").Name).Count <> Union(Range(CellRef), Range(ActiveSheet.Names("solver_adj").Name)).Count Then
          SolvDelete = 1
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    Dim solver_num As Integer
    On Error Resume Next
    solver_num = Mid(CStr(ActiveSheet.Names("solver_num")), 2)
    On Error GoTo mainerror
    remember = 0
    matches = 0
    If IsMissing(FormulaText) Or IsError(FormulaText) Then
       For i = 1 To solver_num
          If Range(CellRef).Address = Range(Mid(CStr(ActiveSheet.Names("solver_lhs" & Trim(Str(i)))), 2 _
             )).Address And Relation = Mid(CStr(ActiveSheet.Names("solver_rel" & Trim(Str(i)))), 2) Then
             matches = matches + 1
             If matches = 1 Then
                remember = i
             End If
          End If
          If matches > 1 Then
             SolvDelete = 4
             Application.ScreenUpdating = rememberscreen
             Exit Function
          End If
       Next
       If matches = 0 Then
          SolvDelete = 4
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    Else
       On Error Resume Next
       If TypeName(FormulaText) = "Range" And Not IsCellReference(Stylecheck(CStr(FormulaText))) Then
          FormulaText = FormulaText.Address
       End If
       FormulaText = CStr(FormulaText)
       FormulaText = Stylecheck(FormulaText)
       On Error GoTo mainerror
       If IsCellReference(FormulaText) Then
          stringmatch = Range(CellRef).Address & Relation & Range(FormulaText).Address
       Else
          stringmatch = Range(CellRef).Address & Relation & FormulaText
       End If
       For i = 1 To solver_num
         the_right = Mid(CStr(ActiveSheet.Names("solver_rhs" & Trim(Str(i)))), 2)
         If Not IsNumeric(the_right) Then
            On Error Resume Next
            Err = 0
            the_right = GetName(Range(the_right).Address)
            If Err > 0 Then
               ' formula
               j = InStr(the_right, ActiveSheet.Name)
               If j <> 0 Then
                  If InStr(the_right, "'" & ActiveSheet.Name & "'!") <> 0 Then
                     j = InStr(the_right, "'" & ActiveSheet.Name & "'!")
                     Do While j <> 0
                        the_right = Left(the_right, j - 1) & Right(the_right, Len(the_right) - j - Len(ActiveSheet.Name) - 2)
                        j = InStr(the_right, "'" & ActiveSheet.Name & "'!")
                     Loop
                  Else
                     Do While j <> 0
                        the_right = Left(the_right, j - 1) & Right(the_right, Len(the_right) - j - Len(ActiveSheet.Name))
                        j = InStr(the_right, ActiveSheet.Name)
                     Loop
                  End If
               End If
               If "." <> Application.International(xlDecimalSeparator) Then
                  j = InStr(the_right, ".")
                  Do While j <> 0
                      Mid(the_right, j, 1) = Application.International(xlDecimalSeparator)
                      j = InStr(the_right, ".")
                  Loop
               End If
            Else
               If Len(the_right) > 120 Then
                  the_right = Mid(CStr(ActiveSheet.Names("solver_rhs" & Trim(Str(i)))), 2)
                  If InStr(the_right, ActiveSheet.Name & "!") <> 0 Then
                     If InStr(the_right, "'" & ActiveSheet.Name & "'!") <> 0 Then
                        j = InStr(the_right, "'" & ActiveSheet.Name & "'!")
                        the_right = Right(the_right, Len(the_right) - j - Len(ActiveSheet.Name) - 2)
                     Else
                        j = InStr(the_right, ActiveSheet.Name & "!")
                        the_right = Right(the_right, Len(the_right) - j - Len(ActiveSheet.Name))
                     End If
                  End If
               End If
            End If
         Else
            the_right = CStr(CDbl(the_right))
         End If
         If CStr(Range(Mid(CStr(ActiveSheet.Names("solver_lhs" & Trim(Str(i)))), 2)).Address & Mid(CStr(ActiveSheet.Names("solver_rel" & Trim(Str(i)))), 2) & the_right) = CStr(stringmatch) Then
            remember = i
            Exit For
         End If
       Next
    End If
    If remember = 0 Then
       SolvDelete = 4
       Application.ScreenUpdating = rememberscreen
       Exit Function
    End If
    With ActiveSheet.Names
    .Add Name:="solver_num", RefersTo:=solver_num - 1, Visible:=False
    .Add Name:="solver_lhs" & Trim(Str(remember)), RefersTo:=ActiveSheet.Names("solver_lhs" & Trim(Str(solver_num))).RefersTo, Visible:=False
    .Add Name:="solver_rel" & Trim(Str(remember)), RefersTo:=ActiveSheet.Names("solver_rel" & Trim(Str(solver_num))).RefersTo, Visible:=False
    .Add Name:="solver_rhs" & Trim(Str(remember)), RefersTo:=ActiveSheet.Names("solver_rhs" & Trim(Str(solver_num))).RefersTo, Visible:=False
    End With
    SolvDelete = 0
    Application.ScreenUpdating = rememberscreen
    Exit Function
mainerror:
    MsgBoxW GlobalX4Mess.Range("solver_err_msg").Text, 32, , GlobalHelpfile, 1830
    End
errorhandling:
   SolvDelete = CVErr(xlErrValue)
End Function

Function SolvFinish(Optional KeepFinal, Optional ReportArray, Optional OutlineReports)
    If (Not ReadyForMacros()) Then
        SolvFinish = CVErr(xlErrValue)
        Exit Function
    End If

    Dim answer_report As Boolean, sens_report As Boolean, limits_report As Boolean, i As Integer
    Dim rememberscreen, theresult As Integer, lin_report As Boolean, feas1 As Boolean, feas2 As Boolean
    Dim dummy, nosense As Boolean, pop_report As Boolean, tmp2 As Boolean, tmp As Integer
    On Error GoTo errorhandling
    rememberscreen = Application.ScreenUpdating
    Application.ScreenUpdating = False
    SetGlobals
    'Get_Newsettings
    Get_settings
    If SolverCls Is Nothing Then
        Set SolverCls = New SolverCalls
    End If
    theresult = GlobalAnswer
    nosense = False
    For i = 1 To CDbl(Mid(CStr(ActiveSheet.Names("solver_num")), 2))
        dummy = CDbl(Mid(CStr(ActiveSheet.Names("solver_rel" & Trim(Str(i)))), 2))
        If dummy > 3 Then
           nosense = True
           Exit For
        End If
    Next
    If Not IsNumeric(theresult) Then
       SolvFinish = CVErr(xlErrValue)
       Application.ScreenUpdating = rememberscreen
       Exit Function
    End If
    Application.ScreenUpdating = False
    If IsMissing(KeepFinal) Or IsError(KeepFinal) Then
       KeepFinal = 1
    End If
    If KeepFinal < 1 Or KeepFinal > 3 Then
       SolvFinish = 1
       Application.ScreenUpdating = rememberscreen
       Exit Function
    End If
    If Not IsMissing(ReportArray) And Not IsError(ReportArray) Then
       If UBound(ReportArray) > 3 Or UBound(ReportArray) < 1 Then
          SolvFinish = 2
       End If
    End If
    Application.ScreenUpdating = True
    If Not IsMissing(OutlineReports) And Not IsError(OutlineReports) Then
       If TypeName(OutlineReports) = "String" Then
          OutlineReports = CBool(OutlineReports = "TRUE")
       End If
       If TypeName(OutlineReports) <> "Boolean" And TypeName(OutlineReports) <> "String" Then
          SolvFinish = 3
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
       If OutlineReports Then
          GlobalOutline = True
       Else
          GlobalOutline = False
       End If
    End If
    If CDbl(Mid(CStr(ActiveSheet.Names("solver_eng")), 2)) <> 3 Then
       If theresult = 0 Or theresult = 1 Or theresult = 2 Or theresult = 14 Then
          If Not IsMissing(ReportArray) And Not IsError(ReportArray) Then
             answer_report = False
             sens_report = False
             limits_report = False
             For i = LBound(ReportArray) To UBound(ReportArray)
                Select Case ReportArray(i)
                Case 1
                  answer_report = True
                Case 2
                    If Not nosense Then
                        sens_report = True
                    End If
                Case 3
                    If Not nosense Then
                        limits_report = True
                    End If
                End Select
             Next
             If answer_report Then
                Do_Answer
             End If
             If sens_report Then
                Do_Sensitivity
             End If
             If limits_report Then
                Do_Limits
             End If
          End If
       End If
       If theresult = 7 Then
          If Not IsMissing(ReportArray) And Not IsError(ReportArray) Then
             lin_report = False
             For i = LBound(ReportArray) To UBound(ReportArray)
                Select Case ReportArray(i)
                Case 1
                  lin_report = True
                End Select
             Next
             If lin_report Then
                Do_Linear
             End If
          End If
       End If
       If theresult = 5 And KeepFinal = 3 Then
          ' define solver_rlx
          If nosense Then
             dummy = 2
             On Error Resume Next
             dummy = Mid(CStr(ActiveSheet.Names("solver_rlx")), 2)
             ActiveSheet.Names.Add Name:="solver_rlx", RefersTo:=1, Visible:=False
             SolverSolve (True)
             ActiveSheet.Names.Add Name:="solver_rlx", RefersTo:=dummy, Visible:=False
             SolvFinish = 0
             Application.ScreenUpdating = rememberscreen
             Exit Function
          End If
       End If
       If theresult = 5 Then
          If Not IsMissing(ReportArray) And Not IsError(ReportArray) Then
             feas1 = False
             feas2 = False
             For i = LBound(ReportArray) To UBound(ReportArray)
                Select Case ReportArray(i)
                Case 1
                  feas1 = True
                Case 2
                  feas2 = True
                End Select
             Next
             If feas1 Then
                If KeepFinal <> 1 Then
                   Call SolverCls.Solve(2)
                End If
                Do_Infeas (1)
             End If
             If feas2 Then
                If KeepFinal <> 1 Then
                   Call SolverCls.Solve(2)
                End If
                Do_Infeas (2)
             End If
          End If
       End If
    Else
       If Not IsMissing(ReportArray) And Not IsError(ReportArray) Then
          answer_report = False
          pop_report = False
          For i = LBound(ReportArray) To UBound(ReportArray)
             Select Case ReportArray(i)
             Case 1
               answer_report = True
             Case 2
               pop_report = True
             End Select
          Next
          If answer_report Then
             Do_Answer
          End If
          If pop_report Then
             Do_Pop
          End If
       End If
    End If
    If KeepFinal = 1 Then
      Call SolverCls.Solve(1)
    Else
       Call SolverCls.Solve(2)
       Call SolverCls.Solve(1)
    End If
    SolvFinish = 0
    Application.ScreenUpdating = rememberscreen
    Exit Function
errorhandling:
    SolvFinish = CVErr(xlErrValue)
End Function

Function SolvFinishDialog(Optional KeepFinal, Optional ReportArray, Optional OutlineReports)
    If (Not ReadyForMacros()) Then
        SolvFinishDialog = 0
        Exit Function
    End If
    
    On Error GoTo mainerror
    Dim rememberscreen, i As Integer
    rememberscreen = Application.ScreenUpdating
    Application.ScreenUpdating = False
    SetGlobals
    If Not IsMissing(OutlineReports) And Not IsError(OutlineReports) Then
       If TypeName(OutlineReports) = "String" Then
          OutlineReports = CBool(OutlineReports = "TRUE")
       End If
       If TypeName(OutlineReports) <> "Boolean" And TypeName(OutlineReports) <> "String" Then
          SolvFinish = 3
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
       dlgFinish.chkOutline = OutlineReports
       If Not IsMissing(ReportArray) And Not IsError(ReportArray) Then
          On Error Resume Next
          For i = LBound(ReportArray) To UBound(ReportArray)
              dlgFinish.listReports.List(ReportArray(i) - 1) = True
          Next
          On Error GoTo 0
       End If
    End If
    dlgFinish.Show
    SolvFinishDialog = 0
    Application.ScreenUpdating = rememberscreen
    Exit Function
mainerror:
    MsgBoxW GlobalX4Mess.Range("solver_err_msg").Text, 32, , GlobalHelpfile, 1830
    End
End Function


Function SolvGet(Typenum, Optional SheetName)
    If (Not ReadyForMacros()) Then
        SolvGet = CVErr(xlErrValue)
        Exit Function
    End If

    Dim nameofsheet As String, i As Integer, thearray() As String
    Dim rememberscreen, remembername As String
    On Error GoTo errorhandling
    rememberscreen = Application.ScreenUpdating
    Application.ScreenUpdating = False
    If IsMissing(Typenum) Or IsError(Typenum) Then
       SolvGet = CVErr(xlErrValue)
       Application.ScreenUpdating = rememberscreen
       Exit Function
    End If
    If Typenum < 1 Or Typenum > 29 Then
       SolvGet = CVErr(xlErrValue)
    End If
    If IsMissing(SheetName) Or IsError(SheetName) Then
       nameofsheet = ActiveSheet.Name
    Else
       nameofsheet = Worksheets(SheetName).Name
    End If
    remembername = ActiveSheet.Name
    Worksheets(nameofsheet).Select
    SetGlobals
    Select Case Typenum
    Case 1
      SolvGet = Mid(CStr(ActiveSheet.Names("solver_opt")), 2)
    Case 2
      SolvGet = CDbl(Mid(CStr(ActiveSheet.Names("solver_typ")), 2))
    Case 3
      SolvGet = Mid(CStr(ActiveSheet.Names("solver_val")), 2)
    Case 4
      SolvGet = Mid(CStr(ActiveSheet.Names("solver_adj")), 2)
    Case 5
      SolvGet = CDbl(Mid(CStr(ActiveSheet.Names("solver_num")), 2))
    Case 6
      ReDim thearray(CDbl(Mid(CStr(ActiveSheet.Names("solver_num")), 2)))
      For i = 1 To UBound(thearray)
        thearray(i) = Mid(CStr(ActiveSheet.Names("solver_lhs" & Trim(Str(i)))), 2)
      Next
      SolvGet = thearray()
    Case 7
      ReDim thearray(CDbl(Mid(CStr(ActiveSheet.Names("solver_num")), 2)))
      For i = 1 To UBound(thearray)
        thearray(i) = Mid(CStr(ActiveSheet.Names("solver_rel" & Trim(Str(i)))), 2)
      Next
      SolvGet = thearray()
    Case 8
      ReDim thearray(CDbl(Mid(CStr(ActiveSheet.Names("solver_num")), 2)))
      For i = 1 To UBound(thearray)
        On Error Resume Next
        thearray(i) = Mid(CStr(ActiveSheet.Names("solver_rhs" & Trim(Str(i)))), 2)
        If (thearray(i) = """" & EscapeQuotes(GlobalX4Mess.Range("solver_msg_int").Formula) & """") Then
            thearray(i) = GlobalX4Mess.Range("solver_msg_int").Formula
        ElseIf (thearray(i) = """" & EscapeQuotes(GlobalX4Mess.Range("solver_msg_bin").Formula) & """") Then
            thearray(i) = GlobalX4Mess.Range("solver_msg_bin").Formula
        ElseIf (thearray(i) = """" & EscapeQuotes(GlobalX4Mess.Range("solver_msg_dif").Formula) & """") Then
            thearray(i) = GlobalX4Mess.Range("solver_msg_dif").Formula
        End If
        On Error GoTo errorhandling
      Next
      SolvGet = thearray()
    Case 9
      On Error Resume Next
      SolvGet = CDbl(Mid(CStr(ActiveSheet.Names("solver_tim")), 2))
      If Err > 0 Then
         Err = 0
         SolvGet = 100
      End If
    Case 10
      On Error Resume Next
      SolvGet = CDbl(Mid(CStr(ActiveSheet.Names("solver_itr")), 2))
      If Err > 0 Then
         Err = 0
         SolvGet = 100
      End If
    Case 11
      On Error Resume Next
      SolvGet = CDbl(Mid(CStr(ActiveSheet.Names("solver_pre")), 2))
      If Err > 0 Then
         Err = 0
         SolvGet = 0.000001
      End If
    Case 12
      On Error Resume Next
      SolvGet = CDbl(Mid(CStr(ActiveSheet.Names("solver_tol")), 2))
      If Err > 0 Then
         Err = 0
         SolvGet = 0.01
      End If
    Case 13
       On Error Resume Next
       SolvGet = (CDbl(Mid(CStr(ActiveSheet.Names("solver_lin")), 2)) = 1)
       If Err > 0 Then
         Err = 0
         SolvGet = False
      End If
    Case 14
       On Error Resume Next
       SolvGet = (CDbl(Mid(CStr(ActiveSheet.Names("solver_sho")), 2)) = 1)
       If Err > 0 Then
         Err = 0
         SolvGet = False
      End If
    Case 15
       On Error Resume Next
       SolvGet = (CDbl(Mid(CStr(ActiveSheet.Names("solver_scl")), 2)) = 1)
       If Err > 0 Then
         Err = 0
         SolvGet = False
       End If
    Case 16
       On Error Resume Next
       SolvGet = CDbl(Mid(CStr(ActiveSheet.Names("solver_est")), 2))
       If Err > 0 Then
         Err = 0
         SolvGet = 1
       End If
    Case 17
       On Error Resume Next
       SolvGet = CDbl(Mid(CStr(ActiveSheet.Names("solver_drv")), 2))
       If Err > 0 Then
         Err = 0
         SolvGet = 1
       End If
    Case 18
       On Error Resume Next
       SolvGet = CDbl(Mid(CStr(ActiveSheet.Names("solver_nwt")), 2))
       If Err > 0 Then
         Err = 0
         SolvGet = 1
       End If
    Case 19
       On Error Resume Next
       SolvGet = CDbl(Mid(CStr(ActiveSheet.Names("solver_cvg")), 2))
       If Err > 0 Then
         Err = 0
         SolvGet = 0.0001
       End If
    Case 20
       On Error Resume Next
       SolvGet = (CDbl(Mid(CStr(ActiveSheet.Names("solver_neg")), 2)) = 1)
       If Err > 0 Then
         Err = 0
         SolvGet = False
       End If
    Case 21
       On Error Resume Next
       SolvGet = CDbl(Mid(CStr(ActiveSheet.Names("solver_ssz")), 2))
       If Err > 0 Then
         Err = 0
         SolvGet = 0
       End If
    Case 22
       On Error Resume Next
       SolvGet = CDbl(Mid(CStr(ActiveSheet.Names("solver_rsd")), 2))
       If Err > 0 Then
         Err = 0
         SolvGet = 0
       End If
    Case 23
       On Error Resume Next
       SolvGet = (CDbl(Mid(CStr(ActiveSheet.Names("solver_msl")), 2)) = 1)
       If Err > 0 Then
         Err = 0
         SolvGet = True
       End If
    Case 24
       On Error Resume Next
       SolvGet = (CDbl(Mid(CStr(ActiveSheet.Names("solver_rbv")), 2)) = 1)
       If Err > 0 Then
         Err = 0
         SolvGet = True
       End If
    Case 25
       On Error Resume Next
       SolvGet = CDbl(Mid(CStr(ActiveSheet.Names("solver_mrt")), 2))
       If Err > 0 Then
         Err = 0
         SolvGet = 0.075
       End If
    Case 26
       On Error Resume Next
       SolvGet = CDbl(Mid(CStr(ActiveSheet.Names("solver_nod")), 2))
       If Err > 0 Then
         Err = 0
         SolvGet = 1000
       End If
    Case 27
       On Error Resume Next
       SolvGet = CDbl(Mid(CStr(ActiveSheet.Names("solver_mip")), 2))
       If Err > 0 Then
         Err = 0
         SolvGet = 1000
       End If
    Case 28
       On Error Resume Next
       SolvGet = (CDbl(Mid(CStr(ActiveSheet.Names("solver_rlx")), 2)) = 1)
       If Err > 0 Then
         Err = 0
         SolvGet = False
       End If
    Case 29
       On Error Resume Next
       SolvGet = CDbl(Mid(CStr(ActiveSheet.Names("solver_mni")), 2))
       If Err > 0 Then
         Err = 0
         SolvGet = 30
       End If
    End Select
    Worksheets(remembername).Select
    Application.ScreenUpdating = rememberscreen
    Exit Function
kiv_error:
    SolvGet = 0
    Exit Function
errorhandling:
    SolvGet = CVErr(xlErrValue)
End Function

Function SolvLoad(LoadArea, Optional Merge)
    If (Not ReadyForMacros()) Then
        SolvLoad = CVErr(xlErrValue)
        Exit Function
    End If

    Dim rememberscreen, obj_done As Boolean
    On Error GoTo errorhandling
    rememberscreen = Application.ScreenUpdating
    Application.ScreenUpdating = False
    SetGlobals
    Dim j As Integer, k As Integer, c, ByChangetring As String, theoptions As String, dummy2
    If IsMissing(LoadArea) Or IsError(LoadArea) Then
       SolvLoad = 1
       Application.ScreenUpdating = rememberscreen
       Exit Function
    Else
       On Error Resume Next
       If TypeName(LoadArea) = "Range" And Not IsCellRef(Stylecheck(CStr(LoadArea))) Then
          LoadArea = LoadArea.Address
       End If
       LoadArea = CStr(LoadArea)
       On Error GoTo 0
    End If
    If Not IsCellRef(Stylecheck(LoadArea)) Then
       SolvLoad = 1
       Application.ScreenUpdating = rememberscreen
       Exit Function
    End If
    'dlgLoadSave.refArea.Text = LoadArea
    ThisWorkbook.DialogSheets("Save_dialog").EditBoxes("the_area").Caption = LoadArea
    If IsMissing(Merge) Or IsError(Merge) Then
       Reset_all (False)
    Else
       If TypeName(Merge) = "String" Then
          Merge = CBool(Merge = "TRUE")
       End If
       If TypeName(Merge) <> "Boolean" And TypeName(Merge) <> "String" Then
          SolvLoad = 2
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
       If CBool(Merge) = False Then
          Reset_all (False)
       End If
    End If
    'Get_Newsettings
    Get_settings
    Loadmod
    DefineModel
    'Define_names
    SolvLoad = 0
    Application.ScreenUpdating = rememberscreen
    Exit Function
errorhandling:
    SolvLoad = CVErr(xlErrValue)
End Function


Function SolvOk(Optional SetCell, Optional MaxMinVal, Optional ValueOf, Optional ByChange, Optional Engine, Optional EngineDesc)
    If (Not ReadyForMacros()) Then
        SolvOk = CVErr(xlErrValue)
        Exit Function
    End If
    
    Dim rememberscreen, dmy As Integer
    On Error GoTo errorhandling
    rememberscreen = Application.ScreenUpdating
    Application.ScreenUpdating = False
    SetGlobals
    If Not IsMissing(SetCell) And Not IsError(SetCell) Then
       On Error Resume Next
       If TypeName(SetCell) = "Range" And Not IsCellReference(Stylecheck(CStr(SetCell))) Then
          SetCell = SetCell.Address
       End If
       SetCell = CStr(SetCell)
       On Error GoTo 0
       If IsMissing(MaxMinVal) Or IsError(MaxMinVal) Then
          SolvOk = 2
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
       SetCell = Stylecheck(SetCell)
    End If
    If Not IsMissing(SetCell) And Not IsError(SetCell) Then
       On Error Resume Next
       If Range(SetCell).Count > 1 Then
          SolvOk = 1
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
       On Error GoTo 0
       If MaxMinVal <> 1 And MaxMinVal <> 2 And MaxMinVal <> 3 Then
          SolvOk = 2
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
       If IsMissing(ValueOf) Or IsError(ValueOf) Then
          ValueOf = 0
       End If
       If MaxMinVal = 3 And Not IsNumeric(ValueOf) Then
          SolvOk = 3
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    If IsMissing(ByChange) Or IsError(ByChange) Then
       SolvOk = 4
       Application.ScreenUpdating = rememberscreen
       Exit Function
    Else
       On Error Resume Next
       If TypeName(ByChange) = "Range" And Not IsCellRef(Stylecheck(CStr(ByChange))) Then
          ByChange = ByChange.Address
       End If
       ByChange = CStr(ByChange)
       On Error GoTo 0
    End If
    ByChange = Stylecheck(ByChange)
    On Error Resume Next
    If Not Range(ByChange).Count > 0 Then
       SolvOk = 4
       Application.ScreenUpdating = rememberscreen
       Exit Function
    End If
    On Error GoTo 0
    If Not IsMissing(Engine) And Not IsError(Engine) Then
       If Engine <> 1 And Engine <> 2 And Engine <> 3 Then
          SolvOk = 5
          Application.ScreenUpdating = rememberscreen
          Exit Function
       Else
          ActiveSheet.Names.Add Name:="solver_eng", RefersToLocal:=Engine, Visible:=False
       End If
    End If
    If Not IsMissing(EngineDesc) And Not IsError(EngineDesc) Then
       ' for Premium Plus:check dropdownlist and return number
       dmy = 0
          If EngineDesc = GetGlobalX4Mess("solver_grg_eng_OM") Then
             dmy = 1
          ElseIf EngineDesc = GetGlobalX4Mess("solver_lp_eng_OM") Then
             dmy = 2
          ElseIf EngineDesc = GetGlobalX4Mess("solver_crs_eng_OM") Then
             dmy = 3
          End If
       If dmy = 0 Then
          SolvOk = 6
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
       ActiveSheet.Names.Add Name:="solver_eng", RefersToLocal:=dmy, Visible:=False
      End If
    With ActiveSheet.Names
      .Add Name:="solver_adj", RefersTo:="=" & Range(ByChange).Address, Visible:=False
      If Not IsMissing(SetCell) And Not IsError(SetCell) Then
         .Add Name:="solver_opt", RefersTo:="=" & Range(SetCell).Address, Visible:=False
         .Add Name:="solver_typ", RefersToLocal:=MaxMinVal, Visible:=False
         .Add Name:="solver_val", RefersToLocal:=ValueOf, Visible:=False
      Else
         On Error Resume Next
         ActiveSheet.Names("solver_opt").Delete
         .Add Name:="solver_typ", RefersToLocal:=1, Visible:=False
         .Add Name:="solver_val", RefersToLocal:=0, Visible:=False
         On Error GoTo 0
      End If
    End With
    SolvOk = 0
    Application.ScreenUpdating = rememberscreen
    Exit Function
errorhandling:
    SolvOk = CVErr(xlErrValue)
End Function

Function SolvOkDialog(Optional SetCell, Optional MaxMinVal, Optional ValueOf, Optional ByChange, Optional Engine, Optional EngineDesc)
    If (Not ReadyForMacros()) Then
        SolvOkDialog = CVErr(xlErrValue)
        Exit Function
    End If
    
    Dim result
    Dim rememberscreen
    On Error GoTo errorhandling
    rememberscreen = Application.ScreenUpdating
    Application.ScreenUpdating = False
    SetGlobals
    result = SolvOk(SetCell, MaxMinVal, ValueOf, ByChange, Engine, EngineDesc)
    If result <> 0 Then
       SolvOkDialog = result
       Application.ScreenUpdating = rememberscreen
       Exit Function
    End If
    SolverMain
    SolvOkDialog = 0
    Application.ScreenUpdating = rememberscreen
    Exit Function
errorhandling:
    SolvOkDialog = CVErr(xlErrValue)
End Function

Function SolvOptions(Optional MaxTime, Optional Iterations, Optional Precision, Optional AssumeLinear, _
                              Optional StepThru, Optional Estimates, Optional Derivatives, Optional SearchOption, _
                              Optional IntTolerance, Optional Scaling, Optional Convergence, Optional AssumeNonNeg, _
                              Optional PopulationSize, Optional RandomSeed, Optional MultiStart, _
                              Optional RequireBounds, Optional MutationRate, Optional MaxSubproblems, _
                              Optional MaxIntegerSols, Optional SolveWithout, Optional MaxTimeNoImp)
    If (Not ReadyForMacros()) Then
        SolvOptions = CVErr(xlErrValue)
        Exit Function
    End If
    
    Dim solver_eng As Integer
    Dim rememberscreen
    On Error GoTo errorhandling
    rememberscreen = Application.ScreenUpdating
    Application.ScreenUpdating = False
    SetGlobals
    On Error Resume Next
    solver_eng = 1
    solver_eng = Mid(CStr(ActiveSheet.Names("solver_eng")), 2)
    On Error GoTo 0
    If Not IsMissing(MaxTime) And Not IsError(MaxTime) Then
       If CDbl(MaxTime) < 0 Or Int(CDbl(MaxTime)) <> CDbl(MaxTime) Then
          SolvOptions = 1
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    If Not IsMissing(Iterations) And Not IsError(Iterations) Then
       If CDbl(Iterations) < 0 Or Int(CDbl(Iterations)) <> CDbl(Iterations) Then
          SolvOptions = 2
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    If Not IsMissing(Precision) And Not IsError(Precision) Then
       If CDbl(Precision) <= 0 Or CDbl(Precision) >= 1 Then
          SolvOptions = 3
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    If Not IsMissing(AssumeLinear) And Not IsError(AssumeLinear) Then
       If TypeName(AssumeLinear) = "String" Then
          AssumeLinear = CBool(AssumeLinear = "TRUE")
       End If
      If TypeName(AssumeLinear) <> "Boolean" And TypeName(AssumeLinear) <> "String" Then
          SolvOptions = 4
          Application.ScreenUpdating = rememberscreen
         Exit Function
       End If
       If AssumeLinear = True And solver_eng = 3 Then
          SolvOptions = 4
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    If Not IsMissing(StepThru) And Not IsError(StepThru) Then
       If TypeName(StepThru) = "String" Then
          StepThru = CBool(StepThru = "TRUE")
       End If
       If TypeName(StepThru) <> "Boolean" And TypeName(StepThru) <> "String" Then
          SolvOptions = 5
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    If Not IsMissing(Estimates) And Not IsError(Estimates) Then
       If Estimates = "TRUE" Then
          Estimates = "1"
       End If
       If Estimates = "FALSE" Then
          Estimates = "2"
       End If
       If CDbl(Estimates) <> 1 And CDbl(Estimates) <> 2 Then
          SolvOptions = 6
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    If Not IsMissing(Derivatives) And Not IsError(Derivatives) Then
       If Derivatives = "TRUE" Then
          Derivatives = "1"
       End If
       If Derivatives = "FALSE" Then
          Derivatives = "2"
       End If
       If CDbl(Derivatives) <> 1 And CDbl(Derivatives) <> 2 Then
          SolvOptions = 7
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    If Not IsMissing(SearchOption) And Not IsError(SearchOption) Then
       If SearchOption = "TRUE" Then
          SearchOption = "1"
       End If
       If SearchOption = "FALSE" Then
          SearchOption = "2"
       End If
       If CDbl(SearchOption) <> 1 And CDbl(SearchOption) <> 2 Then
          SolvOptions = 8
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    If Not IsMissing(IntTolerance) And Not IsError(IntTolerance) Then
       If CDbl(IntTolerance) < 0 Or CDbl(IntTolerance) >= 100 Then
          SolvOptions = 9
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    If Not IsMissing(Scaling) And Not IsError(Scaling) Then
       If TypeName(Scaling) = "String" Then
          Scaling = CBool(Scaling = "TRUE")
       End If
       If TypeName(Scaling) <> "Boolean" And TypeName(Scaling) <> "String" Then
          SolvOptions = 10
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    If Not IsMissing(Convergence) And Not IsError(Convergence) Then
       If CDbl(Convergence) <= 0 Or CDbl(Convergence) >= 1 Then
          SolvOptions = 11
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    If Not IsMissing(AssumeNonNeg) And Not IsError(AssumeNonNeg) Then
       If TypeName(AssumeNonNeg) = "String" Then
          AssumeNonNeg = CBool(AssumeNonNeg = "TRUE")
       End If
       If TypeName(AssumeNonNeg) <> "Boolean" And TypeName(AssumeNonNeg) <> "String" Then
          SolvOptions = 12
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    If Not IsMissing(PopulationSize) And Not IsError(PopulationSize) Then
       If CDbl(PopulationSize) < 0 Or Int(CDbl(PopulationSize)) <> CDbl(PopulationSize) Then
          SolvOptions = 13
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    If Not IsMissing(RandomSeed) And Not IsError(RandomSeed) Then
       If CDbl(RandomSeed) < 0 Or Int(CDbl(RandomSeed)) <> CDbl(RandomSeed) Then
          SolvOptions = 14
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    If Not IsMissing(MultiStart) And Not IsError(MultiStart) Then
       If TypeName(MultiStart) = "String" Then
          MultiStart = CBool(MultiStart = "TRUE")
       End If
       If TypeName(MultiStart) <> "Boolean" And TypeName(MultiStart) <> "String" Then
          SolvOptions = 15
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    If Not IsMissing(RequireBounds) And Not IsError(RequireBounds) Then
       If TypeName(RequireBounds) = "String" Then
          RequireBounds = CBool(RequireBounds = "TRUE")
       End If
       If TypeName(RequireBounds) <> "Boolean" And TypeName(RequireBounds) <> "String" Then
          SolvOptions = 16
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    If Not IsMissing(MutationRate) And Not IsError(MutationRate) Then
       If CDbl(MutationRate) < 0 Or CDbl(MutationRate) > 1 Then
          SolvOptions = 17
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    If Not IsMissing(MaxSubproblems) And Not IsError(MaxSubproblems) Then
       If CDbl(MaxSubproblems) < 0 Or Int(CDbl(MaxSubproblems)) <> CDbl(MaxSubproblems) Then
          SolvOptions = 18
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    If Not IsMissing(MaxIntegerSols) And Not IsError(MaxIntegerSols) Then
       If CDbl(MaxIntegerSols) < 0 Or Int(CDbl(MaxIntegerSols)) <> CDbl(MaxIntegerSols) Then
          SolvOptions = 19
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    If Not IsMissing(SolveWithout) And Not IsError(SolveWithout) Then
       If TypeName(SolveWithout) = "String" Then
          SolveWithout = CBool(SolveWithout = "TRUE")
       End If
       If TypeName(SolveWithout) <> "Boolean" And TypeName(SolveWithout) <> "String" Then
          SolvOptions = 20
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    If Not IsMissing(MaxTimeNoImp) And Not IsError(MaxTimeNoImp) Then
       If CDbl(MaxTimeNoImp) <= 0 Or Int(CDbl(MaxTimeNoImp)) <> CDbl(MaxTimeNoImp) Then
          SolvOptions = 21
          Application.ScreenUpdating = rememberscreen
          Exit Function
       End If
    End If
    
    With ActiveSheet.Names
       If Not IsMissing(MaxTime) And Not IsError(MaxTime) Then
          If MaxTime <> 0 Then
             .Add Name:="solver_tim", RefersTo:=CDbl(MaxTime), Visible:=False
          Else
             .Add Name:="solver_tim", RefersTo:=PLUS_INF, Visible:=False
          End If
       End If
       If Not IsMissing(Iterations) And Not IsError(Iterations) Then
          If Iterations <> 0 Then
              .Add Name:="solver_itr", RefersTo:=CDbl(Iterations), Visible:=False
          Else
              .Add Name:="solver_itr", RefersTo:=PLUS_INF, Visible:=False
          End If
       End If
       If Not IsMissing(Precision) And Not IsError(Precision) Then
          .Add Name:="solver_pre", RefersToLocal:=Precision, Visible:=False
       End If
       If Not IsMissing(AssumeLinear) And Not IsError(AssumeLinear) Then
          If CBool(AssumeLinear) = True Then
             .Add Name:="solver_lin", RefersToLocal:=1, Visible:=False
          Else
             .Add Name:="solver_lin", RefersToLocal:=2, Visible:=False
          End If
       End If
       If Not IsMissing(StepThru) And Not IsError(StepThru) Then
          If CBool(StepThru) = True Then
             .Add Name:="solver_sho", RefersToLocal:=1, Visible:=False
          Else
             .Add Name:="solver_sho", RefersToLocal:=2, Visible:=False
          End If
       End If
       If Not IsMissing(Estimates) And Not IsError(Estimates) Then
          .Add Name:="solver_est", RefersToLocal:=Estimates, Visible:=False
       End If
       If Not IsMissing(Derivatives) And Not IsError(Derivatives) Then
          .Add Name:="solver_drv", RefersToLocal:=Derivatives, Visible:=False
       End If
       If Not IsMissing(SearchOption) And Not IsError(SearchOption) Then
           .Add Name:="solver_nwt", RefersToLocal:=SearchOption, Visible:=False
       End If
       If Not IsMissing(IntTolerance) And Not IsError(IntTolerance) Then
          .Add Name:="solver_tol", RefersToLocal:=Application.Evaluate(IntTolerance) / 100, Visible:=False
       End If
       If Not IsMissing(Scaling) And Not IsError(Scaling) Then
          If CBool(Scaling) = True Then
             .Add Name:="solver_scl", RefersToLocal:=1, Visible:=False
          Else
             .Add Name:="solver_scl", RefersToLocal:=0, Visible:=False
          End If
       End If
       If Not IsMissing(Convergence) And Not IsError(Convergence) Then
          .Add Name:="solver_cvg", RefersToLocal:=Convergence, Visible:=False
       End If
       If Not IsMissing(AssumeNonNeg) And Not IsError(AssumeNonNeg) Then
          If CBool(AssumeNonNeg) = True Then
             .Add Name:="solver_neg", RefersToLocal:=1, Visible:=False
          Else
             .Add Name:="solver_neg", RefersToLocal:=2, Visible:=False
          End If
       End If
       If Not IsMissing(PopulationSize) And Not IsError(PopulationSize) Then
          .Add Name:="solver_ssz", RefersToLocal:=PopulationSize, Visible:=False
       End If
       If Not IsMissing(RandomSeed) And Not IsError(RandomSeed) Then
          .Add Name:="solver_rsd", RefersToLocal:=RandomSeed, Visible:=False
       End If
       If Not IsMissing(MultiStart) And Not IsError(MultiStart) Then
          If CBool(MultiStart) = True Then
             .Add Name:="solver_msl", RefersToLocal:=1, Visible:=False
          Else
             .Add Name:="solver_msl", RefersToLocal:=2, Visible:=False
          End If
       End If
       If Not IsMissing(RequireBounds) And Not IsError(RequireBounds) Then
          If CBool(RequireBounds) = True Then
             .Add Name:="solver_rbv", RefersToLocal:=1, Visible:=False
          Else
             .Add Name:="solver_rbv", RefersToLocal:=2, Visible:=False
          End If
       End If
       If Not IsMissing(MutationRate) And Not IsError(MutationRate) Then
          .Add Name:="solver_mrt", RefersToLocal:=MutationRate, Visible:=False
       End If
       If Not IsMissing(MaxSubproblems) And Not IsError(MaxSubproblems) Then
          If MaxSubproblems <> 0 Then
              .Add Name:="solver_nod", RefersToLocal:=MaxSubproblems, Visible:=False
          Else
              .Add Name:="solver_nod", RefersToLocal:=PLUS_INF, Visible:=False
          End If
       End If
       If Not IsMissing(MaxIntegerSols) And Not IsError(MaxIntegerSols) Then
          If MaxIntegerSols <> 0 Then
             .Add Name:="solver_mip", RefersToLocal:=MaxIntegerSols, Visible:=False
          Else
             .Add Name:="solver_mip", RefersToLocal:=PLUS_INF, Visible:=False
          End If
       End If
       If Not IsMissing(SolveWithout) And Not IsError(SolveWithout) Then
          If CBool(SolveWithout) = True Then
             .Add Name:="solver_rlx", RefersToLocal:=1, Visible:=False
          Else
             .Add Name:="solver_rlx", RefersToLocal:=2, Visible:=False
          End If
       End If
       If Not IsMissing(MaxTimeNoImp) And Not IsError(MaxTimeNoImp) Then
          .Add Name:="solver_mni", RefersToLocal:=MaxTimeNoImp, Visible:=False
       End If
    End With
    SolvOptions = 0
    Application.ScreenUpdating = rememberscreen
    Exit Function
errorhandling:
    SolvOptions = CVErr(xlErrValue)
End Function

Function SolvReset()
    If (Not ReadyForMacros()) Then
        SolvReset = CVErr(xlErrValue)
        Exit Function
    End If

    Dim rememberscreen
    On Error GoTo errorhandling
    rememberscreen = Application.ScreenUpdating
    Application.ScreenUpdating = False
    SetGlobals
    'Get_Newsettings
    Get_settings
    Reset_all (False)
    SolvReset = 0
    Application.ScreenUpdating = rememberscreen
    Exit Function
errorhandling:
    SolvReset = CVErr(xlErrValue)
End Function

Function SolvSave(SaveArea)
    If (Not ReadyForMacros()) Then
        SolvSave = CVErr(xlErrValue)
        Exit Function
    End If

    Dim rememberscreen, solver_num As Integer
    On Error GoTo errorhandling
    rememberscreen = Application.ScreenUpdating
    Application.ScreenUpdating = False
    SetGlobals
    If IsMissing(SaveArea) Or IsError(SaveArea) Then
       SolvSave = 1
       Application.ScreenUpdating = rememberscreen
       Exit Function
    Else
       On Error Resume Next
       If TypeName(SaveArea) = "Range" And Not IsCellRef(Stylecheck(CStr(SaveArea))) Then
          SaveArea = SaveArea.Address
       End If
       SaveArea = CStr(SaveArea)
       On Error GoTo 0
    End If
    If Not IsCellRef(Stylecheck(SaveArea)) Then
       SolvSave = 1
       Application.ScreenUpdating = rememberscreen
       Exit Function
    End If
    'Get_Newsettings
    Get_settings
    solver_num = 0
    On Error Resume Next
    solver_num = Mid(CStr(ActiveSheet.Names("solver_num")), 2)
    If Range(Stylecheck(SaveArea)).Count < solver_num + 4 And Range(Stylecheck(SaveArea)).Count > 1 Then
       SolvSave = 2
       Application.ScreenUpdating = rememberscreen
       Exit Function
    End If
    ThisWorkbook.DialogSheets("Save_dialog").EditBoxes("The_area").Caption = SaveArea
    SaveMod
    SolvSave = 0
    Application.ScreenUpdating = rememberscreen
    Exit Function
errorhandling:
    SolvSave = CVErr(xlErrValue)
End Function

Function SolvSolve(Optional UserFinish, Optional ShowRef)
    If (Not ReadyForMacros()) Then
        SolvSolve = CVErr(xlErrValue)
        Exit Function
    End If
    
    If SolverCls Is Nothing Then
        Set SolverCls = New SolverCalls
    End If

    Dim rememberscreen, Counter As Integer, currentarea, VarLimit As Integer
    On Error GoTo errorhandling
    If ActiveSheet.Type <> xlWorksheet Or ActiveSheet.ProtectContents Then
       GoTo errorhandling
    End If
    On Error GoTo selectionerror
    currentarea = Selection.Address
    On Error GoTo 0
    rememberscreen = Application.ScreenUpdating
    Application.ScreenUpdating = False
    SetGlobals
    Dim i As Integer, j As Integer, c
    If Not IsMissing(ShowRef) And Not IsError(ShowRef) Then
       'Call SetCellValue(GlobalX4Sheet.Range("dshowref"), ActiveWorkbook.Name & "!" & ShowRef)
       SolverCls.UDF = ShowRef
    Else
       'Call SetCellValue(GlobalX4Sheet.Range("dshowref"), "")
       SolverCls.UDF = ""
    End If
    'Get_Newsettings
    Get_settings
    On Error Resume Next
    Counter = Range(ActiveSheet.Names("solver_adj").Name).Count
    VarLimit = 200
    If Counter > VarLimit Then
       SolvSolve = CVErr(xlErrValue)
       Exit Function
    End If
    ReDim GlobalOldVars(Counter)
    ReDim GlobalOldVarFormats(Counter)
    i = 1
    For Each c In Range("solver_adj").Cells
       GlobalOldVars(i) = c.Value
       GlobalOldVarFormats(i) = c.NumberFormat
       i = i + 1
    Next
    If ThisWorkbook.DialogSheets("Solver_dialog").EditBoxes("Optimum_cell").Text = "" Then
       GlobalOldObj = CVErr(xlErrNA)
    Else
       GlobalOldObj = Range(Stylecheck(ThisWorkbook.DialogSheets("Solver_dialog").EditBoxes("Optimum_cell").Text)).Value
       GlobalOldObjFormat = Range(Stylecheck(ThisWorkbook.DialogSheets("Solver_dialog").EditBoxes("Optimum_cell").Text)).NumberFormat
    End If
    Application.DisplayAlerts = False
    Range(Stylecheck(currentarea)).Select
    GlobalAnswer = SolverCls.Solve(0)
    On Error GoTo 0
    Application.DisplayAlerts = True
    If Not IsNumeric(GlobalAnswer) Then
       SolvSolve = CVErr(xlErrNA)
    Else
       SolvSolve = GlobalAnswer
    End If
    If Not IsMissing(UserFinish) And Not IsError(UserFinish) Then
       If Not UserFinish Then
          dlgFinish.Show
       End If
    Else
      dlgFinish.Show
    End If
    Range(Stylecheck(currentarea)).Select
    Application.ScreenUpdating = rememberscreen
    Exit Function
errorhandling:
    SolvSolve = CVErr(xlErrValue)
    Exit Function
selectionerror:
    Range("$A$1").Select
    currentarea = Selection.Address
    Resume Next
End Function

Sub InitializeDialogSheets()
    ' parameters dialog
    With ThisWorkbook.DialogSheets("Solver_dialog")
        .DropDowns("EngineList").List = Array(GlobalX4Mess.Range("solver_grg_eng").Text, _
           GlobalX4Mess.Range("solver_lp_eng").Text, GlobalX4Mess.Range("solver_crs_eng").Text)
        .DropDowns("EngineList").DropDownLines = 3
        .DropDowns("EngineList").ListIndex = 1
   
        .Labels("labelHelp1").Caption = GlobalX4Mess.Range("solver_hlp_main5").Text
        .Labels("labelHelp2").Caption = GlobalX4Mess.Range("solver_hlp_main5a").Text
        .DialogFrame.Text = GlobalX4Mess.Range("solv_dlg8_title").Text
        .Labels("ObjLabel").Caption = GlobalX4Mess.Range("solv_dlg8_obj").Text
        .Labels("ObjLabel").Accelerator = GlobalX4Mess.Range("solv_dlg8_acc1").Text
        .Labels("ToLabel").Caption = GlobalX4Mess.Range("solv_dlg8_to").Text
        .OptionButtons("max_button").Caption = GlobalX4Mess.Range("solv_dlg8_max").Text
        .OptionButtons("max_button").Accelerator = GlobalX4Mess.Range("solv_dlg8_acc2").Text
        .OptionButtons("min_button").Caption = GlobalX4Mess.Range("solv_dlg8_min").Text
        .OptionButtons("min_button").Accelerator = GlobalX4Mess.Range("solv_dlg8_acc3").Text
        .OptionButtons("value_button").Caption = GlobalX4Mess.Range("solv_dlg8_val").Text
        .OptionButtons("value_button").Accelerator = GlobalX4Mess.Range("solv_dlg8_acc4").Text
        .Labels("VarLabel").Caption = GlobalX4Mess.Range("solv_dlg8_vars").Text
        .Labels("VarLabel").Accelerator = GlobalX4Mess.Range("solv_dlg8_acc5").Text
        .Labels("ConstraintLabel").Caption = GlobalX4Mess.Range("solv_dlg8_cons").Text
        .Labels("ConstraintLabel").Accelerator = GlobalX4Mess.Range("solv_dlg8_acc6").Text
        .CheckBoxes("Nonneg").Caption = GlobalX4Mess.Range("solv_dlg8_nonneg").Text
        .CheckBoxes("Nonneg").Accelerator = GlobalX4Mess.Range("solv_dlg8_acc7").Text
        .Labels("SolveLabel").Caption = GlobalX4Mess.Range("solv_dlg8_method").Text
        .Labels("SolveLabel").Accelerator = GlobalX4Mess.Range("solv_dlg8_acc8").Text
        .Buttons("btnAdd").Caption = GlobalX4Mess.Range("solv_dlg8_add").Text
        .Buttons("btnAdd").Accelerator = GlobalX4Mess.Range("solv_dlg8_acc9").Text
        .Buttons("btnChange").Caption = GlobalX4Mess.Range("solv_dlg8_change").Text
        .Buttons("btnChange").Accelerator = GlobalX4Mess.Range("solv_dlg8_acc10").Text
        .Buttons("btnDelete").Caption = GlobalX4Mess.Range("solv_dlg8_delete").Text
        .Buttons("btnDelete").Accelerator = GlobalX4Mess.Range("solv_dlg8_acc11").Text
        .Buttons("btnReset").Caption = GlobalX4Mess.Range("solv_dlg8_reset").Text
        .Buttons("btnReset").Accelerator = GlobalX4Mess.Range("solv_dlg8_acc12").Text
        .Buttons("btnLoadSave").Caption = GlobalX4Mess.Range("solv_dlg8_load").Text
        .Buttons("btnLoadSave").Accelerator = GlobalX4Mess.Range("solv_dlg8_acc13").Text
        .Buttons("btnOptions").Caption = GlobalX4Mess.Range("solv_dlg8_options").Text
        .Buttons("btnOptions").Accelerator = GlobalX4Mess.Range("solv_dlg8_acc14").Text
        .Buttons("btnSolve").Caption = GlobalX4Mess.Range("solv_dlg8_solve").Text
        .Buttons("btnSolve").Accelerator = GlobalX4Mess.Range("solv_dlg8_acc15").Text
        .Buttons("btnClose").Caption = GlobalX4Mess.Range("solv_dlg8_close").Text
        .Buttons("btnClose").Accelerator = GlobalX4Mess.Range("solv_dlg8_acc16").Text
        .Buttons("btnHelp").Caption = GlobalX4Mess.Range("solv_dlg8_help").Text
        .Buttons("btnHelp").Accelerator = GlobalX4Mess.Range("solv_dlg8_acc17").Text
    
    End With
    ' constraint dialog
    With ThisWorkbook.DialogSheets("Add_dialog")
        .DropDowns("options").List = Array("<=", "=", ">=", GlobalX4Mess.Range("solver_int").Text, _
                GlobalX4Mess.Range("solver_bin").Text, GlobalX4Mess.Range("solver_dif").Text)
        .Labels("LHSLabel").Caption = GlobalX4Mess.Range("solv_dlg1_lhs").Text
        .Labels("LHSLabel").Accelerator = GlobalX4Mess.Range("solv_dlg1_acc1").Text
        .Labels("RHSLabel").Caption = GlobalX4Mess.Range("solv_dlg1_rhs").Text
        .Labels("RHSLabel").Accelerator = GlobalX4Mess.Range("solv_dlg1_acc2").Text
        .Buttons("btnOK").Caption = GlobalX4Mess.Range("solv_dlg1_ok").Text
        .Buttons("btnOK").Accelerator = GlobalX4Mess.Range("solv_dlg1_acc3").Text
        .Buttons("btnAdd").Caption = GlobalX4Mess.Range("solv_dlg1_add").Text
        .Buttons("btnAdd").Accelerator = GlobalX4Mess.Range("solv_dlg1_acc4").Text
        .Buttons("btnCancel").Caption = GlobalX4Mess.Range("solv_dlg1_cancel").Text
        .Buttons("btnCancel").Accelerator = GlobalX4Mess.Range("solv_dlg1_acc5").Text
    End With
    
    ' saveload dialog
    With ThisWorkbook.DialogSheets("Save_dialog")
         ThisWorkbook.DialogSheets("Save_dialog").Buttons("btnLoad").Caption = GlobalX4Mess.Range("solv_dlg4_load").Text
         ThisWorkbook.DialogSheets("Save_dialog").Buttons("btnLoad").Accelerator = GlobalX4Mess.Range("solv_dlg4_acc2").Text
         ThisWorkbook.DialogSheets("Save_dialog").Buttons("btnSave").Caption = GlobalX4Mess.Range("solv_dlg4_save").Text
         ThisWorkbook.DialogSheets("Save_dialog").Buttons("btnSave").Accelerator = GlobalX4Mess.Range("solv_dlg4_acc3").Text
         ThisWorkbook.DialogSheets("Save_dialog").Buttons("btnCancel").Caption = GlobalX4Mess.Range("solv_dlg4_cancel").Text
         ThisWorkbook.DialogSheets("Save_dialog").Buttons("btnCancel").Accelerator = GlobalX4Mess.Range("solv_dlg4_acc4").Text
         ThisWorkbook.DialogSheets("Save_dialog").DialogFrame.Caption = GlobalX4Mess.Range("solv_dlg4_title").Text
         ThisWorkbook.DialogSheets("Save_dialog").Labels("loadlabel1").Caption = GlobalX4Mess.Range("solv_dlg4_select").Text
         ThisWorkbook.DialogSheets("Save_dialog").Labels("loadlabel1").Accelerator = GlobalX4Mess.Range("solv_dlg4_acc1").Text
    End With
    
End Sub

Sub Max_button_Click()
    ThisWorkbook.DialogSheets("Solver_dialog").EditBoxes("dvalueof").Enabled = False
End Sub
Sub Min_button_Click()
    ThisWorkbook.DialogSheets("Solver_dialog").EditBoxes("dvalueof").Enabled = False
End Sub
Sub Value_button_Click()
    ThisWorkbook.DialogSheets("Solver_dialog").EditBoxes("dvalueof").Enabled = True
End Sub

